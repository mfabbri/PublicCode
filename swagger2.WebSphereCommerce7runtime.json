{
  "host": "localhost",
  "basePath": "/wcs/resources",
  "schemes": [
    "http"
  ],
  "swagger": "2.0",
  "info": {
    "title": "localhost",
    "version": "WC.TOOLKIT Enterprise Version : 7 Fix Pack : 9 Feature Pack : 7.0.8.0"
  },
  "tags": [
    {
      "name": "aggregate",
      "description": "An aggregate of responses from multiple REST API requests."
    },
    {
      "name": "api",
      "description": "Information about the resources and APIs available on the server."
    },
    {
      "name": "approval_status",
      "description": "Accurate, secure transactions require that a second individual approve some electronic marketplace actions before they proceed. This individual, called an approver, can accept or reject requests to perform a specific action. This class provides RESTful services to retrieve order and buyer approval status record details and to approve or reject them. "
    },
    {
      "name": "assigned_coupon",
      "description": "This class provides RESTful services to add, get, update, and delete assigned coupons for the current shopping cart."
    },
    {
      "name": "assigned_promotion_code",
      "description": "This class provides RESTful services to add, get, update, and delete assigned promotion codes for the current shopping cart."
    },
    {
      "name": "associated_promotion",
      "description": "This class provides RESTful services to access retrieve associated promotions."
    },
    {
      "name": "cart",
      "description": "This class provides RESTful services to add, update, delete, and get items in the shopping cart and checkout.It also provides services to get usable shipping and payment information by delegating to the Order BOD service."
    },
    {
      "name": "categoryview",
      "description": "This class provides RESTful services to get category data for search-based catalog navigation. It performs the services by delegating to the CatalogNavigationView BOD service."
    },
    {
      "name": "checkoutProfile",
      "description": "This class provides RESTful services to get and update a checkout profile."
    },
    {
      "name": "configuration",
      "description": "This class provides RESTful services to retrieve Configuration details."
    },
    {
      "name": "contract",
      "description": "This class provides RESTful services to access retrieve contract details."
    },
    {
      "name": "country",
      "description": "This class provides RESTful services to get countries or regions and states or provinces information."
    },
    {
      "name": "coupon",
      "description": "This class provides RESTful services to get and process coupon information. For example, deleting a coupon from the list."
    },
    {
      "name": "currency_format",
      "description": "A currency format. Contains formatting information on a currency."
    },
    {
      "name": "display_price",
      "description": "This class provides RESTful services to get display price(list price) for catalog entry. It uses the DisplayPrice noun."
    },
    {
      "name": "espot",
      "description": "This class provides RESTful services to get e-Marketing Spot data. It uses the MarketingSpotData noun."
    },
    {
      "name": "event",
      "description": "This class provides RESTful services to trigger marketing based on certain types of events. For example, CategoryDisplay, ProductDisplay, or Search."
    },
    {
      "name": "file_upload_job",
      "description": "This class provides RESTful services to display summary and detail for a file upload job. It uses the FileUploadJob noun."
    },
    {
      "name": "geonode",
      "description": "This class provides RESTful services to get geo node details. It performs the service by delegating to the GeoNode BOD service."
    },
    {
      "name": "guestidentity",
      "description": "This class provides RESTful services to create a guest and log the guest out. It performs the service by delegating to the Person BOD service."
    },
    {
      "name": "inventoryavailability",
      "description": "This class provides RESTful services to get inventory availability details for products. It performs the service by delegating to the InventoryAvailability BOD service."
    },
    {
      "name": "loginidentity",
      "description": "This class provides RESTful services to login and logout a registered shopper using their user name and password. It performs the service by delegating to the Person BOD service."
    },
    {
      "name": "ltpaidentity",
      "description": "This class provides RESTful services to login and logout a registered user using an LTPA token. It performs the service by delegating to the Person BOD service."
    },
    {
      "name": "member_group",
      "description": "A member group is a grouping of members - users, organizations, or other member groups - used for various business purposes."
    },
    {
      "name": "order",
      "description": "This class provides RESTful services to get order history and order details."
    },
    {
      "name": "organization",
      "description": "This class provides RESTful services to register an organization, to get or update organization information."
    },
    {
      "name": "page",
      "description": "A store page. Contains information on the page such as SEO meta data."
    },
    {
      "name": "page_design",
      "description": "Layout of a store page. Contains information used by the store to render the page."
    },
    {
      "name": "payment_instruction",
      "description": "This class provides RESTful services to add, get, update, and delete payment instructions for the current shopping cart."
    },
    {
      "name": "person",
      "description": "This class provides RESTful services to get person details, register a member, and update a member.  This class also provides RESTful services used by an administrator to find person information, register new and update existing user information."
    },
    {
      "name": "contact",
      "description": "This class provides RESTful services to get contact details, register a person as a member, and update a member."
    },
    {
      "name": "previewToken",
      "description": "This class provides RESTful services to generate the preview token."
    },
    {
      "name": "price",
      "description": "This class provides RESTful services to retrieve entitled and range prices."
    },
    {
      "name": "productview",
      "description": "This class provides RESTful services to get product data for search-based catalog navigation. It performs the service by delegating to the CatalogNavigationView BOD service."
    },
    {
      "name": "promotion",
      "description": "This class provides RESTful services to get promotion data using the Promotion noun."
    },
    {
      "name": "requisition_list",
      "description": "A requisition list is a list of items that is used to create orders at a later date."
    },
    {
      "name": "search_term_association",
      "description": "This class has the ability to return information about Search Term associations ie Landing pages"
    },
    {
      "name": "segment",
      "description": "This class provides RESTful services to retrieve the customer segment data"
    },
    {
      "name": "shipping_info",
      "description": "This class provides RESTful services to get and update shipping information in the shopping cart."
    },
    {
      "name": "spot",
      "description": "This class provides RESTful services to retrieve spot details."
    },
    {
      "name": "{storeId}",
      "description": "This class provides RESTful services to get available resource URLs for a store."
    },
    {
      "name": "storelocator",
      "description": "This class provides RESTful services to get store locator details. It performs the service by delegating to the PhysicalStore and GeoNode BOD services."
    },
    {
      "name": "subscription",
      "description": "This class has the ability to return information about subscriptions"
    },
    {
      "name": "term_condition",
      "description": "A term or condition of an account or contract."
    },
    {
      "name": "usercontext",
      "description": "This class provides RESTful services to get the user context of a shopper. For example, PersonalizationId."
    },
    {
      "name": "widget_definition",
      "description": "Definition of a widget. Contains information on the widget but not its inclusion in a layout."
    },
    {
      "name": "wishlist",
      "description": "This class provides RESTful services to get and manage a shopper's wish lists. Note: You must enable the multiple wish lists feature in the Management Center Store Management tool."
    }
  ],
  "paths": {
    "/store/{storeId}/aggregate": {
      "get": {
        "tags": [
          "aggregate"
        ],
        "operationId": "findByQuery",
        "summary": "Finds an aggregate by a query.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/api": {
      "get": {
        "tags": [
          "api"
        ],
        "operationId": "getResourceList",
        "summary": "Get the list of available resources on the server.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ResourceLinkList"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "403": {
            "description": "If API Discovery is disabled on the server."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/api/aggregated": {
      "get": {
        "tags": [
          "api"
        ],
        "operationId": "getAggregatedResourceList",
        "summary": "Get the aggregated list of available resources on multiple server.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ResourceLinkList"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "403": {
            "description": "If API Discovery is disabled on the server."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/api/resource/{resourceName}": {
      "get": {
        "tags": [
          "api"
        ],
        "operationId": "getResourceDescription",
        "summary": "Describe the APIs available on a resource by name.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The name of the resource.",
            "name": "resourceName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ResourceDescription"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "403": {
            "description": "If API Discovery is disabled on the server."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/api/bundle/{resourceName}": {
      "get": {
        "tags": [
          "api"
        ],
        "operationId": "getResourceDescriptionBundle",
        "summary": "Generate the default API resource bundle used for translation.",
        "description": "The output of this service call is the content of the english resource bundle.",
        "produces": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The name of the resource.",
            "name": "resourceName",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "403": {
            "description": "If API Discovery is disabled on the server."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/approval_status/{approvalStatusId}": {
      "get": {
        "tags": [
          "approval_status"
        ],
        "operationId": "findByApprovalStatusId",
        "summary": "Find an approval status record by its id.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The approval status ID.",
            "name": "approvalStatusId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.approval.beans.ApprovalStatusDataBean_IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "approval_status"
        ],
        "operationId": "updateApprovalStatus",
        "summary": "Updates the status to approve or reject and adds an optional comment to the approval status record.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The approval status ID.",
            "name": "approvalStatusId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The request body for updating an approval status record.",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler$UpdateApprovalStatusParameterDescription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler$UpdateApprovalStatusResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/approval_status": {
      "get": {
        "tags": [
          "approval_status"
        ],
        "operationId": "findOrderApprovals",
        "summary": "Finds order approval status records available to the current user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "orderApprovals"
            ]
          },
          {
            "in": "query",
            "description": "Query by approval request submitter's first name.",
            "name": "submitterFirstName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Query by approval request submitter's middle name.",
            "name": "submitterMiddleName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Query by approval request submitter's last name.",
            "name": "submitterLastName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Query by approval request start time.",
            "name": "startSubmitTime",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "description": "Query by approval request end time.",
            "name": "endSubmitTime",
            "required": false,
            "type": "string",
            "format": "date"
          },
          {
            "in": "query",
            "description": "Query by approval request status.",
            "name": "status",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Query by approval request approval status id.",
            "name": "approvalStatusId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Query by approval request entity id, such as order id.",
            "name": "entityId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Query by approver id. Only returns approval requests that can be approved by the current user.",
            "name": "approverId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Order by.",
            "name": "orderBy",
            "required": false,
            "type": "string",
            "enum": [
              "A-approvalStatusId",
              "A-entityId",
              "A-submitTime",
              "A-approveTime",
              "A-status",
              "A-flowTypeId",
              "A-stateId",
              "D-approvalStatusId",
              "D-entityId",
              "D-submitTime",
              "D-approveTime",
              "D-status",
              "D-flowTypeId",
              "D-stateId"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/assigned_coupon": {
      "get": {
        "tags": [
          "assigned_coupon"
        ],
        "operationId": "getAssignedCouponInfo",
        "summary": "Gets assigned coupons for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-assigned_coupon"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "assigned_coupon"
        ],
        "operationId": "applyCoupon",
        "summary": "Applies coupons to the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for applying a coupon to the shopping cart.",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.AssignedCouponHandler$ApplyCouponBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.AssignedCouponHandler$ApplyCouponResponse"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/assigned_coupon/{couponId}": {
      "delete": {
        "tags": [
          "assigned_coupon"
        ],
        "operationId": "removeCoupon",
        "summary": "Removes coupons from the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Coupon identifier.",
            "name": "couponId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.AssignedCouponHandler$RemoveCouponResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/assigned_promotion_code": {
      "get": {
        "tags": [
          "assigned_promotion_code"
        ],
        "operationId": "getAssignedPromotioncodeInfo",
        "summary": "Gets assigned promotion codes for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-assigned_promotion_code"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "assigned_promotion_code"
        ],
        "operationId": "applyPromotioncode",
        "summary": "Applies promotion codes to the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for applying promotion codes to the shopping cart.",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.AssignedPromotionCodeHandler$ApplyPromotionCodeBody"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.AssignedPromotionCodeHandler$ApplyPromotionCodeResponse"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/assigned_promotion_code/{promoCode}": {
      "delete": {
        "tags": [
          "assigned_promotion_code"
        ],
        "operationId": "removePromotionCode",
        "summary": "Removes promotion codes from the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The promotion code.",
            "name": "promoCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.AssignedPromotionCodeHandler$RemovePromotionCodeResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/associated_promotion": {
      "get": {
        "tags": [
          "associated_promotion"
        ],
        "operationId": "findPromotionsByProductWAssociatedPromotionSummaryProfileName",
        "summary": "Get promotions list by product ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The product ID.",
            "name": "qProductId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The calculation usage ID.",
            "name": "qCalculationUsageId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The calculation code name.",
            "name": "qCode",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether the data bean searches for calculation code based on store path. Default value is <b>true</b>.",
            "name": "qEnableStorePath",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether to exclude category promotions. Default value is <b>false</b>.",
            "name": "qIncludeCategoryPromotions",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether to include the child items. Default value is <b>false</b>.",
            "name": "qIncludeChildItems",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether all the promotions in the store have been created in Management Center. Default value is <b>false</b>",
            "name": "qIncludeNonManagementCenterPromotions",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether to retrieve the calculation codes attached to the parent category of the specified catalog group. Default value is <b>false</b>.",
            "name": "qIncludeParentCategories",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether to retrieve the calculation codes attached to the parent product of the specified catalog entry. Default value is <b>false</b>",
            "name": "qIncludeParentProduct",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether to exclude the calculation codes that require a promotion code. Default value is <b>true</b>.",
            "name": "qIncludePromotionCode",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether to include promotions that are targeted to a member group if the user does not belong to the member group. Default value is <b>false</b>.",
            "name": "qIncludeUnentitledPromotionsByMemberGroup",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The ship mode ID.",
            "name": "qShipModeId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The user ID.",
            "name": "qUserId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byProduct"
            ]
          },
          {
            "in": "query",
            "name": "qCategoryId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "name": "qDisplayLevel",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "name": "qStoreId",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_associatedPromotionsList_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getCart",
        "summary": "Gets order details for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "The order the results are sorted by ie:orderItemID",
            "name": "sortOrderItemBy",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Summary",
              "IBM_Details"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-cart"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "udpateOrderItem",
        "summary": "Updates one or more order items in the shopping cart. This method is deprecated, use updateOrderItem.",
        "deprecated": true,
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Update order item body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/cart-cartUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-cartUpdate"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "delete": {
        "tags": [
          "cart"
        ],
        "operationId": "cancelOrderInCart",
        "summary": "Deletes all items in the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "204": {
            "description": "The requested completed successfully. No content is returned in the response."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{orderId}/schedule_order": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "scheduleOrder",
        "summary": "Creates a scheduled order which is related to a scheduled job.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request object for scheduleOrder.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderScheduleRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderScheduleRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{orderId}/set_pending_order": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "setPendingOrder",
        "summary": "Set the specified order as the current pending order.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order ID.",
            "name": "orderId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request object for SetPendingOrder.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$SetPendingOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$SetPendingOrderRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{orderId}/cancel_order": {
      "delete": {
        "tags": [
          "cart"
        ],
        "operationId": "cancelOrder",
        "summary": "Cancel the specified order.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order ID.",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "This parameter is used to cancel an order that has deposited payment",
            "name": "forcedCancel",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/create_order": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "createOrder",
        "summary": "create an order with the description specified",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "the description for the order",
            "name": "description",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "body data required for rest method",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$CreateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/copy_order": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "copyOrder",
        "summary": "Copies a specified order.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request object for copy order.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$CopyOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$CopyOrderRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/delete_order_item": {
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "deleteOrderItem",
        "summary": "Deletes the specified order item from the order.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for deleting an order item.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$DeleteOrderItemRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/calculate": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "calculateOrder",
        "summary": "Calculate the cost of the order.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "body data required for rest method",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$CalculateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{orderId}/calculate": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "calculateOrder",
        "summary": "Calculate the cost of the order.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order ID.",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request object for calculate order.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$CalculateOrderRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/usable_shipping_info": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getUsableShippingInfo",
        "summary": "Gets usable shipping information for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The order ID.",
            "name": "orderId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-usable_shipping_info"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{orderId}/usable_ship_charges_by_ship_mode": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getUsableShipChargesByShipMode",
        "summary": "Gets usable ship charge information for order id.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order ID.",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/buyer_purchase_order/{buyerPurchaseOrderId}": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getBuyerPurchaseOrderDataBean",
        "summary": "Gets buyer purchase order information for buyer purchase order ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The buyer purchase order identifier.",
            "name": "buyerPurchaseOrderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.payment.beans.BuyerPurchaseOrderDataBean_IBM_BuyerPurchaseOrder_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/usable_billing_address/{orderId}": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getUsableBillingAddressListTCDataBean",
        "summary": "Gets usable billing address information for order id.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order ID.",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The payment Term & Condition identifier for this payment instruction.",
            "name": "paymentTCId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/pattribute/{initKey_referenceNumber}": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getPAttributeDataBean",
        "summary": "Gets payment attribute order information for terms & conditions Id.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The referenceNumber key of the access bean",
            "name": "initKey_referenceNumber",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.utf.beans.PAttributeDataBean_IBM_PAttribute_Detailed"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/payment_policy_list": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getPaymentPolicyListDataBean",
        "summary": "Gets payment policy list information for store.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.payment.beans.PaymentPolicyListDataBean_IBM_PaymentPolicyList_Detailed"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/applyCheckoutProfile": {
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "applyCheckoutProfile",
        "summary": "Applies the quick checkout profile to the current shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body required for apply checkout profile.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/usable_payment_info": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getUsablePaymentInfo",
        "summary": "Gets usable payment information for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The order ID.",
            "name": "orderId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-usable_payment_info"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "addOrderItem",
        "summary": "Adds one or more order items to the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request object for AddOrderItem.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$AddOrderItemBodyDescription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/cart-cartUpdate"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/update_order_item": {
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "updateOrderItem",
        "summary": "Updates one or more order items in the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Update order item body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/cart-cartUpdate"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-cartUpdate"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/add_configuration_to_cart": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "addConfigurationToCart",
        "summary": "Adds a dynamic kit configuration to cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for adding a dynamic kit configuration to cart.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$AddConfigurationToCartRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$AddConfigurationToCartRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/add_preconfiguration_to_cart": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "addPreConfigurationToCart",
        "summary": "Adds a dynamic kit pre-configuration to cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for adding a dynamic kit configuration to cart.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$AddPreConfigurationToCartRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$AddPreConfigurationToCartRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/update_configuration_in_cart": {
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "updateConfigurationInCart",
        "summary": "Update a dynamic kit configuration in the cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for updating a dynamic kit configuration in the cart.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$UpdateConfigurationInCartRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$UpdateConfigurationInCartRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/update_reward_option": {
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "updateRewardOption",
        "summary": "Updates the reward option.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for updating a reward option.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$RewardChoiceUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$RewardChoiceUpdateRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/move_order_item": {
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "moveOrderItem",
        "summary": "Moves order items from one order to another.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for MoveOrderItem.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderItemMoveRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderItemMoveRequest"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/precheckout": {
      "put": {
        "tags": [
          "cart"
        ],
        "operationId": "preCheckout",
        "summary": "Prepares the shopping cart for checkout. This method must be called before the checkout service.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request object for preCheckout.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/checkout": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "checkOut",
        "summary": "Checks out the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request object for checkout.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{cartId}/lock": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "lockCart",
        "summary": "Locks the shopping cart by a CSR.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Order identifier.",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{cartId}/lockOnBehalf": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "lockCartOnBehalf",
        "summary": "Locks the shopping cart when the buyer administrator/CSR has established a session to act on behalf of a user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Order identifier.",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "User name to act on behalf of.",
            "name": "forUser",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User identifier to act on behalf of.",
            "name": "forUserId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{cartId}/unlock": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "unlockCart",
        "summary": "Unlocks the shopping cart by a CSR.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Order identifier.",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/{cartId}/unlockOnBehalf": {
      "post": {
        "tags": [
          "cart"
        ],
        "operationId": "unlockCartOnBehalf",
        "summary": "Unlocks the shopping cart when the buyer administrator/CSR has established a session to act on behalf of a user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Order identifier.",
            "name": "cartId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "User name to act on behalf of.",
            "name": "forUser",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User identifier to act on behalf of.",
            "name": "forUserId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/shipping_modes": {
      "get": {
        "tags": [
          "cart"
        ],
        "operationId": "getAllowableShippingModes",
        "summary": "Gets allowable shipping information for the store.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The locale to use. Example usage : locale=en_US. If the \"langId\" parameter is specified, the \"locale\" parameter will be ignored. If no locale is specified, the store default locale will be used.",
            "name": "locale",
            "required": false,
            "type": "string",
            "enum": [
              "en_US",
              "fr_FR",
              "de_DE",
              "it_IT",
              "es_ES",
              "pt_BR",
              "zh_CN",
              "zh_TW",
              "ko_KR",
              "ja_JP",
              "ru_RU",
              "ro_RO",
              "pl_PL",
              "ar_EG"
            ]
          },
          {
            "in": "query",
            "description": "Language identifier. If not specified, the \"locale\" parameter will be used. If \"locale\" isn't specified, then the store default language shall be used.",
            "name": "langId",
            "required": false,
            "type": "string",
            "enum": [
              "-1",
              "-2",
              "-3",
              "-4",
              "-5",
              "-6",
              "-7",
              "-8",
              "-9",
              "-10",
              "-20",
              "-21",
              "-22",
              "-23"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$ShippingModes"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/categoryview/byId/{categoryId}": {
      "get": {
        "tags": [
          "categoryview"
        ],
        "operationId": "findCategoryByUniqueId",
        "summary": "Gets category details based on its unique ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Category ID.",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/categoryview-categoryDetails"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/categoryview/{categoryIdentifier}": {
      "get": {
        "tags": [
          "categoryview"
        ],
        "operationId": "findCategoryByIdentifier",
        "summary": "Gets category details based on its identifier.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Category Identifier.",
            "name": "categoryIdentifier",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/categoryview-categoryDetails"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/categoryview/@top": {
      "get": {
        "tags": [
          "categoryview"
        ],
        "operationId": "findTopCategories",
        "summary": "Gets all top level categories.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/categoryview-categoryDetails"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/categoryview/byParentCategory/{parentCategoryId}": {
      "get": {
        "tags": [
          "categoryview"
        ],
        "operationId": "findSubCategories",
        "summary": "Gets child categories based on the parent category unique ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The parent category unique ID.",
            "name": "parentCategoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/categoryview-categorySummary"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "204": {
            "description": "The requested completed successfully. No content is returned in the response."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/@self/checkoutProfile": {
      "get": {
        "tags": [
          "checkoutProfile"
        ],
        "operationId": "getCheckoutProfile",
        "summary": "Gets the Check Out Profile for the logged in user using the Member service. The shopper must log in before invoking this method.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/person-checkoutProfile"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "checkoutProfile"
        ],
        "operationId": "updateCheckoutProfile",
        "summary": "Updates the CheckOutProfile for the logged in user using the Member service. The shopper must log in before invoking this method.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Update checkout profile body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/person-checkoutProfile"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler$UserIdContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/configuration/{configurationId}": {
      "get": {
        "tags": [
          "configuration"
        ],
        "operationId": "findByConfigurationId",
        "summary": "This method returns the configuration details by the specified identifier.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The configuration identifier. This is mandatory parameter and cannot be null or empty.",
            "name": "configurationId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/configuration-configuration"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/configuration": {
      "get": {
        "tags": [
          "configuration"
        ],
        "operationId": "findByQuery",
        "summary": "This method returns the configuration details by one or more specified identifiers.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "all",
              "byConfigurationIds"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/configuration-configuration"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/contract": {
      "get": {
        "tags": [
          "contract"
        ],
        "operationId": "findEligible",
        "summary": "Finds the contracts the current user is eligible to.",
        "produces": [
          "application/json",
          "application/xml",
          "application/atom+xml",
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "eligible"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/contract/{contractId}": {
      "get": {
        "tags": [
          "contract"
        ],
        "operationId": "findByContractId",
        "summary": "Gets the contract details for a specific contract ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The contract identifier.",
            "name": "contractId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Contract_Detailed"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/country/country_state_list": {
      "get": {
        "tags": [
          "country"
        ],
        "operationId": "findCountryStateList",
        "summary": "Retrieve a list of countries/region and corresponding states/provinces.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.  Default profile name = IBM_countryStateList_Summary",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_countryStateList_Summary"
            ]
          },
          {
            "in": "query",
            "description": "The country or region abbreviation code",
            "name": "countryCode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateList_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/country/country_state_name": {
      "get": {
        "tags": [
          "country"
        ],
        "operationId": "findCountryStateName",
        "summary": "Retrieve the display name of a country and/or a state.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.  Default profile name = IBM_countryStateName",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_countryStateName"
            ]
          },
          {
            "in": "query",
            "description": "The country or region abbreviation code",
            "name": "countryCode",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The state or province abbreviation code.",
            "name": "stateCode",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateName"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/coupon/@self": {
      "get": {
        "tags": [
          "coupon"
        ],
        "operationId": "getCoupon",
        "summary": "Get available coupons for the current shopper.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/coupon-coupon"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/coupon/{couponId}": {
      "delete": {
        "tags": [
          "coupon"
        ],
        "operationId": "deleteCouponById",
        "summary": "Delete the coupon from coupon wallet by coupon id.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Coupon identifier.",
            "name": "couponId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/currency_format": {
      "get": {
        "tags": [
          "currency_format"
        ],
        "operationId": "findByCurrency",
        "summary": "Finds a currency format by its currency.",
        "produces": [
          "application/json",
          "application/xml",
          "application/atom+xml",
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byCurrency"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "currency",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The number usage.",
            "name": "numberUsage",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.common.beans.StoreCurrencyFormatDescriptionDataBean_IBM_Store_Details"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/display_price": {
      "get": {
        "tags": [
          "display_price"
        ],
        "operationId": "byPartNumbersAndPriceRuleId",
        "summary": "Get the display prices for catalog entries by part numbers and price rule id.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byPartNumbersAndPriceRuleId"
            ]
          },
          {
            "in": "query",
            "description": "The unique id of catalog entry.",
            "name": "partNumber",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The unique id of price rule.",
            "name": "priceRuleId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency of the price.",
            "name": "currency",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The quantity of the catalog entry.",
            "name": "quantity",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The unit of measurement of the quantity.",
            "name": "uom",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/display_price-IBM_Store_DisplayPrice"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/espot": {
      "get": {
        "tags": [
          "espot"
        ],
        "operationId": "findAllSearchTerms",
        "summary": "Retrieve a list of all search terms that have search rules.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "allSearchTerms"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.marketing.handler.ESpotDataHandler$SearchTermsContainer"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/espot/{name}/type/{type}": {
      "get": {
        "tags": [
          "espot"
        ],
        "operationId": "findESpotData",
        "summary": "Gets e-Marketing Spot data.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "E-Spot name.",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "E-Spot type. Sample value : SEARCH",
            "name": "type",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "E-Spot name.",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/espot-espot"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/espot/{name}": {
      "get": {
        "tags": [
          "espot"
        ],
        "operationId": "findByName",
        "summary": "Gets an e-Marketing Spot by name.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "E-Spot name.",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "E-Spot name.",
            "name": "name",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/espot-espot"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/espot/{name}/category/{categoryId}": {
      "get": {
        "tags": [
          "espot"
        ],
        "operationId": "findByNameWithCategory",
        "summary": "Deprecated: Gets an e-Marketing Spot at a specific category level. For example, Furniture. Alternatively, this can be implemented using the findByName method with the following URL: store/{storeId}/espot/{name}?categoryId=&DM_ReqCmd=CategoryDisplay.",
        "deprecated": true,
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "E-Spot name.",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The category identifier.",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/espot-espot"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/espot/{name}/product/{productId}": {
      "get": {
        "tags": [
          "espot"
        ],
        "operationId": "findByNameWithProduct",
        "summary": "Deprecated: Gets an e-Marketing Spot for a specific product. Alternatively, this can be implemented using the findByName method with the following URL: store/{storeId}/espot/{name}?productId=&DM_ReqCmd=ProductDisplay.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "E-Spot name.",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The product identifier.",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/espot-espot"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/event": {
      "post": {
        "tags": [
          "event"
        ],
        "operationId": "triggerMarketing",
        "summary": "Triggers marketing based on certain events. ",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Marketing event trigger body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.marketing.handler.EventHandler$EventTrigger"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/file_upload_job/{fileUploadJobId}": {
      "get": {
        "tags": [
          "file_upload_job"
        ],
        "operationId": "findByFileUploadJobId",
        "summary": "Finds a file upload job by its ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The file upload job ID.",
            "name": "fileUploadJobId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Language identifier. If not specified, the \"locale\" parameter will be used. If \"locale\" isn't specified, then the store default language shall be used.",
            "name": "langId",
            "required": false,
            "type": "string",
            "enum": [
              "-1",
              "-2",
              "-3",
              "-4",
              "-5",
              "-6",
              "-7",
              "-8",
              "-9",
              "-10",
              "-20",
              "-21",
              "-22",
              "-23"
            ]
          },
          {
            "in": "query",
            "description": "The locale to use. Example usage : locale=en_US. If the \"langId\" parameter is specified, the \"locale\" parameter will be ignored. If no locale is specified, the store default locale will be used.",
            "name": "locale",
            "required": false,
            "type": "string",
            "enum": [
              "en_US",
              "fr_FR",
              "de_DE",
              "it_IT",
              "es_ES",
              "pt_BR",
              "zh_CN",
              "zh_TW",
              "ko_KR",
              "ja_JP",
              "ru_RU",
              "ro_RO",
              "pl_PL",
              "ar_EG"
            ]
          },
          {
            "in": "query",
            "description": "Name of the workspace to use for the request.",
            "name": "workspace.name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Identifier of the workspace task to use for the request.",
            "name": "workspace.task",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Identifier of the workspace task group to use for the request.",
            "name": "workspace.taskGroup",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User identifier to act on behalf of.",
            "name": "forUserId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User name to act on behalf of.",
            "name": "forUser",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/file_upload_job-IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/file_upload_job": {
      "get": {
        "tags": [
          "file_upload_job"
        ],
        "operationId": "byNumberOfDaysAndUploadType",
        "summary": "Finds the file upload jobs in recent specified days by upload type.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byNumberOfDaysAndUploadType"
            ]
          },
          {
            "in": "query",
            "description": "Returns the file upload jobs loaded later than the specified number days from current date",
            "name": "numberOfDays",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Returns the file upload jobs of the specified upload type, for example, RequisitionListUpload",
            "name": "uploadType",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Language identifier. If not specified, the \"locale\" parameter will be used. If \"locale\" isn't specified, then the store default language shall be used.",
            "name": "langId",
            "required": false,
            "type": "string",
            "enum": [
              "-1",
              "-2",
              "-3",
              "-4",
              "-5",
              "-6",
              "-7",
              "-8",
              "-9",
              "-10",
              "-20",
              "-21",
              "-22",
              "-23"
            ]
          },
          {
            "in": "query",
            "description": "The locale to use. Example usage : locale=en_US. If the \"langId\" parameter is specified, the \"locale\" parameter will be ignored. If no locale is specified, the store default locale will be used.",
            "name": "locale",
            "required": false,
            "type": "string",
            "enum": [
              "en_US",
              "fr_FR",
              "de_DE",
              "it_IT",
              "es_ES",
              "pt_BR",
              "zh_CN",
              "zh_TW",
              "ko_KR",
              "ja_JP",
              "ru_RU",
              "ro_RO",
              "pl_PL",
              "ar_EG"
            ]
          },
          {
            "in": "query",
            "description": "Name of the workspace to use for the request.",
            "name": "workspace.name",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Identifier of the workspace task to use for the request.",
            "name": "workspace.task",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Identifier of the workspace task group to use for the request.",
            "name": "workspace.taskGroup",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User identifier to act on behalf of.",
            "name": "forUserId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User name to act on behalf of.",
            "name": "forUser",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/file_upload_job-IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/geonode/byTopGeoNode": {
      "get": {
        "tags": [
          "geonode"
        ],
        "operationId": "findTopGeoNodes",
        "summary": "Gets the top geo nodes for the site.",
        "description": "The response schema will flatten the result if a single object is returned in the list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/geonode-geonode"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/geonode/byParentGeoNode/{parentgeoid}": {
      "get": {
        "tags": [
          "geonode"
        ],
        "operationId": "findGeoByParentGeoId",
        "summary": "Gets the geo nodes by the parent geo node unique ID.",
        "description": "The response schema will flatten the result if a single object is returned in the list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The parent geo node identifier.",
            "name": "parentgeoid",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/geonode-geonode"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/geonode": {
      "get": {
        "tags": [
          "geonode"
        ],
        "operationId": "findByQuery",
        "summary": "Find geo nodes based on query name. See each query for details on input and output.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byGeoNodeTypeAndName"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/guestidentity": {
      "post": {
        "tags": [
          "guestidentity"
        ],
        "operationId": "login",
        "summary": "Creates identity tokens for a guest user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.GuestIdentityHandler$UserIdentity"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/guestidentity/@self": {
      "delete": {
        "tags": [
          "guestidentity"
        ],
        "operationId": "logout",
        "summary": "Logs out a guest user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/inventoryavailability/{productIds}": {
      "get": {
        "tags": [
          "inventoryavailability"
        ],
        "operationId": "getInventoryAvailabilityByProductId",
        "summary": "Gets inventory details for the specified product by it's identifier (Catalog Entry Id). Multiple product IDs can be passed to the URI separated by a comma (,).",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The product identifiers. Multiple values are separated by commas. Example: /inventoryavailability/10001,10002",
            "name": "productIds",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The online store identifier.",
            "name": "onlineStoreId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The physical store identifiers. Multiple values are separated by commas. Example: physicalStoreId=10001,10002",
            "name": "physicalStoreId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/inventoryavailability-inventoryavailability"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "If any of the specified product identifiers couldn't be found, or none of the specified online/physical stores exist."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/loginidentity": {
      "post": {
        "tags": [
          "loginidentity"
        ],
        "operationId": "login",
        "summary": "Logs in a registered user using their user name and password.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Logon body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.LoginIdentityHandler$LoginForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.LoginIdentityHandler$UserIdentity"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/loginidentity/@self": {
      "delete": {
        "tags": [
          "loginidentity"
        ],
        "operationId": "logout",
        "summary": "Logs out the registered user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/ltpaidentity": {
      "post": {
        "tags": [
          "ltpaidentity"
        ],
        "operationId": "authenticate",
        "summary": "Authenticates a user using an LTPA token.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "LTPA logon body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.LTPAIdentityHandler$LtpaLoginForm"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.LTPAIdentityHandler$UserIdentity"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/ltpaidentity/@self": {
      "delete": {
        "tags": [
          "ltpaidentity"
        ],
        "operationId": "logout",
        "summary": "Logs out the user.",
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/member_group/{memberGroupId}": {
      "get": {
        "tags": [
          "member_group"
        ],
        "operationId": "findByMemberGroupId",
        "summary": "Finds a member group by its ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The member group ID.",
            "name": "memberGroupId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/member_group": {
      "get": {
        "tags": [
          "member_group"
        ],
        "operationId": "findExplicitlyIncludedOrExcluded",
        "summary": "Finds member groups that explicitly include or exclude the user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/atom+xml",
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "explicitlyIncludedOrExcluded"
            ]
          },
          {
            "in": "query",
            "description": "Order by.",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/order/@history": {
      "get": {
        "tags": [
          "order"
        ],
        "operationId": "findOrderHistory",
        "summary": "Gets the order history for the authenticated user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/order-orderDetail"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/order/{orderId}": {
      "get": {
        "tags": [
          "order"
        ],
        "operationId": "findByOrderId",
        "summary": "Gets the order details for a specific order ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The order identifier.",
            "name": "orderId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Summary",
              "IBM_Details"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/order-orderDetail"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/order/byStatus/{status}": {
      "get": {
        "tags": [
          "order"
        ],
        "operationId": "findByStatus",
        "summary": "Gets a list of orders by order status.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order status.",
            "name": "status",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/order-orderDetail"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/order": {
      "get": {
        "tags": [
          "order"
        ],
        "operationId": "orderProfile",
        "summary": "Find the profile order and its default payment and billing information.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The order status to use for the retrieval of orders.",
            "name": "retrievalOrderStatus",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "orderProfile"
            ]
          },
          {
            "in": "query",
            "name": "userId",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/organization/{organizationId}": {
      "get": {
        "tags": [
          "organization"
        ],
        "operationId": "findByOrganizationIdWParentAssignedRolesDetailsProfileName",
        "summary": "This allows an administrator to find organization information by organization identifier.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The organization identifier",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.  Default profile name = IBM_Organization_Summary",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Organization_Short_Summary",
              "IBM_Organization_Summary",
              "IBM_Organization_Details",
              "IBM_Org_Entity_Details",
              "IBM_Assigned_Roles_Details",
              "IBM_Parent_Assigned_Roles_Details"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "operationId": "updateApprovalGroups",
        "summary": "Updates approval group.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The organization identifier",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$UpdateApprovalGroups"
            }
          },
          {
            "in": "query",
            "description": "The action of the rest service.",
            "name": "action",
            "required": true,
            "type": "string",
            "enum": [
              "updateApprovalGroups"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$UpdateApprovalGroupsResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "organization"
        ],
        "operationId": "updateOrganization",
        "summary": "This allows an administrator to update information of an organization.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The organization identifier",
            "name": "organizationId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityIdentity"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/organization": {
      "get": {
        "tags": [
          "organization"
        ],
        "operationId": "findByQuery",
        "summary": "This allows an administrator to find organizations based on query name. See each query for details on input and output.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "organizationsICanAdmin",
              "rolesICanAssignInOrg"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "organization"
        ],
        "operationId": "registerOrganization",
        "summary": "This allows an administrator to register an organization.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityIdentity"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/organization/buyer": {
      "post": {
        "tags": [
          "organization"
        ],
        "operationId": "registerBuyerOrganization",
        "summary": "Registers a buyer organization and a buyer organization administrator.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$BuyerRegistrationAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityBuyerIdentifier"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/page/{pageId}": {
      "get": {
        "tags": [
          "page"
        ],
        "operationId": "findByPageId",
        "summary": "Finds a page by its ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The page ID.",
            "name": "pageId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Store_Summary",
              "IBM_Store_Details"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/page-IBM_Store_Details"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/page/name/{name}": {
      "get": {
        "tags": [
          "page"
        ],
        "operationId": "findByName",
        "summary": "Finds a page by its name.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The page name.",
            "name": "name",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Store_Summary",
              "IBM_Store_Details"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/page-IBM_Store_Details"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/page": {
      "get": {
        "tags": [
          "page"
        ],
        "operationId": "byCategoryIds",
        "summary": "Finds pages by category IDs. Invalid category IDs are ignored.",
        "produces": [
          "application/json",
          "application/xml",
          "application/atom+xml",
          "application/xhtml+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byCategoryIds"
            ]
          },
          {
            "in": "query",
            "description": "The category ID.",
            "name": "categoryId",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/page-IBM_Store_Details_SEO"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/page_design": {
      "get": {
        "tags": [
          "page_design"
        ],
        "operationId": "byLayoutActivityId",
        "summary": "Finds a page design by a layout activity ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byLayoutActivityId"
            ]
          },
          {
            "in": "query",
            "description": "The layout activity ID.",
            "name": "layoutActivityId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/page_design-IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/payment_instruction": {
      "get": {
        "tags": [
          "payment_instruction"
        ],
        "operationId": "getPaymentInfo",
        "summary": "Gets payment instructions for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-payment_instruction"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "payment_instruction"
        ],
        "operationId": "addPaymentInstruction",
        "summary": "Adds payment instruction to the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "body data required for rest method",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/cart-payment_instruction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.PaymentInstructionHandler$PaymentInstructionList"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "payment_instruction"
        ],
        "operationId": "updatePaymentInstruction",
        "summary": "Updates payment instructions in the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/cart-payment_instruction"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.PaymentInstructionHandler$PaymentInstructionList"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "delete": {
        "tags": [
          "payment_instruction"
        ],
        "operationId": "deleteAllPaymentInstructions",
        "summary": "Deletes all payment Instructions from the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/payment_instruction/{paymentInstruction_id}": {
      "delete": {
        "tags": [
          "payment_instruction"
        ],
        "operationId": "deletePaymentInstruction",
        "summary": "Deletes a payment instruction in the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Payment instruction identifier to delete.",
            "name": "paymentInstruction_id",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/payment_instruction/sensitive_data_mask_by_plain_string": {
      "get": {
        "tags": [
          "payment_instruction"
        ],
        "operationId": "getSensitiveDataMaskByPlainString",
        "summary": "Gets sensitive data mask information for plain string.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The plain string for the sensitive data",
            "name": "plainString",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.edp.beans.EDPSensitiveDataMaskHelperDataBean_IBM_sensitiveDataMaskByPlainString"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/@self": {
      "get": {
        "tags": [
          "person"
        ],
        "operationId": "findPersonBySelf",
        "summary": "Gets the account data for a registered user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/person-person"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "person"
        ],
        "operationId": "updatePersonOnUserRegistrationUpdate",
        "summary": "Updates account data for a registered user.  This also supports resetting password for unauthenticated and authenticated users. When action is set to 'updateUserRegistration', user account data is updated using UserRegistrationUpdateCmd",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationUpdateRequest"
            }
          },
          {
            "in": "query",
            "description": "The action of the rest service.",
            "name": "action",
            "required": false,
            "type": "string",
            "enum": [
              "updateUserRegistration"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UserIdentifier"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/{userId}": {
      "get": {
        "tags": [
          "person"
        ],
        "operationId": "findByUserIdWRolesOfUserInOrgsICanAdminProfileName",
        "summary": "This allows an administrator to find user information by user identifier.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The user identifier.",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.  Default profile name = IBM_User_Display_Details",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_User_Display_Details",
              "IBM_User_Registration_Details",
              "IBM_User_Top_Level_Org_Administered",
              "IBM_Assigned_Roles_Details",
              "IBM_Roles_Of_User_All",
              "IBM_Roles_Of_User_In_Orgs_I_Can_Admin"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_In_Orgs_I_Can_Admin"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "person"
        ],
        "operationId": "updatePersonByAdmin",
        "summary": "This allows an administrator to update account data for a registered user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The user identifier.",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationAdminUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UserIdentifier"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "person"
        ],
        "operationId": "performActionByAdmin",
        "summary": "Performs an action on a person by an administrator. See each action for details on input and output.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The user identifier.",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The action of the rest service.",
            "name": "action",
            "required": true,
            "type": "string",
            "enum": [
              "assignRole",
              "unassignRole"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person": {
      "get": {
        "tags": [
          "person"
        ],
        "operationId": "findByQuery",
        "summary": "This allows an administrator to find users based on a query name. See each query for details on input and output.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "usersICanAdmin"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "person"
        ],
        "operationId": "registerPersonOnUserRegistrationAdminAdd",
        "summary": "Registers a new user.  When mode is set to admin, the register is done by an administrator.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationAdminAddRequest"
            }
          },
          {
            "in": "query",
            "description": "The mode of the rest service.",
            "name": "mode",
            "required": false,
            "type": "string",
            "enum": [
              "self",
              "admin"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationAdminAddResponse"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/@self/optOut": {
      "get": {
        "tags": [
          "person"
        ],
        "operationId": "findOptOutBySelfWOptOutAllProfileName",
        "summary": "Find personal opt-out.  When the store level personal opt-out does not exist, the site level personal opt-out is returned.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.  Default profile name = IBM_optOut_email",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_optOut_email",
              "IBM_optOut_sms",
              "IBM_optOut_all"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_all"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/@self/contextattributes/{jobNames}/{values}": {
      "delete": {
        "tags": [
          "person"
        ],
        "operationId": "deleteContextAttributeForPerson",
        "summary": "Deletes one or more values of a context attribute for a registered user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Name of the person's job function to use for the request.",
            "name": "jobNames",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "Value of the person's job function.",
            "name": "values",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$DeleteContextAttribute"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/updateMemberUser/{userId}": {
      "post": {
        "tags": [
          "person"
        ],
        "operationId": "updateMemberUser",
        "summary": "Updates user to be included/excluded from a member group or to be unassgined.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The user identifier.",
            "name": "userId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UpdateMemberUser"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonHandler$UpdateMemberUserResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/@self/contact": {
      "get": {
        "tags": [
          "contact"
        ],
        "operationId": "getAllPersonContact",
        "summary": "Gets the contacts in a person's address book. If the addressType optional query parameter is passed in, the returned contacts are filtered by addressType.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The address type.",
            "name": "addressType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/person-contact"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "contact"
        ],
        "operationId": "addPersonContact",
        "summary": "Creates a new contact in a person's address book.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/person-contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonContactHandler$UserIdentifier"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/@self/contact/byAddressId/{addressId}": {
      "get": {
        "tags": [
          "contact"
        ],
        "operationId": "findPersonContactById",
        "summary": "Gets a person contact by address ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The address identifier.",
            "name": "addressId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/person-singleContact"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/person/@self/contact/{nickName}": {
      "get": {
        "tags": [
          "contact"
        ],
        "operationId": "findPersonContactByNickName",
        "summary": "Gets a person contact by nick name.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The contact name saved in addressBook by registered shopper.",
            "name": "nickName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/person-singleContact"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "contact"
        ],
        "operationId": "updatePersonContact",
        "summary": "Updates the contact in the address book identified by nickName.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The contact name saved in addressBook by registered shopper.",
            "name": "nickName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/person-contact"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PersonContactHandler$AddressIdentifier"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "delete": {
        "tags": [
          "contact"
        ],
        "operationId": "deletePersonContact",
        "summary": "Deletes the contact in the address book identified by nickName.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The contact name saved in addressBook by registered shopper.",
            "name": "nickName",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/Empty"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/previewToken": {
      "post": {
        "tags": [
          "previewToken"
        ],
        "operationId": "genPreviewToken",
        "summary": "Requests the preview token.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PreviewTokenHandler$PreviewParameters"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.PreviewTokenHandler$PreviewToken"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/price": {
      "get": {
        "tags": [
          "price"
        ],
        "operationId": "byPartNumbers",
        "summary": "Get the entitled and range prices for catalog entries by part numbers.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byPartNumbers"
            ]
          },
          {
            "in": "query",
            "description": "The part number of the catalog entry.",
            "name": "partNumber",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The unique id of the contract.",
            "name": "contractId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency of the price.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "The quantity of the catalog entry.",
            "name": "quantity",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The unit of measurement of the quantity.",
            "name": "uom",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The date of the price.",
            "name": "date",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Whether or not enable entitlement check when retrieving prices",
            "name": "checkEntitlement",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "description": "Whether or not treat dynamic kit as item when retrieving prices",
            "name": "dynamicKitAsItem",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Store_EntitledPrice_All",
              "IBM_Store_EntitledPrice_RangePrice_All"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/price-price"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "price"
        ],
        "operationId": "findPricesByQuery",
        "summary": "Find prices in a store using a structure that allows multiple results in a single query.",
        "description": "The body of this POST request contains a query structure that determines the product prices requested and other parameters that may be either specific to each product, or set globally for all requested products. If there is a conflict between a globally specified value and a value specific to a product, the product-specific value will be used. The body of the request must include a 'query' object which contains the remaining parameters of the query. Within the 'query', a 'name' must be included.  Valid names are 'byProductID' which requires product IDs to be given for each product and 'byPartNumber' which requires part numbers to be given for each product. For additional details, see the request body structure description.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used. This value is applied to all the queried products unless overridden at the product level.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          },
          {
            "in": "query",
            "description": "Setting the 'profile' to 'default' or not specifying the 'profile' will result in normal prices being returned. A 'profile' value of 'range' will return the normal prices, and in addition, will return a list of range prices, which includes the minimum and maximum quantities as well as the price for each range.",
            "name": "profile",
            "required": false,
            "type": "string",
            "enum": [
              "default",
              "range"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for a price query.",
            "name": "body",
            "required": true,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest"
            }
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/price-price"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/productview/bySearchTerm/{searchTerm}": {
      "get": {
        "tags": [
          "productview"
        ],
        "operationId": "findProductsBySearchTerm",
        "summary": "Gets matching products for a given search term. It supports specifying conditions to filter the search results.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The term you are searching for",
            "name": "searchTerm",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The term to be used for search after a spell correction will be logged in search statistics as a suggestion",
            "name": "intentSearchTerm",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The term which was miss spelled will be used in search statistics to track search misses",
            "name": "originalSearchTerm",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The category id used to narrow down search results to a cateogry id",
            "name": "categoryId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Specify different search configurations example 1000 (INCLUDE products, kits, bundles, category level SKUs)",
            "name": "searchType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Term used to filter out search results",
            "name": "filterTerm",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The type of filter to use",
            "name": "filterType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Specific brand to narrow down score of search",
            "name": "manufacturer",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Set the minimum price range for a search",
            "name": "minPrice",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Set the maximum price range for a search",
            "name": "maxPrice",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Specify facets which have been selected",
            "name": "facet",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "Specify advanced facets which have been selected",
            "name": "advancedFacetList",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Narrow down scope of search results by excluding facet filters",
            "name": "filterFacet",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Change the order of search results, possible values 1-4",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Specify metadata to be used in search result",
            "name": "metaData",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Specify the origin of the search request (ie 'A' to indicate search is coming from advanced search)",
            "name": "searchSource",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/productview-productSummary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/productview/byId/{productId}": {
      "get": {
        "tags": [
          "productview"
        ],
        "operationId": "findProductById",
        "summary": "Gets product details based on the product ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Product identifier code to retrieve details about a particular product",
            "name": "productId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/productview-productSummary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/productview/byIds/": {
      "get": {
        "tags": [
          "productview"
        ],
        "operationId": "findProductsByIds",
        "summary": "Gets product details based on the product ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Product identifier code to retrieve details about a particular product",
            "name": "id",
            "required": true,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The type of the merchandising association to be returned.",
            "name": "associationType",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/productview-productSummary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/productview/{partNumber}": {
      "get": {
        "tags": [
          "productview"
        ],
        "operationId": "findProductByPartNumber",
        "summary": "Gets product details based on the part number.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Part number to retrieve details about a particular sku",
            "name": "partNumber",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The type of the merchandising association to be returned.",
            "name": "associationType",
            "required": false,
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/productview-productSummary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/productview/byCategory/{categoryId}": {
      "get": {
        "tags": [
          "productview"
        ],
        "operationId": "findProductsByCategory",
        "summary": "Gets all products belonging to a category based on the category unique ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The category id used to narrow down search results to a cateogry id",
            "name": "categoryId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Specify different search configurations example 1000 (INCLUDE products, kits, bundles, category level SKUs)",
            "name": "searchType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Change the order of search results, possible values 1-4",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/productview-productSummary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/promotion": {
      "get": {
        "tags": [
          "promotion"
        ],
        "operationId": "getPromotionsByQuery",
        "summary": "Gets the promotion list by query type and parameters.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Language identifier. If not specified, the \"locale\" parameter will be used. If \"locale\" isn't specified, then the store default language shall be used.",
            "name": "langId",
            "required": false,
            "type": "string",
            "enum": [
              "-1",
              "-2",
              "-3",
              "-4",
              "-5",
              "-6",
              "-7",
              "-8",
              "-9",
              "-10",
              "-20",
              "-21",
              "-22",
              "-23"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "all",
              "byName"
            ]
          },
          {
            "in": "query",
            "description": "The name of the promotion to find when finding promotions by name.",
            "name": "qName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/promotion-promotion"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/promotion/{promotionId}": {
      "get": {
        "tags": [
          "promotion"
        ],
        "operationId": "getPromotionByID",
        "summary": "Get Promotion by id.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The promotion identifier.",
            "name": "promotionId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Language identifier. If not specified, the \"locale\" parameter will be used. If \"locale\" isn't specified, then the store default language shall be used.",
            "name": "langId",
            "required": false,
            "type": "string",
            "enum": [
              "-1",
              "-2",
              "-3",
              "-4",
              "-5",
              "-6",
              "-7",
              "-8",
              "-9",
              "-10",
              "-20",
              "-21",
              "-22",
              "-23"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The currency code to use. Example usage : currency=USD. If no currency code is specified, the store default currency shall be used.",
            "name": "currency",
            "required": false,
            "type": "string",
            "enum": [
              "ARS",
              "ATS",
              "AUD",
              "BEF",
              "BRL",
              "CAD",
              "CHF",
              "CNY",
              "DEM",
              "DKK",
              "EGP",
              "ESP",
              "EUR",
              "FIM",
              "FRF",
              "GBP",
              "HKD",
              "IEP",
              "ITL",
              "JPY",
              "KRW",
              "LUF",
              "NLG",
              "NOK",
              "PLN",
              "PTE",
              "ROL",
              "RON",
              "RUB",
              "SEK",
              "SGD",
              "TWD",
              "USD",
              "ZAR"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/promotion-promotion"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/requisition_list/{requisitionListId}": {
      "get": {
        "tags": [
          "requisition_list"
        ],
        "operationId": "findByRequisitionListId",
        "summary": "Finds a requisition list by its ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The requisition list ID.",
            "name": "requisitionListId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "requisition_list"
        ],
        "operationId": "update",
        "summary": "Updates a requisition list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The requisition list ID.",
            "name": "requisitionListId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The body data.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListUpdateRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "delete": {
        "tags": [
          "requisition_list"
        ],
        "operationId": "delete",
        "summary": "Deletes a requisition list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The requisition list ID.",
            "name": "requisitionListId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The body data.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListDeleteRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListDeleteResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "requisition_list"
        ],
        "operationId": "submit",
        "summary": "Submits a requisition list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The requisition list ID.",
            "name": "requisitionListId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The action.",
            "name": "action",
            "required": true,
            "type": "string",
            "enum": [
              "submit"
            ]
          },
          {
            "in": "body",
            "description": "The body data.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListSubmitRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListSubmitResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/requisition_list": {
      "get": {
        "tags": [
          "requisition_list"
        ],
        "operationId": "findUsable",
        "summary": "Finds requisition lists that can be used by the current user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "usable"
            ]
          },
          {
            "in": "query",
            "description": "Order by.",
            "name": "orderBy",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "requisition_list"
        ],
        "operationId": "addConfiguration",
        "summary": "Add pre-configured dynamic kits or dynamic kit configurations to a requisition list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The action.",
            "name": "action",
            "required": true,
            "type": "string",
            "enum": [
              "addConfiguration"
            ]
          },
          {
            "in": "body",
            "description": "The body data.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListConfigurationAddRequest"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListConfigurationAddResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/search_term_association": {
      "get": {
        "tags": [
          "search_term_association"
        ],
        "operationId": "byAssociationType",
        "summary": "Finds search term associations by association type",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byAssociationType"
            ]
          },
          {
            "in": "query",
            "description": "The Association type eg (SearchForInstead,AlsoSearchFor,Synonym,LandingPageURL) can also be represented using values 1-4",
            "name": "associationType",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Admin_Summary"
            ]
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/search_term_association-IBM_Admin_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/segment/{segmentId}/isMember": {
      "get": {
        "tags": [
          "segment"
        ],
        "operationId": "checkIsInSegmentByUserId",
        "summary": "Check whether the given customer identified by userId or personalizationId is part of given customer segment",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Segment identifier.",
            "name": "segmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User unique identifier.",
            "name": "userId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "The user's personalization id. Note : this parameter is ignored if the userId parameter is specified.",
            "name": "personalizationId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.marketing.handler.SegmentHandler$SegmentMemberCheck"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/segment": {
      "get": {
        "tags": [
          "segment"
        ],
        "operationId": "getCustomerSegment",
        "summary": "Get all customer segment by given storeId or get segment by userId or personalizationId or byName",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byUserId",
              "byPersonalizationId",
              "byName",
              "all"
            ]
          },
          {
            "in": "query",
            "description": "The user identifier. Mandatory if the query is set to : byUserId",
            "name": "qUserId",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "The user's personalization identifier. Mandatory if the query is set to : byPersonalizationId",
            "name": "qPersonalizationId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The user's name. Mandatory if the query is set to : byName",
            "name": "qName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/segment-segments"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/segment/{segmentId}": {
      "get": {
        "tags": [
          "segment"
        ],
        "operationId": "getCustomerSegmentById",
        "summary": "Get customer segment by segmentId",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The segment identifier.",
            "name": "segmentId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/segment-segments"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/cart/@self/shipping_info": {
      "get": {
        "tags": [
          "shipping_info"
        ],
        "operationId": "getShippingInfo",
        "summary": "Gets shipping information for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Language identifier. If not specified, the \"locale\" parameter will be used. If \"locale\" isn't specified, then the store default language shall be used.",
            "name": "langId",
            "required": false,
            "type": "string",
            "enum": [
              "-1",
              "-2",
              "-3",
              "-4",
              "-5",
              "-6",
              "-7",
              "-8",
              "-9",
              "-10",
              "-20",
              "-21",
              "-22",
              "-23"
            ]
          },
          {
            "in": "query",
            "description": "The locale to use. Example usage : locale=en_US. If the \"langId\" parameter is specified, the \"locale\" parameter will be ignored. If no locale is specified, the store default locale will be used.",
            "name": "locale",
            "required": false,
            "type": "string",
            "enum": [
              "en_US",
              "fr_FR",
              "de_DE",
              "it_IT",
              "es_ES",
              "pt_BR",
              "zh_CN",
              "zh_TW",
              "ko_KR",
              "ja_JP",
              "ru_RU",
              "ro_RO",
              "pl_PL",
              "ar_EG"
            ]
          },
          {
            "in": "query",
            "description": "User name to act on behalf of.",
            "name": "forUser",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User identifier to act on behalf of.",
            "name": "forUserId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-shipping_info"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "shipping_info"
        ],
        "operationId": "updateOrderShippingInfo",
        "summary": "Updates shipping information for the shopping cart.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.ShippingInfoHandler$UpdateShippingInfoBodyDescription"
            }
          },
          {
            "in": "query",
            "description": "User name to act on behalf of.",
            "name": "forUser",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "User identifier to act on behalf of.",
            "name": "forUserId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/cart-cartUpdate"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/spot": {
      "get": {
        "tags": [
          "spot"
        ],
        "operationId": "findSpotsByQuery",
        "summary": "Find spots in a store.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byType",
              "byTypeAndName"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Type of the e-spot. For instance : qType=MARKETING. Required for search by type.",
            "name": "qType",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Name of the e-spot used to find all spots with at least a partial match in the name or description. Required for search by name.",
            "name": "qName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The catalog identifier. If none is specified, the store default catalog shall be used.",
            "name": "catalogId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/spot-spot"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/spot/{spotId}": {
      "get": {
        "tags": [
          "spot"
        ],
        "operationId": "findSpotByID",
        "summary": "Find a spot in a store using its unique identifier.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "E-Spot identifier.",
            "name": "spotId",
            "required": true,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/spot-spot"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/databean": {
      "get": {
        "tags": [
          "{storeId}"
        ],
        "operationId": "findDataBean",
        "summary": "This method returns information about a specific store ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "jspStoreDir",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "name": "storeRelationshipTypeName",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/store-store"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/online_store": {
      "get": {
        "tags": [
          "{storeId}"
        ],
        "operationId": "findOnlineStore",
        "summary": "This method returns online store information about a specific store ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/store-store"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}": {
      "get": {
        "tags": [
          "{storeId}"
        ],
        "operationId": "fetchStore",
        "summary": "Gets top level resource URLs.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.store.handler.StoreHandler$StoreInformation"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/storelocator/byLocation": {
      "get": {
        "tags": [
          "storelocator"
        ],
        "operationId": "findGeoNodeByGeoLocation",
        "summary": "Gets store location information by a specified location.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The city.",
            "name": "city",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The state.",
            "name": "state",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The province.",
            "name": "prov",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The country.",
            "name": "country",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The radius unit of measure.",
            "name": "radiusUOM",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The physcal store attribute name that describes whether the store is a beauty center.",
            "name": "BeautyCenter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The physical store attribute name to describe the type of the store.",
            "name": "Type",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The radius.",
            "name": "radius",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "If it is 'true', a site level physical search will be performed.  Otherwise, the physical store search will be performed at the web store level. By default, it is 'true'.",
            "name": "siteLevelStoreSearch",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/storelocator-storelocator"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "No physical store is found for the criteria provided."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/storelocator/byGeoNode/{geoId}": {
      "get": {
        "tags": [
          "storelocator"
        ],
        "operationId": "findGeoNodeByGeoId",
        "summary": "Gets store location information by a geo node unique ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The geo node unique identifier.",
            "name": "geoId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "The physcal store attribute name that describes whether the store is a beauty center.",
            "name": "BeautyCenter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The physical store attribute name to describe the type of the store.",
            "name": "Type",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "If it is 'true', a site level physical search will be performed.  Otherwise, the physical store search will be performed at the web store level. By default, it is 'true'.",
            "name": "siteLevelStoreSearch",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/storelocator-storelocator"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/storelocator/byStoreId/{uniqueId}": {
      "get": {
        "tags": [
          "storelocator"
        ],
        "operationId": "findByStoreUniqueId",
        "summary": "Gets store location information by a store unique ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The unique identifier.",
            "name": "uniqueId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/storelocator-storelocator"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/storelocator/byStoreIds": {
      "get": {
        "tags": [
          "storelocator"
        ],
        "operationId": "findByStoreUniqueIds",
        "summary": "Gets store location information by one to n store unique IDs.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "A list of physical store unique identifiers.",
            "name": "physicalStoreId",
            "required": true,
            "type": "array",
            "items": {
              "type": "java.util.List"
            }
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int32"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int32"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/storelocator-storelocator"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/storelocator/latitude/{latitude}/longitude/{longitude}": {
      "get": {
        "tags": [
          "storelocator"
        ],
        "operationId": "findStores",
        "summary": "Gets store location information by specified coordinates.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The latitude.",
            "name": "latitude",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The longitude.",
            "name": "longitude",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The maximum number of stores to return.",
            "name": "maxItems",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The radius unit of measure.",
            "name": "radiusUOM",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The physcal store attribute name that describes whether the store is a beauty center.",
            "name": "BeautyCenter",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The physical store attribute name to describe the type of the store.",
            "name": "Type",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The radius.",
            "name": "radius",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "If it is 'true', a site level physical search will be performed.  Otherwise, the physical store search will be performed at the web store level. By default, it is 'true'.",
            "name": "siteLevelStoreSearch",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/storelocator-storelocator"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/subscription": {
      "get": {
        "tags": [
          "subscription"
        ],
        "operationId": "byBuyerIdAndSubscriptionType",
        "summary": "Finds subscriptions by user and subscription type",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byBuyerIdAndSubscriptionType"
            ]
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Store_Summary"
            ]
          },
          {
            "in": "query",
            "description": "The subscription type code ie(All,RecurringOrder)",
            "name": "subscriptionTypeCode",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The buyer Id",
            "name": "buyerId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/subscription-IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/subscription/{subscriptionId}": {
      "get": {
        "tags": [
          "subscription"
        ],
        "operationId": "bySubscriptionId",
        "summary": "Finds subcription infomation by its subscriptionId",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The subcription id",
            "name": "subscriptionId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Profile name. Profiles determine the subset of data to be returned by a query.",
            "name": "profileName",
            "required": false,
            "type": "string",
            "enum": [
              "IBM_Admin_Summary"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/subscription-IBM_Store_Details"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/subscription/{orderId}/submit_recurring_or_subscription": {
      "post": {
        "tags": [
          "subscription"
        ],
        "operationId": "submitRecurringOrSubscription",
        "summary": "Submits a recurring or subscription.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order id",
            "name": "orderId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "Request body.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.subscription.handler.SubscriptionHandler$SubmitRecurringOrSubscription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.subscription.handler.SubscriptionHandler$SubmitRecurringOrSubscriptionResponse"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/subscription/{orderId}/cancel_recurring_or_subscription": {
      "delete": {
        "tags": [
          "subscription"
        ],
        "operationId": "cancelRecurringOrSubscription",
        "summary": "Cancel the specified recurring or subscription.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The order id",
            "name": "orderId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "The subcription id",
            "name": "subscriptionId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.subscription.handler.SubscriptionHandler$CancelRecurringOrSubscription"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/term_condition/{termConditionId}": {
      "get": {
        "tags": [
          "term_condition"
        ],
        "operationId": "findByTermConditionId",
        "summary": "Finds a term condition by its ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The term condition ID.",
            "name": "termConditionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.contract.beans.ExtendedTermConditionDataBean_IBM_Store_Details"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/term_condition": {
      "get": {
        "tags": [
          "term_condition"
        ],
        "operationId": "findDisplayCustomizationTC",
        "summary": "Finds the display customization TC of the account associated with the current user.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "displayCustomizationTC"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.tools.contract.beans.DisplayCustomizationTCDataBean_IBM_Store_Details"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/usercontext/personalizationId": {
      "get": {
        "tags": [
          "usercontext"
        ],
        "operationId": "getPersonalizationID",
        "summary": "Gets or generates the Personalization ID of the current session.",
        "description": "If WCToken is passed in the HTTP header, it returns the personalization ID based on WCToken. Otherwise, it returns a personalization ID for a generic user (guest shopper). For a generic user, the UUID of the persistent session is the personalization ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$PersonalizationIdentifier"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/usercontext/@self/contextdata": {
      "get": {
        "tags": [
          "usercontext"
        ],
        "operationId": "getContextData",
        "summary": "Gets the context data by the cookies and tokens sent with the request. ",
        "description": "If no token or cookie for user session is sent, the context data are returned as generic user data, otherwise, the context data are returned as those associated with the user session cookie or token.If preview token is sent, the preview context data are returned as those associated with the preview token, otherwise, the preview context data are returned as those associated with the user session cookie or token.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/widget_definition/{widgetDefinitionId}": {
      "get": {
        "tags": [
          "widget_definition"
        ],
        "operationId": "findByWidgetDefinitionId",
        "summary": "Finds a widget definition by its ID.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The widget definition ID.",
            "name": "widgetDefinitionId",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/widget_definition-IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/widget_definition/identifier/{identifier}": {
      "get": {
        "tags": [
          "widget_definition"
        ],
        "operationId": "findByIdentifier",
        "summary": "Finds a widget definition by its identifier.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "The widget definition identifier.",
            "name": "identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/widget_definition-IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/widget_definition": {
      "get": {
        "tags": [
          "widget_definition"
        ],
        "operationId": "byIdentifiers",
        "summary": "Finds widget definitions by their IDs. Invalid widget definition IDs are ignored.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The query name.",
            "name": "q",
            "required": true,
            "type": "string",
            "enum": [
              "byIdentifiers"
            ]
          },
          {
            "in": "query",
            "description": "The widget definition identifier.",
            "name": "identifier",
            "required": true,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/widget_definition-IBM_Store_Summary"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/wishlist/@self": {
      "get": {
        "tags": [
          "wishlist"
        ],
        "operationId": "findWishlist",
        "summary": "Gets all of the shopper's wish lists.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/wishlist-wishlist"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/wishlist/@default": {
      "get": {
        "tags": [
          "wishlist"
        ],
        "operationId": "findWishlistByUserId_default",
        "summary": "Gets the shopper's default wish list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/wishlist-wishlist"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/wishlist/{externalId}": {
      "get": {
        "tags": [
          "wishlist"
        ],
        "operationId": "findWishlistByExternalId",
        "summary": "Gets the shopper's wish list by ExternalId or by ExternalId and GuestAccesskey. If only ExternalId is specified, the user must be authenticated.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Wish list external identifier.",
            "name": "externalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Wish list guest access key.",
            "name": "guestAccessKey",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/wishlist-wishlist"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "404": {
            "description": "The specified resource couldn't be found."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "post": {
        "tags": [
          "wishlist"
        ],
        "operationId": "processWishlist",
        "summary": "Process a wish list.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Wish list external identifier.",
            "name": "externalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "body",
            "description": "The request body for the e-mail announcements made about the gift list by the registrants to friends and family.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$ProcessBodyParameterDescription"
            }
          },
          {
            "in": "query",
            "description": "The action of the rest service.",
            "name": "action",
            "required": false,
            "type": "string",
            "enum": [
              "announce"
            ]
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListResponse"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "put": {
        "tags": [
          "wishlist"
        ],
        "operationId": "updateWishlist",
        "summary": "Updates the wish list to change the description or to add or update an item.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Wish list external identifier.",
            "name": "externalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "When set to true, a new item in a request will be added to the wishlist. When false or missing, the wishlist description and/or item will be updated with the information in the request. Default is false.",
            "name": "addItem",
            "required": false,
            "type": "string",
            "enum": [
              "true",
              "false"
            ]
          },
          {
            "in": "body",
            "description": "The request body for updating a wishlist description or wishlist item.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$UpdateBodyParameterDescription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListUpdateResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      },
      "delete": {
        "tags": [
          "wishlist"
        ],
        "operationId": "deleteWishlist",
        "summary": "Deletes a wish list or delete an item from a wish list. Specify an itemId or a productId to delete only that item from the wish list; otherwise the entire wish list will be deleted.  When both itemId and productId are provided, itemId will be used ONLY.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "path",
            "description": "Wish list external identifier.",
            "name": "externalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Specifies the id of the wish list item to be deleted. If this parameter and productId are missing or blank, the entire wishlist will be deleted.",
            "name": "itemId",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "Specifies the id of the wish list product to be deleted. If this parameter and itemId are missing or blank, the entire wishlist will be deleted.",
            "name": "productId",
            "required": false,
            "type": "string"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$DeleteWishListResponse"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/wishlist/{externalId}/item": {
      "get": {
        "tags": [
          "wishlist"
        ],
        "operationId": "findWishlistItemsByExternalId",
        "summary": "Gets the shopper's wish list items by wish list ExternalId or by ExternalId and GuestAccesskey. If only ExternalId is specified, the user must be authenticated.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "Wish list external identifier.",
            "name": "externalId",
            "required": true,
            "type": "string"
          },
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "Wish list guest access key.",
            "name": "guestAccessKey",
            "required": false,
            "type": "string"
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "query",
            "description": "Page number, starting at 1. Valid values include positive integers of 1 and above. The \"pageSize\" must be specified for paging to work.",
            "name": "pageNumber",
            "required": false,
            "type": "integer",
            "format": "int64"
          },
          {
            "in": "query",
            "description": "Page size. Used to limit the amount of data returned by a query. Valid values include positive integers of 1 and above. The \"pageNumber\" must be specified for paging to work.",
            "name": "pageSize",
            "required": false,
            "type": "integer",
            "format": "int64"
          }
        ],
        "responses": {
          "200": {
            "description": "The requested completed successfully.",
            "schema": {
              "$ref": "#/definitions/wishlist-wishlist"
            }
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    },
    "/store/{storeId}/wishlist": {
      "post": {
        "tags": [
          "wishlist"
        ],
        "operationId": "createWishlist",
        "summary": "Creates a wish list, either empty or with items.",
        "produces": [
          "application/json",
          "application/xml",
          "application/xhtml+xml",
          "application/atom+xml"
        ],
        "consumes": [
          "application/json",
          "application/xml"
        ],
        "parameters": [
          {
            "in": "path",
            "description": "The store identifier.",
            "name": "storeId",
            "required": true,
            "type": "string",
            "enum": [
              "0",
              "10001",
              "10051",
              "10101",
              "10151",
              "10651",
              "10701",
              "10152",
              "10153",
              "10751",
              "10801",
              "10851",
              "10852",
              "10853"
            ]
          },
          {
            "in": "query",
            "description": "The response format. If the request has an input body, that body must also use the format specified in \"responseFormat\". Valid values include \"json\" and \"xml\" without the quotes. If the responseFormat isn't specified, the \"accept\" HTTP header shall be used to determine the format of the response. If the \"accept\" HTTP header isn't specified as well, the default response format shall be in json.",
            "name": "responseFormat",
            "required": false,
            "type": "string",
            "enum": [
              "xml",
              "json"
            ]
          },
          {
            "in": "body",
            "description": "The request body for creating a wishlist or wishlist item.",
            "name": "body",
            "required": false,
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$CreateBodyParameterDescription"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "No response was specified",
            "schema": {
              "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListResponse"
            }
          },
          "201": {
            "description": "The requested resource has been created."
          },
          "400": {
            "description": "Bad request. Some of the inputs provided to the request aren't valid."
          },
          "401": {
            "description": "Not authenticated. The user session isn't valid."
          },
          "403": {
            "description": "The user isn't authorized to perform the specified request."
          },
          "500": {
            "description": "Internal server error. Additional details will be contained on the server logs."
          }
        }
      }
    }
  },
  "definitions": {
    "Empty": {
      "description": "Empty model. Used as default value when no model is specified."
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ModelDescriptionContainer": {
      "description": "This object lists the models used by the operations. Each model is contained in a property where the property name matches the name of the model.",
      "properties": {
        "sample": {
          "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ModelDescription",
          "description": "Sample model description."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ApiDescription": {
      "description": "Description of an API and its operations.",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "URL path fragment to readh the API. This is appended to the resource basepath."
        },
        "description": {
          "type": "string",
          "description": "API description."
        },
        "operations": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$OperationDescription"
          },
          "description": "List of available operations."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ResourceDescription": {
      "description": "Description of a resource and its APIs.",
      "required": [
        "basePath",
        "swaggerVersion",
        "apiVersion"
      ],
      "properties": {
        "resourcePath": {
          "type": "string",
          "description": "Resource path."
        },
        "basePath": {
          "type": "string",
          "description": "URL at which the resource may be reached. Used as a base for contained APIs."
        },
        "apis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ApiDescription"
          },
          "description": "List of available APIs."
        },
        "models": {
          "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ModelDescriptionContainer",
          "description": "List of models used by the APIs."
        },
        "description": {
          "type": "string",
          "description": "Resource description."
        },
        "swaggerVersion": {
          "type": "string",
          "description": "Version of the Swagger specification."
        },
        "apiVersion": {
          "type": "string",
          "description": "Version of the API."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ModelDescription": {
      "description": "Model description.",
      "required": [
        "id"
      ],
      "properties": {
        "properties": {
          "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ModelPropertyDescriptionContainer",
          "description": "List of properties in the model."
        },
        "id": {
          "type": "string",
          "description": "Name of the model."
        },
        "description": {
          "type": "string",
          "description": "Description of the model."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ErrorResponseDescription": {
      "description": "Description of a potential error response.",
      "required": [
        "code"
      ],
      "properties": {
        "reason": {
          "type": "string",
          "description": "The reason why this code might be returned."
        },
        "code": {
          "type": "string",
          "description": "The HTTP code returned from the request."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$OperationDescription": {
      "description": "Description of an operation.",
      "required": [
        "method"
      ],
      "properties": {
        "notes": {
          "type": "string",
          "description": "Detailed utilisation notes applicable to the operations."
        },
        "method": {
          "type": "string",
          "description": "HTTP method used to perform the operation."
        },
        "produces": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List the types of data that can be used in the \"accept\" HTTP header."
        },
        "secureCallMandatory": {
          "type": "boolean",
          "description": "This flag indicates if the use of Secure HTTP (HTTPS) is mandatory to call this API. This is an application specific extension to the swagger specification."
        },
        "summary": {
          "type": "string",
          "description": "Summary description of the operation."
        },
        "consumes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List the types of data that can be used in the \"content-type\" HTTP header."
        },
        "parameters": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$OperationParameterDescription"
          },
          "description": "List parameters used by the operation."
        },
        "type": {
          "type": "string",
          "description": "Name of the model returned by this opeartion."
        },
        "errorResponses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ErrorResponseDescription"
          },
          "description": "List of potential errors returned by this API."
        },
        "nickname": {
          "type": "string",
          "description": "Short nickname for the operation."
        },
        "partialAuthenticationAllowed": {
          "type": "boolean",
          "description": "This flag indicates if partially authenticated users are allowed to call this API. This is an application specific extension to the swagger specification."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ResouceLink": {
      "description": "Link and description of a resource.",
      "required": [
        "path"
      ],
      "properties": {
        "path": {
          "type": "string",
          "description": "URL where the API meta-data may be reached."
        },
        "description": {
          "type": "string",
          "description": "Description of the resource."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ResourceLinkList": {
      "description": "List of resource links and their description.",
      "required": [
        "apis",
        "swaggerVersion",
        "apiVersion"
      ],
      "properties": {
        "apis": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ResouceLink"
          },
          "description": "List of links to available resources."
        },
        "swaggerVersion": {
          "type": "string",
          "description": "Version of the Swagger specification."
        },
        "apiVersion": {
          "type": "string",
          "description": "Version of the API."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ModelPropertyDescriptionContainer": {
      "description": "This object lists the \"model property descriptions\" used by the model. Each \"model property description\" is contained in a property where the property name matches the name of the \"model property\".",
      "required": [
        "sample"
      ],
      "properties": {
        "sample": {
          "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ModelPropertyDescription",
          "description": "Sample model property description."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$ModelPropertyDescription": {
      "description": "Description of a property used in a model.",
      "properties": {
        "items": {
          "$ref": "#/definitions/com.ibm.commerce.rest.api.handler.ApiHandler$ModelPropertyDescription",
          "description": "If the \"type\" is set to \"array\", this field will describe the objects contained within the array."
        },
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Defines the list of acceptable values for the field. Only present if specific values must be used."
        },
        "ref": {
          "type": "string",
          "description": "Name of a \"model\" used by the property."
        },
        "type": {
          "type": "string",
          "description": "Type of property. Only defined when the property is a basic types. References to other models will use the \"$ref\" value."
        },
        "required": {
          "type": "boolean",
          "description": "Indicates if the property must always be present in the model."
        }
      }
    },
    "com.ibm.commerce.rest.api.handler.ApiHandler$OperationParameterDescription": {
      "description": "Description of an operation parameter.",
      "required": [
        "paramType",
        "type",
        "name"
      ],
      "properties": {
        "enum": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "List of acceptable values. Only defined if the acceptable values are limited."
        },
        "paramType": {
          "type": "string",
          "enum": [
            "query",
            "path",
            "body",
            "header"
          ],
          "description": "Type of parameter. Either a URL \"query\", a URL \"path\", request \"header\" or a request \"body\"."
        },
        "format": {
          "type": "string",
          "description": "Format of the data. This is a swagger specific extension that adds rules to the type. Sample values include \"int32\" and \"int64\" for the integer type."
        },
        "allowMultiple": {
          "type": "boolean",
          "description": "For query parameters, this indicates if the parameter may be repeated multiple times. Defaults to false."
        },
        "type": {
          "type": "string",
          "description": "Type of the field. Must match one of the JSON-Schema supported types. Can be used to reference a model."
        },
        "name": {
          "type": "string",
          "description": "Name of the parameter"
        },
        "description": {
          "type": "string",
          "description": "Description of the parameter."
        },
        "required": {
          "type": "boolean",
          "description": "Is the parameter required or not."
        }
      }
    },
    "com.ibm.commerce.approval.beans.BuyerApprovalStatusListDataBean_IBM_Store_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int32"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.approval.beans.BuyerApprovalStatusListDataBean_IBM_Store_Summary.resultList"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.approval.beans.ApprovalStatusListDataBean_IBM_Store_Summary.resultList": {
      "properties": {
        "approverId": {
          "type": "string"
        },
        "approvalStatusId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "flowTypeId": {
          "type": "string"
        },
        "submitterId": {
          "type": "string"
        },
        "submitTime": {
          "type": "string",
          "format": "date"
        },
        "approverGroupId": {
          "type": "string"
        },
        "flowId": {
          "type": "string"
        },
        "approveTime": {
          "type": "string",
          "format": "date"
        },
        "stateId": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.approval.beans.BuyerApprovalStatusListDataBean_IBM_Store_Summary.resultList": {
      "properties": {
        "approverId": {
          "type": "string"
        },
        "approvalStatusId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "flowTypeId": {
          "type": "string"
        },
        "submitterId": {
          "type": "string"
        },
        "submitTime": {
          "type": "string",
          "format": "date"
        },
        "approverGroupId": {
          "type": "string"
        },
        "flowId": {
          "type": "string"
        },
        "approveTime": {
          "type": "string",
          "format": "date"
        },
        "stateId": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.approval.beans.ApprovalStatusListDataBean_IBM_Store_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int32"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.approval.beans.ApprovalStatusListDataBean_IBM_Store_Summary.resultList"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.approval.beans.ApprovalStatusDataBean_IBM_Store_Summary": {
      "properties": {
        "approverId": {
          "type": "string"
        },
        "approvalStatusId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "flowTypeId": {
          "type": "string"
        },
        "submitterId": {
          "type": "string"
        },
        "submitTime": {
          "type": "string",
          "format": "date"
        },
        "approverGroupId": {
          "type": "string"
        },
        "flowId": {
          "type": "string"
        },
        "approveTime": {
          "type": "string",
          "format": "date"
        },
        "stateId": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList": {
      "properties": {
        "approverId": {
          "type": "string"
        },
        "approvalStatusId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "flowTypeId": {
          "type": "string"
        },
        "submitterId": {
          "type": "string"
        },
        "submitTime": {
          "type": "string",
          "format": "date"
        },
        "approverGroupId": {
          "type": "string"
        },
        "flowId": {
          "type": "string"
        },
        "approveTime": {
          "type": "string",
          "format": "date"
        },
        "stateId": {
          "type": "string"
        },
        "entityId": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler$UpdateApprovalStatusResponse": {
      "description": "Description of approval status record update response.",
      "properties": {
        "resultmsg": {
          "type": "string",
          "description": "Update approval status message."
        }
      }
    },
    "com.ibm.commerce.rest.approvalstatus.handler.ApprovalStatusHandler$UpdateApprovalStatusParameterDescription": {
      "description": "Description of the post input body to update an approval status record.",
      "required": [
        "aprv_act"
      ],
      "properties": {
        "comments": {
          "type": "string",
          "description": "Comment text for status change."
        },
        "aprv_act": {
          "type": "string",
          "enum": [
            "1",
            "2"
          ],
          "description": "Approval status. Valid values are 1 for approve and 2 for reject."
        }
      }
    },
    "com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int32"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.approval.beans.OrderApprovalStatusListDataBean_IBM_Store_Summary.resultList"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ChannelType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ChannelType.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponDescriptionType": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponDescriptionType.userData"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "cart-assigned_coupon": {
      "properties": {
        "couponCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-assigned_coupon.couponCode"
          }
        },
        "channel": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType"
        },
        "quoteIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuoteIdentifierType"
        },
        "quoteID": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "customerOrderNumber": {
          "type": "string"
        },
        "buyerPONumber": {
          "type": "string"
        },
        "externalOrderID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.AssignedCouponHandler$RemoveCouponResponse": {
      "description": "Body of a response to remove a coupon from a shopping cart.",
      "required": [
        "orderId"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Order identifier."
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.QuoteIdentifierType": {
      "properties": {
        "uniqueID": {
          "type": "string"
        },
        "externalQuoteID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ChannelType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType.userData.userDataField"
          }
        }
      }
    },
    "cart-assigned_coupon.couponCode.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ChannelType.channelIdentifer": {
      "properties": {
        "uniqueID": {
          "type": "string"
        },
        "channelName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.externalIdentifier": {
      "required": [
        "name"
      ],
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.externalIdentifier.storeIdentifier"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponDescriptionType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "calculationCodeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.AssignedCouponHandler$ApplyCouponResponse": {
      "description": "Body of a response to apply a coupon to a shopping cart.",
      "required": [
        "couponId",
        "orderId"
      ],
      "properties": {
        "couponId": {
          "type": "string",
          "description": "Coupon identifier."
        },
        "orderId": {
          "type": "string",
          "description": "Order identifier."
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.AssignedCouponHandler$ApplyCouponBody": {
      "description": "Body of a request to apply a coupon to a shopping cart.",
      "required": [
        "couponId"
      ],
      "properties": {
        "couponId": {
          "type": "string",
          "description": "Coupon identifier."
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ChannelType": {
      "properties": {
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType.userData"
        },
        "channelIdentifer": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType.channelIdentifer"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType.description"
        }
      }
    },
    "cart-assigned_coupon.couponCode": {
      "properties": {
        "couponId": {
          "type": "string"
        },
        "effectiveDateTime": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "promotion": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-assigned_coupon.couponCode.userDataField"
          }
        },
        "expirationDateTime": {
          "type": "string"
        },
        "description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponDescriptionType"
          }
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponDescriptionType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponDescriptionType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.AssignedPromotionCodeHandler$RemovePromotionCodeResponse": {
      "description": "Body of a response to remove a promotion code from a shopping cart.",
      "required": [
        "orderId"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "The order identifier."
        }
      }
    },
    "cart-assigned_promotion_code": {
      "properties": {
        "promotionCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-assigned_promotion_code.promotionCode"
          }
        },
        "channel": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType"
        },
        "quoteIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuoteIdentifierType"
        },
        "quoteID": {
          "type": "string"
        },
        "customerOrderNumber": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "buyerPONumber": {
          "type": "string"
        },
        "externalOrderID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.AssignedPromotionCodeHandler$ApplyPromotionCodeResponse": {
      "description": "Body of a response to apply a promotion code to a shopping cart.",
      "required": [
        "orderId",
        "promoCode"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "The order identifier."
        },
        "promoCode": {
          "type": "string",
          "description": "The promotion code."
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.AssignedPromotionCodeHandler$ApplyPromotionCodeBody": {
      "description": "Body of a request to apply a promotion code to a shopping cart.",
      "required": [
        "promoCode"
      ],
      "properties": {
        "promoCode": {
          "type": "string",
          "description": "The promotion code."
        }
      }
    },
    "cart-assigned_promotion_code.promotionCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "associatedPromotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-assigned_promotion_code.promotionCode.associatedPromotion"
          }
        }
      }
    },
    "cart-assigned_promotion_code.promotionCode.associatedPromotion": {
      "properties": {
        "description": {
          "type": "string"
        },
        "promotionId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_associatedPromotionsList_Summary.associatedPromotions.description": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "langId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_associatedPromotionsList_Summary.associatedPromotions": {
      "properties": {
        "startDate": {
          "type": "string"
        },
        "associatePromotionId": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_associatedPromotionsList_Summary.associatedPromotions.description"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.productDataBean": {
      "properties": {
        "productId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.calculatedContractPrice": {
      "properties": {
        "currency": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.listPrice": {
      "properties": {
        "currency": {
          "type": "string"
        },
        "amount": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.description": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "keyWord": {
          "type": "string"
        },
        "available": {
          "type": "string"
        },
        "availabilityDate": {
          "type": "string"
        },
        "auxDescription1": {
          "type": "string"
        },
        "auxDescription2": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "thumbNail": {
          "type": "string"
        },
        "fullImage": {
          "type": "string"
        },
        "published": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries": {
      "properties": {
        "isDynamicKit": {
          "type": "boolean"
        },
        "catalogEntryId": {
          "type": "string"
        },
        "isProduct": {
          "type": "boolean"
        },
        "productDataBean": {
          "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.productDataBean"
        },
        "calculatedContractPrice": {
          "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.calculatedContractPrice"
        },
        "listPrice": {
          "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.listPrice"
        },
        "partNumber": {
          "type": "string"
        },
        "manufacturerName": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries.description"
        },
        "manufacturerPartNumber": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList"
          }
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList": {
      "properties": {
        "startDate": {
          "type": "string"
        },
        "longDescriptionString": {
          "type": "string"
        },
        "calculationCodeId": {
          "type": "string"
        },
        "isPromotionRelated": {
          "type": "boolean"
        },
        "calculationUsageId": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "attachedCatalogEntries": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_catalogEntryDetailed.resultList.attachedCatalogEntries"
          }
        },
        "descriptionString": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_associatedPromotionsList_Summary": {
      "properties": {
        "associatedPromotions": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.fulfillment.beans.CalculationCodeListDataBean_IBM_associatedPromotionsList_Summary.associatedPromotions"
          }
        }
      }
    },
    "cart-UsableShippingInfoOrderItem": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsableShippingInfoOrderItem.userDataField"
          }
        },
        "usableShippingMode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsableShippingMode"
          }
        },
        "createDate": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "double"
        },
        "usableShippingChargePolicy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsableShippingChargePolicy"
          }
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "usableShippingAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsableShippingAddress"
          }
        },
        "externalOrderItemID": {
          "type": "string"
        },
        "configurationID": {
          "type": "string"
        },
        "UOM": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "adjustmentRequirement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType"
          }
        },
        "offerID": {
          "type": "string"
        },
        "orderItemId": {
          "type": "string"
        },
        "correlationGroup": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.transactionExtensionData": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType": {
      "required": [
        "adjustmentUsage",
        "adjustmentCategory"
      ],
      "properties": {
        "adjustmentUsage": {
          "type": "string"
        },
        "adjustmentValue": {
          "type": "string"
        },
        "comments": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType.comments"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType.userData"
        },
        "adjustmentCategory": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$RewardChoiceUpdateRequest": {
      "required": [
        "orderId",
        "rewardOptionId"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "The id of the order to which the reward option record is associated with."
        },
        "rewardOptionId": {
          "type": "string",
          "description": "The id of the reward option record to which the reward choice information needs to be updated"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ParentInfoType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ParentInfoType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption": {
      "required": [
        "rewardOptionIdentifier"
      ],
      "properties": {
        "rewardSpecGiftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.rewardSpecGiftItem"
          }
        },
        "rewardOptionIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardOptionIdentifier"
        },
        "adjustmentDescription": {
          "type": "string"
        },
        "giftSetSpecification": {
          "$ref": "#/definitions/cart-rewardOption.giftSetSpecification"
        },
        "giftSet": {
          "$ref": "#/definitions/cart-rewardOption.giftSet"
        },
        "rewardSpecification": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification"
        },
        "userData": {
          "$ref": "#/definitions/cart-rewardOption.userData"
        },
        "amount": {
          "$ref": "#/definitions/cart-rewardOption.amount"
        },
        "adjustmentCurrency": {
          "type": "string"
        },
        "usage": {
          "type": "string"
        },
        "displayLevel": {
          "type": "string"
        },
        "rewardSpecMaxQuantity": {
          "type": "string",
          "format": "double"
        },
        "adjustmentLanguage": {
          "type": "string"
        },
        "adjustmentAmount": {
          "type": "string",
          "format": "double"
        },
        "isPromotionCodeRequired": {
          "type": "boolean"
        },
        "rewardOptionExternalId": {
          "type": "string"
        },
        "adjustment": {
          "$ref": "#/definitions/cart-rewardOption.adjustment"
        },
        "code": {
          "type": "string"
        },
        "rewardSpecMaxQuantityUom": {
          "type": "string"
        },
        "adjustmentDisplayLevel": {
          "type": "string"
        },
        "rewardChoice": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice"
        },
        "calculationCodeID": {
          "$ref": "#/definitions/cart-rewardOption.calculationCodeID"
        },
        "rewardChoiceGiftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.rewardChoiceGiftItem"
          }
        },
        "adjustmentUsage": {
          "type": "string"
        },
        "adjustmentCode": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/cart-rewardOption.description"
        },
        "promotionType": {
          "type": "string"
        },
        "rewardOptionId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-cartItem.itemAttributes": {
      "required": [
        "attrName"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrName": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.adjustment.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.adjustment.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "cart-cart_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.utf.beans.PAttributeDataBean_IBM_PAttribute_Detailed": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.utf.beans.PAttributeDataBean_IBM_PAttribute_Detailed.resultList"
          }
        }
      }
    },
    "cart-ShippingMode": {
      "properties": {
        "shipModeLanguage": {
          "type": "string"
        },
        "trackingURL": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "carrier": {
          "type": "string"
        },
        "shipModeId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "shipModeCode": {
          "type": "string"
        },
        "shipModeDescription": {
          "type": "string"
        }
      }
    },
    "cart-CouponCode": {
      "properties": {
        "couponId": {
          "type": "string"
        },
        "effectiveDateTime": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "promotion": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-CouponCode.userDataField"
          }
        },
        "expirationDateTime": {
          "type": "string"
        },
        "description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponDescriptionType"
          }
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason.userData.userDataField"
          }
        }
      }
    },
    "cart-usable_shipping_info": {
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsableShippingInfoOrderItem"
          }
        },
        "channel": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType"
        },
        "rewardOption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType"
          }
        },
        "quoteIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuoteIdentifierType"
        },
        "shipAsComplete": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "orderVersion": {
          "type": "string"
        },
        "placedDate": {
          "type": "string"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "usableShippingAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-usable_shipping_info.usableShippingAddress"
          }
        },
        "promotionCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType"
          }
        },
        "couponCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType"
          }
        },
        "comments": {
          "type": "string"
        },
        "adjustmentRequirement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType"
          }
        },
        "cSRComments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType"
          }
        },
        "quoteID": {
          "type": "string"
        },
        "customerOrderNumber": {
          "type": "string"
        },
        "buyerPONumber": {
          "type": "string"
        },
        "bLockInfo": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType"
        },
        "orderEditor": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "externalOrderID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode.resultList.shipChargesByShipMode.shippingChargeTypes": {
      "properties": {
        "carrAccntNumber": {
          "type": "string"
        },
        "policyDescription": {
          "type": "string"
        },
        "internalPolicyId": {
          "type": "string"
        },
        "selected": {
          "type": "boolean"
        },
        "policyName": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "calculationCodeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier"
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode.resultList"
          }
        }
      }
    },
    "cart-rewardOption.giftSet": {
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.giftSet.giftItem"
          }
        }
      }
    },
    "cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-OrderAmount.totalTaxByTaxCategory": {
      "properties": {
        "value": {
          "type": "string",
          "format": "double"
        },
        "currency": {
          "type": "string"
        },
        "taxCategoryCode": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode.resultList": {
      "properties": {
        "numberOfShipModes": {
          "type": "integer",
          "format": "int32"
        },
        "shipChargesByShipMode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode.resultList.shipChargesByShipMode"
          }
        },
        "isShipChargesExist": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType.comments": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$CalculateOrderRequest": {
      "description": "Body of request input for calculateOrder.",
      "required": [
        "calculationUsageId"
      ],
      "properties": {
        "updatePrices": {
          "type": "string",
          "description": "Flag to indicate whether the price of order item will be refreshed in this command. if the flag is \"1\", price will be updated. others will not."
        },
        "calculationUsageId": {
          "type": "string",
          "description": "Gives predefined codes for calculation of discounts (-1), shipping (-2), sales tax (-3), shipping tax (-4), coupons (-5), surcharge (-6) and shipping adjustment (-7)"
        },
        "doFreeGift": {
          "type": "string",
          "description": "Specifies whether the command should perform the free gift handling logic. Set to enable free gift handling, or not to handle free gifts when not required for order recalculation (N). The default value is (Y)."
        },
        "orderId": {
          "type": "string",
          "description": "Order identifier."
        },
        "outOrderName": {
          "type": "string",
          "description": "Specifies the names of name-value pairs to be passed to a JSP. The value of eachadded name-value pair is the reference number of the order to be displayed. If the name is not provided, the default name <code>orderId</code> is used. This parameter can be repeated."
        },
        "doPrice": {
          "type": "string",
          "description": "Specifies whether the command should perform the price calculation subtasks. Set to enable the price tasks (Y), or to disable price tasks (N)."
        }
      }
    },
    "cart-rewardOption.giftSet.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.billingAddresses": {
      "properties": {
        "urlURL": {
          "type": "string"
        },
        "nickNameURL": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "bestCallingTimeURL": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "cityURL": {
          "type": "string"
        },
        "billingCode": {
          "type": "string"
        },
        "addressField1": {
          "type": "string"
        },
        "storeDirectory": {
          "type": "string"
        },
        "addressField2": {
          "type": "string"
        },
        "primaryURL": {
          "type": "string"
        },
        "packageSuppression": {
          "type": "string"
        },
        "organizationUnitNameURL": {
          "type": "string"
        },
        "addressField3": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "createdTimestamp": {
          "type": "string"
        },
        "middleNameURL": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "firstNameURL": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "email1URL": {
          "type": "string"
        },
        "fax1URL": {
          "type": "string"
        },
        "statusURL": {
          "type": "string"
        },
        "publishPhone1URL": {
          "type": "string"
        },
        "stateURL": {
          "type": "string"
        },
        "mobilePhone1CountryURL": {
          "type": "string"
        },
        "packageSuppressionURL": {
          "type": "string"
        },
        "addressField3URL": {
          "type": "string"
        },
        "dataBeanKeyAddressId": {
          "type": "string"
        },
        "billingCodeTypeURL": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "address3URL": {
          "type": "string"
        },
        "phone2TypeURL": {
          "type": "string"
        },
        "organizationNameURL": {
          "type": "string"
        },
        "lastCreate": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "officeAddressURL": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "addressIdURL": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "addressTypeURL": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "addressField2URL": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "billingCodeURL": {
          "type": "string"
        },
        "phone2URL": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "address2URL": {
          "type": "string"
        },
        "phone1TypeURL": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "businessTitleURL": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "lastCreateURL": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "zipCodeURL": {
          "type": "string"
        },
        "billingCodeType": {
          "type": "string"
        },
        "addressField1URL": {
          "type": "string"
        },
        "mobilePhone1URL": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "phone1URL": {
          "type": "string"
        },
        "personTitleURL": {
          "type": "string"
        },
        "lastNameURL": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "publishPhone1": {
          "type": "string"
        },
        "address1URL": {
          "type": "string"
        },
        "storeIdURL": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "publishPhone2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "countryURL": {
          "type": "string"
        },
        "email2URL": {
          "type": "string"
        },
        "fax2URL": {
          "type": "string"
        },
        "publishPhone2URL": {
          "type": "string"
        },
        "isSelfAddress": {
          "type": "boolean"
        }
      }
    },
    "cart-PaymentInstruction.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$AddOrderItemBodyDescription": {
      "description": "Description of the addOrderItem input body.",
      "required": [
        "orderItem"
      ],
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$AddOrderItemBodyDescription$OrderItemBodyDescription"
          },
          "description": "list of order items"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "calculationCodeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$AddConfigurationToCartRequest": {
      "required": [
        "ConfigXML"
      ],
      "properties": {
        "reverse": {
          "type": "string",
          "description": "A list of OrderItems whose allocations should be released (that is, de-allocated from existing or expected inventory as appropriate)."
        },
        "remerge": {
          "type": "string",
          "description": "A list of the OrderItems that should be merged with other OrderItems in the same order and with the same correlationGroup attribute, if possible. OrderItems are not merged unless their InventoryStatus is \"NALC\", or they are specified by one or more of the allocate, backorder, and reverse parameters."
        },
        "physicalStoreId": {
          "type": "string",
          "description": "A comment to be included with the created or updated order items."
        },
        "backorder": {
          "type": "string",
          "description": "A list of OrderItems that should be allocated from expected inventory if they are not allocated from existing inventory."
        },
        "calculateOrder": {
          "type": "string",
          "description": "Specifies whether OrderCalculateCmd will be called to calculate the charges for the order. 0 = do not call OrderCalculateCmd, 1 = call OrderCalculateCmd."
        },
        "check": {
          "type": "string",
          "description": "A list of OrderItems that should be checked by the CheckInventoryAvailability task command."
        },
        "quantity": {
          "type": "string",
          "description": "The quantity of the item to be added to the order."
        },
        "contractId": {
          "type": "string",
          "description": "The identifier of the contract associated with the order."
        },
        "fulfillmentCenterId": {
          "type": "string",
          "description": "The identifier of the fulfillment center that this item belongs to."
        },
        "addressId": {
          "type": "string",
          "description": "The reference number of the shipping mode to be used for the product or item."
        },
        "doInventory": {
          "type": "string",
          "description": "Specifies whether the command should perform the inventory calculation subtasks. Set to either do the price tasks (Y), or not (N). Turning off these tasks might result in better performance, but customers might not get the most current inventory level, when changes occur."
        },
        "UOM": {
          "type": "string",
          "description": "The unit of measure for quantity."
        },
        "inventoryValidation": {
          "type": "string",
          "description": "Specifies whether inventory status should be validated for adding to cart."
        },
        "ConfigXML": {
          "type": "string",
          "description": "The configuration XML of the dynamic kit to be added"
        },
        "catEntryId": {
          "type": "string",
          "description": "The identifier of a catalog entry to be used to create a new OrderItem."
        },
        "merge": {
          "type": "string",
          "description": "A list of OrderItems that should be merged with other OrderItems in the same order if possible, regardless of their correlationGroup attributes."
        },
        "calculationUsage": {
          "type": "string",
          "description": "The identifier for the type of calculation to be performed on the order."
        },
        "shipModeId": {
          "type": "string",
          "description": "The identifier associated with a particular shipping service."
        },
        "orderItemId": {
          "type": "string",
          "description": "The identifier of the OrderItem to be updated."
        },
        "partNumber": {
          "type": "string",
          "description": "The part number of catalog entry."
        },
        "allocate": {
          "type": "string",
          "description": "A list of OrderItems that should be allocated from existing inventory."
        },
        "doPrice": {
          "type": "string",
          "description": "Specifies whether the command should perform the price calculation subtasks. Set to enable the price tasks (Y), or to disable price tasks (N)."
        },
        "comment": {
          "type": "string",
          "description": "The identifier of the address to which the products and items are shipped."
        }
      }
    },
    "cart-cartUpdate_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment": {
      "properties": {
        "usage": {
          "type": "string"
        },
        "calculationCodeID": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID"
        },
        "displayLevel": {
          "type": "string"
        },
        "isPromotionCodeRequired": {
          "type": "boolean"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.userData"
        },
        "amount": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.amount"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.description"
        },
        "code": {
          "type": "string"
        },
        "promotionType": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType.externalIdentifier": {
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice": {
      "properties": {
        "giftSet": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.userData"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ParentInfoType": {
      "properties": {
        "parentOrderItemIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ParentInfoType.parentOrderItemIdentifier"
        },
        "relationTypeCode": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ParentInfoType.userData"
        },
        "parentOrderIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ParentInfoType.parentOrderIdentifier"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType.userData.userDataField"
          }
        }
      }
    },
    "cart-Adjustment": {
      "properties": {
        "currency": {
          "type": "string"
        },
        "usage": {
          "type": "string"
        },
        "displayLevel": {
          "type": "string"
        },
        "descriptionLanguage": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-Adjustment.userDataField"
          }
        },
        "amount": {
          "type": "string",
          "format": "double"
        },
        "language": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode.userData.userDataField"
          }
        }
      }
    },
    "cart-cartItem": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "timeShipped": {
          "type": "string"
        },
        "createDate": {
          "type": "string"
        },
        "itemAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartItem.itemAttributes"
          }
        },
        "quantity": {
          "type": "string",
          "format": "double"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "contractId": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        },
        "fulfillmentCenterId": {
          "type": "string"
        },
        "/orderItemShippingInfo": {
          "$ref": "#/definitions/cart-OrderItemShippingInfo"
        },
        "externalOrderItemID": {
          "type": "string"
        },
        "configurationID": {
          "type": "string"
        },
        "orderItemStatus": {
          "type": "string"
        },
        "adjustmentRequirement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType"
          }
        },
        "availableDate": {
          "type": "string"
        },
        "fulfillmentCenterOwnerId": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "correlationGroup": {
          "type": "string"
        },
        "expectedShipDate": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartItem.userDataField"
          }
        },
        "fulfillmentCenterDescription": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.DescriptionType"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType"
        },
        "/orderItemAmount": {
          "$ref": "#/definitions/cart-OrderItemAmount"
        },
        "productId": {
          "type": "string"
        },
        "timeReleased": {
          "type": "string"
        },
        "usableShippingChargePolicy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsableShippingChargePolicy"
          }
        },
        "orderItemInventoryStatus": {
          "type": "string"
        },
        "orderItemFulfillmentStatus": {
          "type": "string"
        },
        "UOM": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "offerID": {
          "type": "string"
        },
        "orderItemId": {
          "type": "string"
        },
        "orderItemComponent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType"
          }
        },
        "fulfillmentCenterName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason": {
      "properties": {
        "reasonCode": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason.userData"
        },
        "reansonType": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason.description"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.DescriptionType": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "cart-cart_item": {
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartItem"
          }
        },
        "channel": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType"
        },
        "rewardOption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption"
          }
        },
        "quoteIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuoteIdentifierType"
        },
        "/orderIdentifier": {
          "$ref": "#/definitions/cart-OrderIdentifier"
        },
        "orderId": {
          "type": "string"
        },
        "placedDate": {
          "type": "string"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "orderDescription": {
          "type": "string"
        },
        "/orderStatus": {
          "$ref": "#/definitions/cart-OrderStatus"
        },
        "storeNameIdentifier": {
          "type": "string"
        },
        "financialTransaction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType"
          }
        },
        "cSRComments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType"
          }
        },
        "adjustmentRequirement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType"
          }
        },
        "quoteID": {
          "type": "string"
        },
        "paymentStatus": {
          "type": "string"
        },
        "buyerPONumber": {
          "type": "string"
        },
        "orderEditor": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cart_item.userDataField"
          }
        },
        "shipAsComplete": {
          "type": "string"
        },
        "paymentInstruction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-PaymentInstruction"
          }
        },
        "orderVersion": {
          "type": "string"
        },
        "orgDistinguishedName": {
          "type": "string"
        },
        "storeOwnerID": {
          "type": "string"
        },
        "storeUniqueID": {
          "type": "string"
        },
        "buyerId": {
          "type": "string"
        },
        "promotionCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cart_item.promotionCode"
          }
        },
        "orgUniqueID": {
          "type": "string"
        },
        "couponCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-CouponCode"
          }
        },
        "comments": {
          "type": "string"
        },
        "/orderAmount": {
          "$ref": "#/definitions/cart-OrderAmount"
        },
        "parentInfo": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ParentInfoType"
        },
        "bLockInfo": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType"
        },
        "buyerDistinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$OrderItemMoveRequest": {
      "properties": {
        "inRemerge": {
          "type": "string",
          "description": "List of OrderItems that should be merged with other OrderItems in the same order and with the same correlationGroup attribute, if possible."
        },
        "inAllocate": {
          "type": "string",
          "description": "List of OrderItems that should be allocated from existing inventory."
        },
        "inBackorder": {
          "type": "string",
          "description": "List of OrderItems that should be allocated from expected inventory."
        },
        "inCheck": {
          "type": "string",
          "description": "List of OrderItems that should be checked on inventory."
        },
        "deleteIfEmpty": {
          "type": "string",
          "description": "Whether orders should be deleted if no OrderItems remain when the OrderItems are moved."
        },
        "outMerge": {
          "type": "string",
          "description": "List of OrderItems that should be merged with other OrderItems in the same order if possible, regardless of their correlationGroup attributes."
        },
        "outAllocate": {
          "type": "string",
          "description": "List of OrderItems that should be allocated from existing inventory."
        },
        "outOrderName": {
          "type": "string",
          "description": "The reference number of an output order."
        },
        "toOrderId": {
          "type": "string",
          "description": "The destination order for the output OrderItems."
        },
        "doInventory": {
          "type": "string",
          "description": "Whether the inventory action will be performed."
        },
        "refreshContractAndOffer": {
          "type": "string",
          "description": "Whether the price informaiton for all of the order items is refreshed."
        },
        "moveAutoAddedOrderItems": {
          "type": "string",
          "description": "Whether the auto added order items will be moved."
        },
        "fromOrderItemId": {
          "type": "string",
          "description": "The input OrderItems to be moved."
        },
        "moveOrderPromotionCode": {
          "type": "string",
          "description": "Whether the promotion code will be merged into the target order."
        },
        "inMerge": {
          "type": "string",
          "description": "List of OrderItems that should be merged with other OrderItems in the same order if possible, regardless of their correlationGroup attributes."
        },
        "outReverse": {
          "type": "string",
          "description": "List of OrderItems whose allocations should be released."
        },
        "createIfEmpty": {
          "type": "string",
          "description": "The valid value of this parameter is 1 or 0. The default value is 0. If the parameter createIfEmpty is specified to 1 and there is no transferred order items, a new empty order will be created when either the toOrderId parameter is ** or the toOrderId parameter is .**. but there is no current pending order. The symbol \"**\" means to create new pending order; the symbol \".**.\" means to create new pending order if there are no pending orders currently."
        },
        "inOrderName": {
          "type": "string",
          "description": "The reference number of an input order."
        },
        "outRemerge": {
          "type": "string",
          "description": "List of the OrderItems that should be merged with other OrderItems in the same order and with the same correlationGroup attribute, if possible."
        },
        "outBackorder": {
          "type": "string",
          "description": "List of OrderItems that should be allocated from expected inventory."
        },
        "outCheck": {
          "type": "string",
          "description": "List of OrderItems that should be checked on inventory."
        },
        "inReverse": {
          "type": "string",
          "description": "List of OrderItems whose allocations should be released."
        },
        "outOrderItemName": {
          "type": "string",
          "description": "The reference number of an output OrderItem."
        },
        "fromOrderId": {
          "type": "string",
          "description": "The orders from which OrderItems will be moved."
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$UpdateConfigurationInCartRequest": {
      "required": [
        "ConfigXML",
        "orderItemId"
      ],
      "properties": {
        "ConfigXML": {
          "type": "string",
          "description": "The new configuration XML of the dynamic kit. "
        },
        "orderItemId": {
          "type": "string",
          "description": "The ID of the order item to be updated."
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList": {
      "properties": {
        "isPersonalAddressAllowForBilling": {
          "type": "boolean"
        },
        "billingAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.billingAddresses"
          }
        },
        "orderDataBean": {
          "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.orderDataBean"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType": {
      "properties": {
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-OrderItemAmount": {
      "properties": {
        "shippingCharge": {
          "type": "string",
          "format": "double"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-OrderItemAmount.userDataField"
          }
        },
        "unitPrice": {
          "type": "string",
          "format": "double"
        },
        "taxByTaxCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.TaxByTaxCategoryType"
          }
        },
        "orderItemPrice": {
          "type": "string",
          "format": "double"
        },
        "alternativeCurrencyPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
          }
        },
        "genericTotal": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.GenericTotalType"
          }
        },
        "adjustment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-Adjustment"
          }
        },
        "shippingTaxCurrency": {
          "type": "string"
        },
        "unitQuantity": {
          "type": "string",
          "format": "double"
        },
        "unitUom": {
          "type": "string"
        },
        "salesTaxCurrency": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "totalAdjustment": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "shippingChargeCurrency": {
          "type": "string"
        },
        "priceOverride": {
          "type": "string"
        },
        "freeGift": {
          "type": "string"
        },
        "shippingTax": {
          "type": "string",
          "format": "double"
        },
        "salesTax": {
          "type": "string",
          "format": "double"
        }
      }
    },
    "cart-rewardOption.adjustment.calculationCodeID": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardChoice.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardChoice": {
      "properties": {
        "giftSet": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice.giftSet"
        },
        "userData": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice.userData"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion": {
      "properties": {
        "promotionIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.description"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$ShippingModes": {
      "description": "Shipping mode list.",
      "required": [
        "usableShippingMode"
      ],
      "properties": {
        "usableShippingMode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$ShippingModes$UsableShippingMode"
          },
          "description": "list of order items"
        }
      }
    },
    "cart-rewardOption.rewardChoice.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.rewardChoice.userData.userDataField"
          }
        }
      }
    },
    "cart-UsableShippingInfoOrderItem.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet": {
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "cart-UsablePaymentInformation": {
      "properties": {
        "usableBillingAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsablePaymentInformation.usableBillingAddress"
          }
        },
        "paymentMethodName": {
          "type": "string"
        },
        "protocolData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsablePaymentInformation.protocolData"
          }
        },
        "paymentTermConditionId": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsablePaymentInformation.userDataField"
          }
        },
        "language": {
          "type": "string"
        },
        "description": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-OrderItemShippingInfo": {
      "required": [
        "shippingChargeType"
      ],
      "properties": {
        "/shippingMode": {
          "$ref": "#/definitions/cart-ShippingMode"
        },
        "shipTieCode": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-OrderItemShippingInfo.userDataField"
          }
        },
        "physicalStoreId": {
          "type": "string"
        },
        "shippingCarrierAccountNumber": {
          "type": "string"
        },
        "shippingChargePolicyID": {
          "type": "string"
        },
        "physicalStoreExternalId": {
          "type": "string"
        },
        "shipInstruction": {
          "type": "string"
        },
        "/shippingAddress": {
          "$ref": "#/definitions/cart-ShippingAddress"
        },
        "requestedShipDate": {
          "type": "string"
        },
        "shipCarrAccntNum": {
          "type": "string"
        },
        "shippingChargeType": {
          "type": "string"
        },
        "isExpedited": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardChoice.giftSet": {
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.rewardChoice.giftSet.giftItem"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-PaymentInstruction": {
      "properties": {
        "protocolData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-PaymentInstruction.protocolData"
          }
        },
        "paymentRule": {
          "type": "string"
        },
        "piDescription": {
          "type": "string"
        },
        "payMethodId": {
          "type": "string"
        },
        "paymentTermConditionId": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-PaymentInstruction.userDataField"
          }
        },
        "/billingAddress": {
          "$ref": "#/definitions/cart-BillingAddress"
        },
        "minAmount": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "piCurrency": {
          "type": "string"
        },
        "sequenceNumber": {
          "type": "string",
          "format": "int64"
        },
        "piStatus": {
          "type": "string"
        },
        "refundAllowed": {
          "type": "string"
        },
        "piLanguage": {
          "type": "string"
        },
        "piAmount": {
          "type": "string",
          "format": "double"
        },
        "piId": {
          "type": "string"
        },
        "maxAmount": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        }
      }
    },
    "cart-rewardOption.giftSetSpecification.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$ShippingModes$UsableShippingMode": {
      "description": "Description of orderItem.",
      "required": [
        "shipModeId",
        "description",
        "shipModeCode"
      ],
      "properties": {
        "userData": {
          "type": "string",
          "description": "User data."
        },
        "trackingURL": {
          "type": "string",
          "description": "Shipping mode tracking URL."
        },
        "carrier": {
          "type": "string",
          "description": "Shipping mode carrier."
        },
        "shipModeId": {
          "type": "string",
          "description": "Shipping mode identifier."
        },
        "description": {
          "type": "string",
          "description": "Shiping mode description."
        },
        "shipModeCode": {
          "type": "string",
          "description": "Shipping mode code."
        }
      }
    },
    "cart-CouponCode.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.description.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock": {
      "properties": {
        "blockReason": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason"
        },
        "comments": {
          "type": "string"
        },
        "resovled": {
          "type": "boolean"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.userData"
        },
        "timeBlocked": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.description": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.description.userData"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$CopyOrderRequest": {
      "properties": {
        "prepare": {
          "type": "string",
          "description": "Whether to prepare the order by calling the PrepareOrder command."
        },
        "check": {
          "type": "string",
          "description": "List of order items that is to be checked by the CheckInventory task command."
        },
        "quantity": {
          "type": "string",
          "description": "The quantity of the order item."
        },
        "toOrderId": {
          "type": "string",
          "description": "Specifies the order to be created or modified."
        },
        "currency": {
          "type": "string",
          "description": "The currency of the order items."
        },
        "offerId": {
          "type": "string",
          "description": "List of offer IDs to be chosen from when creating a new order item."
        },
        "requestedShipDate": {
          "type": "string",
          "description": "The date which the destination order should be shipped."
        },
        "partNumber": {
          "type": "string",
          "description": "Part number to be resolved to a catalog entry. It overrides catEntryId."
        },
        "correlationGroup": {
          "type": "string",
          "description": "The group to which this order item is related."
        },
        "keepOrdItemValidContract": {
          "type": "string",
          "description": "Whether to keep eligible contracts."
        },
        "continue": {
          "type": "string",
          "description": "Controls whether the order copy continues when one or more of the order items cannot be copied. A value of 0 terminates and rolls back execution if an order item cannot be created or updated in the target order. A value of 1 ignores the create or update operation for that order item and continues execution. The default value is 0."
        },
        "copyOrdPayInfo": {
          "type": "string",
          "description": "Whether to copy order payment information."
        },
        "addressId": {
          "type": "string",
          "description": "The reference number of the address to which the order items are to be shipped."
        },
        "configurationId": {
          "type": "string",
          "description": "If the order item represents a configured Dynamic Kit, this is the configuration ID"
        },
        "orderComment": {
          "type": "string",
          "description": "The order comment."
        },
        "isPONumberCopied": {
          "type": "string",
          "description": "Whether the PO number of source order will be copied to the destination order."
        },
        "merge": {
          "type": "string",
          "description": "List of order items that is to be merged with other order items in the same order if possible, regardless of their correlationGroup attributes."
        },
        "partOwnerId": {
          "type": "string",
          "description": "The member ID of the part owner, used with partNumber."
        },
        "displaySeq": {
          "type": "string",
          "description": "The display sequence of the destination order."
        },
        "allocate": {
          "type": "string",
          "description": "List of order items that is to be allocated from existing inventory."
        },
        "payInfoFrom": {
          "type": "string",
          "description": "The reference number of an order from which to obtain payment information. If more than one order is specified, only the most recently updated of those orders applies."
        },
        "copyOrderUniquePromotionCode": {
          "type": "string",
          "description": "Whether to copy unique promotion codes applied to the order."
        },
        "copyOrderItemId": {
          "type": "string",
          "description": "Specifies which order items should be copied from the source orders specified by fromOrderId and added to the destination order specified by toOrderId."
        },
        "backorder": {
          "type": "string",
          "description": "List of order items that is to be allocated from expected inventory."
        },
        "price": {
          "type": "string",
          "description": "The price of the order items."
        },
        "shippingAddressFromOrderProfile": {
          "type": "string",
          "description": "Whether to use the default shipping address held in the order profile: if the value is 1, the default shipping address is copied from the order profile to all the order items of the order specified in toOrderId."
        },
        "outOrderName": {
          "type": "string",
          "description": "The reference number of a destination order."
        },
        "contractId": {
          "type": "string",
          "description": "The contract reference number associated with the order."
        },
        "copyAutoAddedOrderItems": {
          "type": "string",
          "description": "Whether to copy auto-added order items."
        },
        "memberId": {
          "type": "string",
          "description": "The reference number of a member, used to resolve special order abbreviations when they appear in fromOrderId."
        },
        "shippingModeFromOrderProfile": {
          "type": "string",
          "description": "Whether to use the default shipping mode held in the order profile: if the value is 1, the default shipping mode is copied from the order profile to all the order items of the order specified in toOrderId."
        },
        "copyOrderPromotionCode": {
          "type": "string",
          "description": "Whether to copy public promotion codes applied to the order."
        },
        "comment": {
          "type": "string",
          "description": "A comment to be included with the item when order items are added to or updated in the destination order."
        },
        "reverse": {
          "type": "string",
          "description": "List of order items whose allocation is to be released."
        },
        "remerge": {
          "type": "string",
          "description": "List of the order items that are to be merged with other order items in the same order and with the same correlationGroup attribute, if possible."
        },
        "orderInfoFrom": {
          "type": "string",
          "description": "The reference number of an order from which to copy order-level information."
        },
        "shipAsComplete": {
          "type": "string",
          "description": "Specifies if the created or modified order can be partially shipped. If the value is Y, the order will be shipped when all order items are available. If the value is N, the order can be partially shipped when some of the order items are available."
        },
        "tcId": {
          "type": "string",
          "description": "The term and condition ID of the destination order."
        },
        "blockInfoCopy": {
          "type": "string",
          "description": "Whether the orderblock objects will be copied."
        },
        "refreshContractAndOffer": {
          "type": "string",
          "description": "Whether to refresh the price information for all order items."
        },
        "status": {
          "type": "string",
          "description": "The status of the destination order."
        },
        "UOM": {
          "type": "string",
          "description": "The unit of measure for the quantity."
        },
        "updateOrderItemId": {
          "type": "string",
          "description": "Specifies order items in the destination order to be updated. It is updated using information from other parameters in the enumeration group specified by i, but not from the source orders for that enumeration group and not from catEntryId and partNumber. Note that the catalog entry ID of an order item cannot be updated. "
        },
        "billingAddressId": {
          "type": "string",
          "description": "The billing address ID of the destination order."
        },
        "inventoryValidation": {
          "type": "string",
          "description": "Whether inventory status should be validated for adding to cart."
        },
        "catEntryId": {
          "type": "string",
          "description": "The catalog entry ID of the order item."
        },
        "field1": {
          "type": "string",
          "description": "Sets the field1 value of the destination order. If not specified, the corresponding field value of the \"orderInfoFrom\" order will be used, if there is one."
        },
        "field2": {
          "type": "string",
          "description": "Sets the field2 value of the destination order. If not specified, the corresponding field value of the \"orderInfoFrom\" order will be used, if there is one."
        },
        "sensitiveInfoCopy": {
          "type": "string",
          "description": "Whether the payment methods will be copied."
        },
        "field3": {
          "type": "string",
          "description": "Sets the field3 value of the destination order. If not specified, the corresponding field value of the \"orderInfoFrom\" order will be used, if there is one."
        },
        "pay_paymentname": {
          "type": "string",
          "description": "(Deprecated) This is supported for compatibility with earlier versions. With payment rule, ORDPAYINFO is not used, while using payment plugin controller and payment plugins. Sets the payment name-value pairs of the destination order."
        },
        "shipModeId": {
          "type": "string",
          "description": "The reference number associated with a particular shipping service."
        },
        "description": {
          "type": "string",
          "description": "The description of the destination order"
        },
        "outOrderItemName": {
          "type": "string",
          "description": "The reference number of a destination order item."
        },
        "fromOrderId": {
          "type": "string",
          "description": "Specifies zero or more source orders from which order items will be copied."
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType": {
      "properties": {
        "reason": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.userData"
        },
        "code": {
          "type": "string"
        },
        "associatedPromotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion"
          }
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$OrderIdContainer": {
      "description": "Structure containing an order identifier.",
      "required": [
        "orderId"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Order identifier."
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType": {
      "required": [
        "rewardOptionIdentifier"
      ],
      "properties": {
        "rewardChoice": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice"
        },
        "rewardSpecification": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.userData"
        },
        "rewardOptionIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardOptionIdentifier"
        },
        "adjustment": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode": {
      "properties": {
        "reasonCode": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode.userData"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode.description"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$CreateOrderRequest": {
      "properties": {
        "outOrderName": {
          "type": "string",
          "description": "The reference number of a destination order."
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ParentInfoType.parentOrderItemIdentifier": {
      "properties": {
        "externalOrderItemID": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.userData.userDataField"
          }
        }
      }
    },
    "cart-OrderAmount.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.maximumQuantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.quantity"
        }
      }
    },
    "cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.payment.beans.PaymentPolicyListDataBean_IBM_PaymentPolicyList_Detailed.resultList": {
      "properties": {
        "primaryRC": {
          "type": "integer",
          "format": "int32"
        },
        "secondaryRC": {
          "type": "integer",
          "format": "int32"
        },
        "paymentPolicyInfoUsableWithoutTA": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.payment.beans.PaymentPolicyListDataBean_IBM_PaymentPolicyList_Detailed.resultList.paymentPolicyInfoUsableWithoutTA"
          }
        },
        "message": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification": {
      "properties": {
        "giftSetSpecification": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification"
        },
        "userData": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.userData"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ParentInfoType.parentOrderIdentifier": {
      "properties": {
        "customerOrderNumber": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "externalOrderID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification.maximumQuantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType": {
      "properties": {
        "changeReasonCode": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.changeReasonCode"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.userData"
        },
        "orderVersion": {
          "type": "string"
        },
        "cSRIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.cSRIdentifier"
        },
        "creationDate": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardOptionIdentifier": {
      "properties": {
        "externalIdentifier": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.utf.beans.PAttributeDataBean_IBM_PAttribute_Detailed.resultList": {
      "properties": {
        "sequence": {
          "type": "integer",
          "format": "int32"
        },
        "encryptFlag": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "integer",
          "format": "int64"
        },
        "attrTypeId": {
          "type": "string"
        },
        "PAttributeId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "accessBeanName": {
          "type": "string"
        }
      }
    },
    "cart-ShippingAddress.attributes": {
      "required": [
        "attrKey"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrKey": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSetSpecification": {
      "required": [
        "maximumQuantity"
      ],
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.giftSetSpecification.giftItem"
          }
        },
        "maximumQuantity": {
          "$ref": "#/definitions/cart-rewardOption.giftSetSpecification.maximumQuantity"
        }
      }
    },
    "cart-rewardOption.adjustment.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.paymentProtocolData": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.payment.beans.BuyerPurchaseOrderDataBean_IBM_BuyerPurchaseOrder_Summary.resultList": {
      "properties": {
        "state": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "type": "string"
        },
        "buyerPurchaseOrderId": {
          "type": "integer",
          "format": "int64"
        },
        "purchaseOrderNumber": {
          "type": "string"
        },
        "amount": {
          "type": "string"
        },
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "dataBeanKeyBuyerPurchaseOrderId": {
          "type": "string"
        },
        "buyerPurchaseOrderTypeId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice": {
      "properties": {
        "price": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice.price"
        },
        "alternativeCurrencyPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice.alternativeCurrencyPrice"
          }
        },
        "quantity": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice.quantity"
        }
      }
    },
    "cart-rewardOption.amount": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.userData.userDataField"
          }
        }
      }
    },
    "cart-cartUpdate": {
      "properties": {
        "Order": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartUpdate_item"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.financialTransactionIdentifier": {
      "properties": {
        "externalIdentifier": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-cartItem.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.blockReason.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-cartUpdate_item": {
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartUpdate_item.orderItem"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartUpdate_item.userDataField"
          }
        },
        "orderId": {
          "type": "string"
        }
      }
    },
    "cart-BillingAddress.attributes": {
      "required": [
        "attrKey"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrKey": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-UsablePaymentInformation.protocolData": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice.alternativeCurrencyPrice": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.payment.beans.PaymentPolicyListDataBean_IBM_PaymentPolicyList_Detailed.resultList.paymentPolicyInfoUsableWithoutTA": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "attrPageName": {
          "type": "string"
        },
        "policyType": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "policyId": {
          "type": "string"
        }
      }
    },
    "cart-cartUpdate_item.orderItem": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "UOM": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartUpdate_item.orderItem.userDataField"
          }
        },
        "productId": {
          "type": "string"
        },
        "itemAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cartUpdate_item.orderItem.itemAttributes"
          }
        },
        "quantity": {
          "type": "string",
          "format": "double"
        },
        "partNumber": {
          "type": "string"
        },
        "orderItemId": {
          "type": "string"
        },
        "contractId": {
          "type": "string"
        },
        "fulfillmentCenterId": {
          "type": "string"
        },
        "fulfillmentCenterName": {
          "type": "string"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$AddOrderItemBodyDescription$OrderItemBodyDescription": {
      "description": "Description of orderItem.",
      "required": [
        "productId",
        "quantity"
      ],
      "properties": {
        "itemAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.CartHandler$AddOrderItemBodyDescription$OrderItemBodyDescription$ItemAttributesBodyDescription"
          },
          "description": "item attributes"
        },
        "productId": {
          "type": "string",
          "description": "product ID"
        },
        "quantity": {
          "type": "string",
          "description": "quantity"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.amount": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.userData.userDataField"
          }
        }
      }
    },
    "cart-usable_payment_info": {
      "properties": {
        "channel": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType"
        },
        "quoteIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuoteIdentifierType"
        },
        "shipAsComplete": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "orderVersion": {
          "type": "string"
        },
        "placedDate": {
          "type": "string"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "promotionCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType"
          }
        },
        "couponCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType"
          }
        },
        "comments": {
          "type": "string"
        },
        "adjustmentRequirement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType"
          }
        },
        "cSRComments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType"
          }
        },
        "quoteID": {
          "type": "string"
        },
        "customerOrderNumber": {
          "type": "string"
        },
        "buyerPONumber": {
          "type": "string"
        },
        "bLockInfo": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType"
        },
        "orderEditor": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "usablePaymentInformation": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsablePaymentInformation"
          }
        },
        "externalOrderID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.ParentInfoType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$SetPendingOrderRequest": {
      "properties": {
        "orderId": {
          "type": "string",
          "description": "Specifies an order using the order reference number or one of the Order abbreviations. If the parameter is omitted, all the pending orders will be set to current. If a specified pending order no longer exists, it is not set to current."
        },
        "outOrderName": {
          "type": "string",
          "description": "The reference number of a destination order."
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode.resultList.shipChargesByShipMode": {
      "properties": {
        "shipModeDesc": {
          "type": "string"
        },
        "shippingChargeTypes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableShipChargesAndAccountByShipModeDataBean_IBM_usableShipChargesByShipMode.resultList.shipChargesByShipMode.shippingChargeTypes"
          }
        },
        "numberOfShipChargeTypes": {
          "type": "integer",
          "format": "int32"
        },
        "shipModeId": {
          "type": "string"
        },
        "carrierAccountNumber": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-OrderItemShippingInfo.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecGiftItem": {
      "properties": {
        "value": {
          "type": "string",
          "format": "double"
        },
        "uom": {
          "type": "string"
        },
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType"
        },
        "productId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.requestAmount": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.payment.beans.PaymentPolicyListDataBean_IBM_PaymentPolicyList_Detailed": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.payment.beans.PaymentPolicyListDataBean_IBM_PaymentPolicyList_Detailed.resultList"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.GenericTotalType": {
      "properties": {
        "name": {
          "type": "string"
        }
      }
    },
    "cart-PaymentInstruction.protocolData": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardChoice.giftSet.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice.giftSet.giftItem.quantity"
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.orderDataBean": {
      "properties": {
        "totalPages": {
          "type": "integer",
          "format": "int32"
        },
        "uniqueShippingAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.orderDataBean.uniqueShippingAddresses"
          }
        },
        "buschnId": {
          "type": "integer",
          "format": "int32"
        },
        "totalSize": {
          "type": "integer",
          "format": "int32"
        },
        "totalShippingCharge": {
          "type": "number",
          "format": "double"
        },
        "totalTax": {
          "type": "number",
          "format": "double"
        },
        "addressId": {
          "type": "integer",
          "format": "int64"
        },
        "totalAdjustment": {
          "type": "string"
        },
        "totalProductPriceBySumUp": {
          "type": "number",
          "format": "double"
        },
        "billingAddressDataBean": {
          "$ref": "#/definitions/com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.orderDataBean.billingAddressDataBean"
        },
        "surchargeAdjustmentTotal": {
          "type": "number",
          "format": "double"
        },
        "totalOrderItemsPrice": {
          "type": "string"
        },
        "actualShipDate": {
          "type": "string",
          "format": "date"
        },
        "totalShippingTax": {
          "type": "number",
          "format": "double"
        },
        "type": {
          "type": "string"
        },
        "transferStatus": {
          "$ref": "#/definitions/short"
        },
        "totalProductPrice": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "cart-cartUpdate_item.orderItem.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType": {
      "properties": {
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.userData"
        },
        "orderBlock": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.userData.userDataField"
          }
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.orderItemComponentIdentifier": {
      "properties": {
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-cart_item.promotionCode.associatedPromotion": {
      "properties": {
        "description": {
          "type": "string"
        },
        "promotionId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.FinancialTransactionType": {
      "properties": {
        "paymentInstructionID": {
          "type": "string"
        },
        "requestAmount": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.requestAmount"
        },
        "paymentProtocolData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.paymentProtocolData"
          }
        },
        "transactionExtensionData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.transactionExtensionData"
          }
        },
        "avsCode": {
          "type": "string"
        },
        "responseCode": {
          "type": "string"
        },
        "merchantOrderNumber": {
          "type": "string"
        },
        "reasonCode": {
          "type": "string"
        },
        "trackingID": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "referenceNumber": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.userData"
        },
        "transactionType": {
          "type": "string"
        },
        "requestTime": {
          "type": "string"
        },
        "expirationTime": {
          "type": "string"
        },
        "financialTransactionIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.financialTransactionIdentifier"
        },
        "lastUpdate": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.payment.beans.BuyerPurchaseOrderDataBean_IBM_BuyerPurchaseOrder_Summary": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.payment.beans.BuyerPurchaseOrderDataBean_IBM_BuyerPurchaseOrder_Summary.resultList"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.quantity"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.userData.userDataField"
          }
        }
      }
    },
    "cart-UsableShippingAddress": {
      "required": [
        "nickName"
      ],
      "properties": {
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "nickName": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "addressId": {
          "type": "string"
        }
      }
    },
    "cart-usable_shipping_info.usableShippingAddress": {
      "required": [
        "nickName"
      ],
      "properties": {
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "nickName": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "addressId": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "java.util.Map$Entry": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification": {
      "properties": {
        "giftSetSpecification": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.userData"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-Adjustment.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.externalIdentifier": {
      "required": [
        "name"
      ],
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.externalIdentifier.storeIdentifier"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "cart-rewardOption.calculationCodeID": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.calculationCodeID.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.userData.userDataField"
          }
        }
      }
    },
    "cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.adjustment.amount": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType": {
      "properties": {
        "configurationID": {
          "type": "string"
        },
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier"
        },
        "orderItemComponentIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.orderItemComponentIdentifier"
        },
        "unitPrice": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.userData"
        },
        "quantity": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.quantity"
        },
        "required": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-BillingAddress": {
      "required": [
        "phone1",
        "phone2",
        "mobilePhone1",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "fax1",
        "fax2"
      ],
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "billing_address_id": {
          "type": "string"
        },
        "phone1Publish": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-BillingAddress.attributes"
          }
        },
        "language": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "phone2Publish": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        }
      }
    },
    "cart-cart_item.promotionCode": {
      "properties": {
        "code": {
          "type": "string"
        },
        "associatedPromotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cart_item.promotionCode.associatedPromotion"
          }
        }
      }
    },
    "cart-rewardOption.adjustment": {
      "properties": {
        "usage": {
          "type": "string"
        },
        "calculationCodeID": {
          "$ref": "#/definitions/cart-rewardOption.adjustment.calculationCodeID"
        },
        "displayLevel": {
          "type": "string"
        },
        "isPromotionCodeRequired": {
          "type": "boolean"
        },
        "userData": {
          "$ref": "#/definitions/cart-rewardOption.adjustment.userData"
        },
        "amount": {
          "$ref": "#/definitions/cart-rewardOption.adjustment.amount"
        },
        "description": {
          "$ref": "#/definitions/cart-rewardOption.adjustment.description"
        },
        "code": {
          "type": "string"
        },
        "promotionType": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.rewardSpecification.userData.userDataField"
          }
        }
      }
    },
    "cart-UsableShippingMode.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "cart-UsableShippingMode": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-UsableShippingMode.userDataField"
          }
        },
        "trackingURL": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "carrier": {
          "type": "string"
        },
        "shipModeId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "shipModeCode": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.adjustment.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSetSpecification.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/cart-rewardOption.giftSetSpecification.giftItem.quantity"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$AddPreConfigurationToCartRequest": {
      "properties": {
        "reverse": {
          "type": "string",
          "description": "A list of OrderItems whose allocations should be released (that is, de-allocated from existing or expected inventory as appropriate)."
        },
        "remerge": {
          "type": "string",
          "description": "A list of the OrderItems that should be merged with other OrderItems in the same order and with the same correlationGroup attribute, if possible. OrderItems are not merged unless their InventoryStatus is \"NALC\", or they are specified by one or more of the allocate, backorder, and reverse parameters."
        },
        "physicalStoreId": {
          "type": "string",
          "description": "A comment to be included with the created or updated order items."
        },
        "backorder": {
          "type": "string",
          "description": "A list of OrderItems that should be allocated from expected inventory if they are not allocated from existing inventory."
        },
        "calculateOrder": {
          "type": "string",
          "description": "Specifies whether OrderCalculateCmd will be called to calculate the charges for the order. 0 = do not call OrderCalculateCmd, 1 = call OrderCalculateCmd."
        },
        "check": {
          "type": "string",
          "description": "A list of OrderItems that should be checked by the CheckInventoryAvailability task command."
        },
        "quantity": {
          "type": "string",
          "description": "The quantity of the item to be added to the order."
        },
        "contractId": {
          "type": "string",
          "description": "The identifier of the contract associated with the order."
        },
        "fulfillmentCenterId": {
          "type": "string",
          "description": "The identifier of the fulfillment center that this item belongs to."
        },
        "addressId": {
          "type": "string",
          "description": "The reference number of the shipping mode to be used for the product or item."
        },
        "doInventory": {
          "type": "string",
          "description": "Specifies whether the command should perform the inventory calculation subtasks. Set to either do the price tasks (Y), or not (N). Turning off these tasks might result in better performance, but customers might not get the most current inventory level, when changes occur."
        },
        "UOM": {
          "type": "string",
          "description": "The unit of measure for quantity."
        },
        "inventoryValidation": {
          "type": "string",
          "description": "Specifies whether inventory status should be validated for adding to cart."
        },
        "catEntryId": {
          "type": "string",
          "description": "The identifier of a catalog entry to be used to create a new OrderItem."
        },
        "merge": {
          "type": "string",
          "description": "A list of OrderItems that should be merged with other OrderItems in the same order if possible, regardless of their correlationGroup attributes."
        },
        "calculationUsage": {
          "type": "string",
          "description": "The identifier for the type of calculation to be performed on the order."
        },
        "shipModeId": {
          "type": "string",
          "description": "The identifier associated with a particular shipping service."
        },
        "orderItemId": {
          "type": "string",
          "description": "The identifier of the OrderItem to be updated."
        },
        "partNumber": {
          "type": "string",
          "description": "The part number of catalog entry."
        },
        "allocate": {
          "type": "string",
          "description": "A list of OrderItems that should be allocated from existing inventory."
        },
        "doPrice": {
          "type": "string",
          "description": "Specifies whether the command should perform the price calculation subtasks. Set to enable the price tasks (Y), or to disable price tasks (N)."
        },
        "comment": {
          "type": "string",
          "description": "The identifier of the address to which the products and items are shipped."
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-OrderStatus": {
      "properties": {
        "orderStatus": {
          "type": "string"
        },
        "xstat_": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/java.util.Map$Entry"
          }
        },
        "editable": {
          "type": "string"
        },
        "prepareIndicator": {
          "type": "string"
        },
        "buyerApprovalStatus": {
          "type": "string"
        },
        "locked": {
          "type": "string"
        },
        "blocked": {
          "type": "string"
        }
      }
    },
    "cart-UsablePaymentInformation.usableBillingAddress": {
      "required": [
        "nickName"
      ],
      "properties": {
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "nickName": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "addressId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType": {
      "properties": {
        "couponId": {
          "type": "string"
        },
        "effectiveDateTime": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.userData"
        },
        "expirationDateTime": {
          "type": "string"
        },
        "promotionIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier"
        },
        "description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.description"
          }
        },
        "code": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-ShippingAddress": {
      "required": [
        "phone1",
        "phone2",
        "mobilePhone1",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "fax1",
        "fax2"
      ],
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phone1Publish": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-ShippingAddress.attributes"
          }
        },
        "language": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "phone2Publish": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardChoice.giftSet.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-cartUpdate_item.orderItem.itemAttributes": {
      "required": [
        "attrName"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrName": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem.quantity"
        }
      }
    },
    "cart-rewardOption.giftSetSpecification.maximumQuantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "cart-cart": {
      "properties": {
        "Order": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-cart_item"
          }
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.unitPrice.price": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.calculationCodeID.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardOptionIdentifier": {
      "properties": {
        "externalIdentifier": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$AddOrderItemBodyDescription$OrderItemBodyDescription$ItemAttributesBodyDescription": {
      "description": "Description of item attributes.",
      "required": [
        "attrValue",
        "attrName"
      ],
      "properties": {
        "attrValue": {
          "type": "string",
          "description": "attribute value"
        },
        "attrName": {
          "type": "string",
          "description": "attribute name"
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.orderDataBean.billingAddressDataBean": {
      "properties": {
        "urlURL": {
          "type": "string"
        },
        "nickNameURL": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "bestCallingTimeURL": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "cityURL": {
          "type": "string"
        },
        "billingCode": {
          "type": "string"
        },
        "addressField1": {
          "type": "string"
        },
        "storeDirectory": {
          "type": "string"
        },
        "addressField2": {
          "type": "string"
        },
        "primaryURL": {
          "type": "string"
        },
        "packageSuppression": {
          "type": "string"
        },
        "organizationUnitNameURL": {
          "type": "string"
        },
        "addressField3": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "createdTimestamp": {
          "type": "string"
        },
        "middleNameURL": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "firstNameURL": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "email1URL": {
          "type": "string"
        },
        "fax1URL": {
          "type": "string"
        },
        "statusURL": {
          "type": "string"
        },
        "publishPhone1URL": {
          "type": "string"
        },
        "stateURL": {
          "type": "string"
        },
        "mobilePhone1CountryURL": {
          "type": "string"
        },
        "packageSuppressionURL": {
          "type": "string"
        },
        "addressField3URL": {
          "type": "string"
        },
        "dataBeanKeyAddressId": {
          "type": "string"
        },
        "billingCodeTypeURL": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "address3URL": {
          "type": "string"
        },
        "phone2TypeURL": {
          "type": "string"
        },
        "organizationNameURL": {
          "type": "string"
        },
        "lastCreate": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "officeAddressURL": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "addressIdURL": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "addressTypeURL": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "addressField2URL": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "billingCodeURL": {
          "type": "string"
        },
        "phone2URL": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "address2URL": {
          "type": "string"
        },
        "phone1TypeURL": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "businessTitleURL": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "lastCreateURL": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "zipCodeURL": {
          "type": "string"
        },
        "billingCodeType": {
          "type": "string"
        },
        "addressField1URL": {
          "type": "string"
        },
        "mobilePhone1URL": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "phone1URL": {
          "type": "string"
        },
        "personTitleURL": {
          "type": "string"
        },
        "lastNameURL": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "publishPhone1": {
          "type": "string"
        },
        "address1URL": {
          "type": "string"
        },
        "storeIdURL": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "publishPhone2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "countryURL": {
          "type": "string"
        },
        "email2URL": {
          "type": "string"
        },
        "fax2URL": {
          "type": "string"
        },
        "publishPhone2URL": {
          "type": "string"
        },
        "isSelfAddress": {
          "type": "boolean"
        }
      }
    },
    "cart-UsablePaymentInformation.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$DeleteOrderItemRequest": {
      "required": [
        "orderItemId"
      ],
      "properties": {
        "orderId": {
          "type": "string",
          "description": "The order ID."
        },
        "orderItemId": {
          "type": "string",
          "description": "The order item identifier."
        }
      }
    },
    "cart-OrderIdentifier": {
      "properties": {
        "customerOrderNumber": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "externalOrderID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification": {
      "required": [
        "maximumQuantity"
      ],
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem"
          }
        },
        "maximumQuantity": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.maximumQuantity"
        }
      }
    },
    "cart-rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-UsableShippingChargePolicy": {
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "storeId": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.cSRIdentifier.externalIdentifier": {
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.description.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.description.userData.userDataField"
          }
        }
      }
    },
    "cart-OrderItemAmount.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CSRCommentsType.cSRIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType.cSRIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.rewardSpecification.giftSetSpecification": {
      "required": [
        "maximumQuantity"
      ],
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification.giftItem"
          }
        },
        "maximumQuantity": {
          "$ref": "#/definitions/cart-rewardOption.rewardSpecification.giftSetSpecification.maximumQuantity"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.associatedPromotion.promotionIdentifier.calculationCodeIdentifier.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason": {
      "properties": {
        "reasonCode": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason.userData"
        },
        "valid": {
          "type": "boolean"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType.reason.description"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.externalIdentifier": {
      "required": [
        "name"
      ],
      "properties": {
        "version": {
          "type": "integer",
          "format": "int64"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType.promotionIdentifier.externalIdentifier.storeIdentifier"
        },
        "name": {
          "type": "string"
        },
        "revision": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "cart-rewardOption.rewardChoiceGiftItem": {
      "properties": {
        "uom": {
          "type": "string"
        },
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType"
        },
        "productId": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "double"
        }
      }
    },
    "cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.RewardOptionType.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.TaxByTaxCategoryType": {
      "properties": {
        "taxCategoryCode": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.CartHandler$OrderScheduleRequest": {
      "required": [
        "start",
        "orderId"
      ],
      "properties": {
        "start": {
          "type": "string",
          "description": "The time at which the first execution of this order should occur in the format YYYY:MM:DD:hh:mm:ss. Only hh:mm:ss is mandatory."
        },
        "delay": {
          "type": "string",
          "description": "The amount of time, in seconds, before order processing is retried, in case of order processing failure. This parameter must be paired with the attempts parameter."
        },
        "interval": {
          "type": "string",
          "description": "The number of seconds between successive executions of this order."
        },
        "attempts": {
          "type": "string",
          "description": "The number of times the scheduler tries processing this order if order processing fails."
        },
        "host": {
          "type": "string",
          "description": "Host name responsible for processing an order."
        },
        "orderId": {
          "type": "string",
          "description": "Order identifier."
        }
      }
    },
    "com.ibm.commerce.order.beans.UsableBillingAddressListDataBean_IBM_UsableBillingAddressList_Summary.resultList.orderDataBean.uniqueShippingAddresses": {
      "properties": {
        "urlURL": {
          "type": "string"
        },
        "nickNameURL": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "bestCallingTimeURL": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "cityURL": {
          "type": "string"
        },
        "billingCode": {
          "type": "string"
        },
        "addressField1": {
          "type": "string"
        },
        "storeDirectory": {
          "type": "string"
        },
        "addressField2": {
          "type": "string"
        },
        "primaryURL": {
          "type": "string"
        },
        "packageSuppression": {
          "type": "string"
        },
        "organizationUnitNameURL": {
          "type": "string"
        },
        "addressField3": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "createdTimestamp": {
          "type": "string"
        },
        "middleNameURL": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "firstNameURL": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "email1URL": {
          "type": "string"
        },
        "fax1URL": {
          "type": "string"
        },
        "statusURL": {
          "type": "string"
        },
        "publishPhone1URL": {
          "type": "string"
        },
        "stateURL": {
          "type": "string"
        },
        "mobilePhone1CountryURL": {
          "type": "string"
        },
        "packageSuppressionURL": {
          "type": "string"
        },
        "addressField3URL": {
          "type": "string"
        },
        "dataBeanKeyAddressId": {
          "type": "string"
        },
        "billingCodeTypeURL": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "address3URL": {
          "type": "string"
        },
        "phone2TypeURL": {
          "type": "string"
        },
        "organizationNameURL": {
          "type": "string"
        },
        "lastCreate": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "officeAddressURL": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        },
        "addressIdURL": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "addressTypeURL": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "addressField2URL": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "billingCodeURL": {
          "type": "string"
        },
        "phone2URL": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "address2URL": {
          "type": "string"
        },
        "phone1TypeURL": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "businessTitleURL": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "lastCreateURL": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "zipCodeURL": {
          "type": "string"
        },
        "billingCodeType": {
          "type": "string"
        },
        "addressField1URL": {
          "type": "string"
        },
        "mobilePhone1URL": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "phone1URL": {
          "type": "string"
        },
        "personTitleURL": {
          "type": "string"
        },
        "lastNameURL": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "publishPhone1": {
          "type": "string"
        },
        "address1URL": {
          "type": "string"
        },
        "storeIdURL": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "publishPhone2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "countryURL": {
          "type": "string"
        },
        "email2URL": {
          "type": "string"
        },
        "fax2URL": {
          "type": "string"
        },
        "publishPhone2URL": {
          "type": "string"
        },
        "isSelfAddress": {
          "type": "boolean"
        }
      }
    },
    "cart-OrderAmount": {
      "properties": {
        "totalAdjustmentCurrency": {
          "type": "string"
        },
        "totalSalesTax": {
          "type": "string",
          "format": "double"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-OrderAmount.userDataField"
          }
        },
        "totalShippingCharge": {
          "type": "string",
          "format": "double"
        },
        "grandTotalCurrency": {
          "type": "string"
        },
        "totalShippingTaxCurrency": {
          "type": "string"
        },
        "totalTaxByTaxCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-OrderAmount.totalTaxByTaxCategory"
          }
        },
        "genericTotal": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.GenericTotalType"
          }
        },
        "adjustment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-Adjustment"
          }
        },
        "totalProductPriceCurrency": {
          "type": "string"
        },
        "totalAdjustment": {
          "type": "string",
          "format": "double"
        },
        "totalSalesTaxCurrency": {
          "type": "string"
        },
        "totalShippingChargeCurrency": {
          "type": "string"
        },
        "grandTotal": {
          "type": "string",
          "format": "double"
        },
        "totalShippingTax": {
          "type": "string",
          "format": "double"
        },
        "totalProductPrice": {
          "type": "string",
          "format": "double"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType.orderBlock.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-rewardOption.giftSet.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/cart-rewardOption.giftSet.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/cart-rewardOption.giftSet.giftItem.quantity"
        }
      }
    },
    "com.ibm.commerce.order.facade.datatypes.OrderItemComponentType.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.SuggestionView.Entry": {
      "properties": {
        "value": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.SuggestionView.Entry.userDataField"
          }
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.BreadCrumbTrailEntryView": {
      "properties": {
        "value": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.FacetView": {
      "properties": {
        "value": {
          "type": "string"
        },
        "Entry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.FacetView.Entry"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.FacetView.Entry": {
      "properties": {
        "label": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        },
        "entryValue": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.SuggestionView.Entry.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.WebContentView.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.CatalogGroupView": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "parentCatalogGroupID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "thumbnail": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.SuggestionView": {
      "properties": {
        "Entry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.SuggestionView.Entry"
          }
        },
        "label": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.SuggestionView.Entry": {
      "properties": {
        "value": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.SuggestionView.Entry.userDataField"
          }
        },
        "name": {
          "type": "string"
        },
        "image": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.WebContentView": {
      "required": [
        "URL"
      ],
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.WebContentView.userDataField"
          }
        },
        "name": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        },
        "MetaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.WebContentView.MetaData"
          }
        }
      }
    },
    "categoryview-categorySummary": {
      "properties": {
        "indexStatus": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.userDataField"
          }
        },
        "SuggestionView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.SuggestionView"
          }
        },
        "WebContentView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.WebContentView"
          }
        },
        "recordSetComplete": {
          "type": "string"
        },
        "CatalogGroupView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.CatalogGroupView"
          }
        },
        "MetaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.MetaData"
          }
        },
        "finalQuery": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "BreadCrumbTrailEntryView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.BreadCrumbTrailEntryView"
          }
        },
        "report": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "FacetView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.FacetView"
          }
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "categoryview-categoryDetails.MetaData": {
      "required": [
        "metaKey"
      ],
      "properties": {
        "metaKey": {
          "type": "string"
        },
        "metaData": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.WebContentView.MetaData": {
      "properties": {
        "metaData": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.FacetView": {
      "properties": {
        "value": {
          "type": "string"
        },
        "Entry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.FacetView.Entry"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.BreadCrumbTrailEntryView": {
      "properties": {
        "value": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.FacetView.Entry": {
      "properties": {
        "label": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        },
        "entryValue": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.WebContentView.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.CatalogGroupView.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.SuggestionView.Entry.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.SuggestionView": {
      "properties": {
        "Entry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.SuggestionView.Entry"
          }
        },
        "label": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails": {
      "properties": {
        "indexStatus": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.userDataField"
          }
        },
        "SuggestionView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.SuggestionView"
          }
        },
        "WebContentView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.WebContentView"
          }
        },
        "recordSetComplete": {
          "type": "string"
        },
        "CatalogGroupView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.CatalogGroupView"
          }
        },
        "MetaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.MetaData"
          }
        },
        "finalQuery": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "BreadCrumbTrailEntryView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.BreadCrumbTrailEntryView"
          }
        },
        "report": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "FacetView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.FacetView"
          }
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "categoryview-categorySummary.WebContentView": {
      "required": [
        "URL"
      ],
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.WebContentView.userDataField"
          }
        },
        "name": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        },
        "MetaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categorySummary.WebContentView.MetaData"
          }
        }
      }
    },
    "categoryview-categoryDetails.CatalogGroupView.MetaData": {
      "required": [
        "metaKey"
      ],
      "properties": {
        "metaKey": {
          "type": "string"
        },
        "metaData": {
          "type": "string"
        }
      }
    },
    "categoryview-categorySummary.MetaData": {
      "required": [
        "metaKey"
      ],
      "properties": {
        "metaKey": {
          "type": "string"
        },
        "metaData": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.CatalogGroupView": {
      "properties": {
        "longDescription": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "metaKeyword": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.CatalogGroupView.userDataField"
          }
        },
        "identifier": {
          "type": "string"
        },
        "parentCatalogGroupID": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "name": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "fullImage": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "MetaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/categoryview-categoryDetails.CatalogGroupView.MetaData"
          }
        },
        "fullPath": {
          "type": "string"
        },
        "metaDescription": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "fullImageAltDescription": {
          "type": "string"
        }
      }
    },
    "categoryview-categoryDetails.WebContentView.MetaData": {
      "properties": {
        "metaData": {
          "type": "string"
        }
      }
    },
    "person-checkoutProfile.CheckoutProfile": {
      "required": [
        "shipping_mobilePhone1Country",
        "billing_mobilePhone1",
        "shipping_fax1",
        "shipping_fax2",
        "shipping_phone1",
        "shipping_phone2",
        "shipping_mobilePhone1",
        "shipping_email1",
        "shipping_email2",
        "billing_phone1",
        "billing_phone2",
        "billing_mobilePhone1Country",
        "billing_nickName",
        "billing_email1",
        "billing_email2",
        "billing_fax1",
        "billing_fax2",
        "shipping_nickName"
      ],
      "properties": {
        "billing_organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "shipping_mobilePhone1Country": {
          "type": "string"
        },
        "billing_middleName": {
          "type": "string"
        },
        "billing_lastName": {
          "type": "string"
        },
        "shipping_country": {
          "type": "string"
        },
        "shipping_externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ExternalShipModeIdentifier"
        },
        "paymentMethod": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PaymentMethodType"
        },
        "billing_mobilePhone1": {
          "type": "string"
        },
        "shipping_firstName": {
          "type": "string"
        },
        "shipping_internalOfficeAddress": {
          "type": "string"
        },
        "billing_addressType": {
          "type": "string"
        },
        "billing_shippingGeoCode": {
          "type": "string"
        },
        "shipping_phone1Type": {
          "type": "string"
        },
        "shipping_phone2Type": {
          "type": "string"
        },
        "billing_internalOfficeAddress": {
          "type": "string"
        },
        "billing_firstName": {
          "type": "string"
        },
        "billing_attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/java.util.Map$Entry"
          }
        },
        "billing_language": {
          "type": "string"
        },
        "shipping_bestCallingTime": {
          "type": "string"
        },
        "shipping_zipCode": {
          "type": "string"
        },
        "shipping_publishPhone1": {
          "type": "string"
        },
        "billing_phone1Type": {
          "type": "string"
        },
        "billing_personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "shipping_publishPhone2": {
          "type": "string"
        },
        "billing_organizationName": {
          "type": "string"
        },
        "billing_phone2Type": {
          "type": "string"
        },
        "shipping_fax1": {
          "type": "string"
        },
        "shipping_fax2": {
          "type": "string"
        },
        "shipping_businessTitle": {
          "type": "string"
        },
        "billing_phone2Publish": {
          "type": "string"
        },
        "billing_city": {
          "type": "string"
        },
        "shipping_lastName": {
          "type": "string"
        },
        "billing_businessTitle": {
          "type": "string"
        },
        "shipping_phone1": {
          "type": "string"
        },
        "shipping_phone2": {
          "type": "string"
        },
        "shipping_mobilePhone1": {
          "type": "string"
        },
        "shipping_addressType": {
          "type": "string"
        },
        "billing_primary": {
          "type": "string"
        },
        "shipping_shippingGeoCode": {
          "type": "string"
        },
        "billing_personTitle": {
          "type": "string"
        },
        "shipping_state": {
          "type": "string"
        },
        "billing_addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "shipping_email1": {
          "type": "string"
        },
        "billing_organizationUnitName": {
          "type": "string"
        },
        "shipping_email2": {
          "type": "string"
        },
        "billing_phone1": {
          "type": "string"
        },
        "billing_phone1Publish": {
          "type": "string"
        },
        "billing_phone2": {
          "type": "string"
        },
        "shipping_language": {
          "type": "string"
        },
        "shipping_attribute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/java.util.Map$Entry"
          }
        },
        "billing_mobilePhone1Country": {
          "type": "string"
        },
        "billing_state": {
          "type": "string"
        },
        "shipping_modeId": {
          "type": "string"
        },
        "shipping_organizationName": {
          "type": "string"
        },
        "shipping_personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "billing_country": {
          "type": "string"
        },
        "billing_nickName": {
          "type": "string"
        },
        "billing_email1": {
          "type": "string"
        },
        "billing_email2": {
          "type": "string"
        },
        "shipping_city": {
          "type": "string"
        },
        "shipping_addressId": {
          "type": "string"
        },
        "protocolData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-checkoutProfile.CheckoutProfile.protocolData"
          }
        },
        "shipping_taxGeoCode": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-checkoutProfile.CheckoutProfile.userDataField"
          }
        },
        "billing_bestCallingTime": {
          "type": "string"
        },
        "billing_zipCode": {
          "type": "string"
        },
        "billing_addressId": {
          "type": "string"
        },
        "shipping_description": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.DescriptionType"
        },
        "shipping_organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "shipping_primary": {
          "type": "string"
        },
        "shipping_middleName": {
          "type": "string"
        },
        "shipping_personTitle": {
          "type": "string"
        },
        "shipping_organizationUnitName": {
          "type": "string"
        },
        "shipping_addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "billing_taxGeoCode": {
          "type": "string"
        },
        "billing_fax1": {
          "type": "string"
        },
        "billing_fax2": {
          "type": "string"
        },
        "shipping_nickName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ExternalShipModeIdentifier": {
      "properties": {
        "carrier": {
          "type": "string"
        },
        "shipModeCode": {
          "type": "string"
        },
        "storeUniqueID": {
          "type": "string"
        }
      }
    },
    "person-checkoutProfile": {
      "properties": {
        "CheckoutProfile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-checkoutProfile.CheckoutProfile"
          }
        },
        "userId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PaymentMethodType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PaymentMethodType": {
      "properties": {
        "paymentMethodName": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PaymentMethodType.userData"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PaymentMethodType.description"
        }
      }
    },
    "person-checkoutProfile.CheckoutProfile.protocolData": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PaymentMethodType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PaymentMethodType.userData.userDataField"
          }
        }
      }
    },
    "person-checkoutProfile.CheckoutProfile.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.PaymentMethodType.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonCheckoutProfileHandler$UserIdContainer": {
      "description": "User identification container.",
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "User identification."
        }
      }
    },
    "configuration-configuration_item": {
      "required": [
        "configurationId"
      ],
      "properties": {
        "configurationId": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configuration-configuration_item.userDataField"
          }
        },
        "configurationAttribute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configuration-ConfigurationAttributeType"
          }
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.DescriptionType"
        }
      }
    },
    "configuration-ConfigurationAttributeType": {
      "required": [
        "primaryValue"
      ],
      "properties": {
        "additionalValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configuration-ConfigurationValueType"
          }
        },
        "primaryValue": {
          "$ref": "#/definitions/configuration-ConfigurationValueType"
        }
      }
    },
    "configuration-configuration_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "configuration-ConfigurationValueType": {
      "required": [
        "value",
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "configuration-configuration": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/configuration-configuration_item"
          }
        }
      }
    },
    "com.ibm.commerce.contract.beans.PaymentTCDataBean_IBM_PaymentTC_Detailed": {
      "properties": {
        "PAttrValues": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.contract.beans.PaymentTCDataBean_IBM_PaymentTC_Detailed.PAttrValues"
          }
        },
        "tradingId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.TCs": {
      "properties": {
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.TCs.participants"
          }
        },
        "priceListId": {
          "type": "integer",
          "format": "int64"
        },
        "entireCatalogSelected": {
          "type": "integer",
          "format": "int32"
        },
        "inclusionProductSets": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "mandatoryFlag": {
          "type": "integer",
          "format": "int32"
        },
        "XMLString": {
          "type": "string"
        },
        "tcSubType": {
          "type": "string"
        },
        "percentagePriceListIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "timeUpdated": {
          "type": "string",
          "format": "date"
        },
        "productSetId": {
          "type": "integer",
          "format": "int32"
        },
        "tcSequence": {
          "type": "integer",
          "format": "int32"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.TCs.policies"
          }
        },
        "priceListIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          }
        },
        "exclusionProductSets": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "referenceNumber": {
          "type": "integer",
          "format": "int64"
        },
        "entireCatalogAdjustment": {
          "type": "number",
          "format": "double"
        },
        "changeableFlag": {
          "type": "integer",
          "format": "int32"
        },
        "timeCreated": {
          "type": "string",
          "format": "date"
        },
        "tradingId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary.resultList.userRegistration": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.contract.beans.PaymentTCDataBean_IBM_PaymentTC_Detailed.PAttrValues": {
      "properties": {
        "sequence": {
          "type": "string"
        },
        "changeable": {
          "type": "integer",
          "format": "int32"
        },
        "tcId": {
          "type": "integer",
          "format": "int64"
        },
        "rfqResponseProductId": {
          "type": "integer",
          "format": "int64"
        },
        "rfqProductId": {
          "type": "string"
        },
        "PAttrValue": {
          "type": "string"
        },
        "encryptFlag": {
          "type": "integer",
          "format": "int32"
        },
        "referenceNumber": {
          "type": "string"
        },
        "attributeId": {
          "type": "integer",
          "format": "int64"
        },
        "mandatory": {
          "type": "integer",
          "format": "int32"
        },
        "type": {
          "type": "string"
        },
        "orderItemId": {
          "type": "integer",
          "format": "int64"
        },
        "correlationGroup": {
          "type": "integer",
          "format": "int64"
        },
        "unitId": {
          "type": "string"
        },
        "operatorId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed": {
      "properties": {
        "usage": {
          "type": "integer",
          "format": "int32"
        },
        "ownerReferenceNumber": {
          "type": "integer",
          "format": "int64"
        },
        "minorVersion": {
          "type": "integer",
          "format": "int32"
        },
        "timeApproved": {
          "type": "string",
          "format": "date"
        },
        "timeActivated": {
          "type": "string",
          "format": "date"
        },
        "TCs": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.TCs"
          }
        },
        "origin": {
          "type": "integer",
          "format": "int32"
        },
        "storeXMLString": {
          "type": "string"
        },
        "markForDelete": {
          "type": "integer",
          "format": "int32"
        },
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "storeXMLDefinition": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date"
        },
        "dataBeanKeyReferenceNumber": {
          "type": "string"
        },
        "state": {
          "type": "integer",
          "format": "int32"
        },
        "contractLevelParticipants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.contractLevelParticipants"
          }
        },
        "timeDeployed": {
          "type": "string",
          "format": "date"
        },
        "owner": {
          "type": "integer",
          "format": "int64"
        },
        "referenceNumber": {
          "type": "integer",
          "format": "int64"
        },
        "comments": {
          "type": "string"
        },
        "referredTradingAgreementId": {
          "type": "integer",
          "format": "int64"
        },
        "timeCreated": {
          "type": "string",
          "format": "date"
        },
        "familyId": {
          "type": "integer",
          "format": "int64"
        },
        "majorVersion": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int32"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary.resultList"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary.resultList": {
      "properties": {
        "status": {
          "type": "string"
        },
        "userRegistration": {
          "$ref": "#/definitions/com.ibm.commerce.order.beans.RequisitionListDataBean_IBM_Store_Summary.resultList.userRegistration"
        },
        "memberId": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string",
          "format": "date"
        },
        "comment": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.contractLevelParticipants": {
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int32"
        },
        "memberId": {
          "type": "integer",
          "format": "int64"
        },
        "tcId": {
          "type": "integer",
          "format": "int64"
        },
        "timeCreated": {
          "type": "string",
          "format": "date"
        },
        "tradingId": {
          "type": "integer",
          "format": "int64"
        },
        "information": {
          "type": "string"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date"
        },
        "participantId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.TCs.policies": {
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "properties": {
          "type": "string"
        },
        "owner": {
          "type": "integer",
          "format": "int64"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "type": {
          "type": "string"
        },
        "policyName": {
          "type": "string"
        },
        "policyId": {
          "type": "integer",
          "format": "int64"
        },
        "storeEntityId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.contract.beans.ContractDataBean_IBM_Contract_Detailed.TCs.participants": {
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int32"
        },
        "memberId": {
          "type": "integer",
          "format": "int64"
        },
        "tcId": {
          "type": "integer",
          "format": "int64"
        },
        "timeCreated": {
          "type": "string",
          "format": "date"
        },
        "tradingId": {
          "type": "integer",
          "format": "int64"
        },
        "information": {
          "type": "string"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date"
        },
        "participantId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateList_Summary": {
      "properties": {
        "countries": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateList_Summary.countries"
        },
        "countryCodeStates": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateList_Summary.countryCodeStates"
          }
        }
      }
    },
    "com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateName": {
      "properties": {
        "countryDisplayName": {
          "type": "string"
        },
        "stateDisplayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateList_Summary.countries": {},
    "com.ibm.commerce.user.beans.CountryStateListDataBean_IBM_countryStateList_Summary.countryCodeStates": {
      "properties": {
        "displayName": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.UserDataType": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.UserDataType.userDataField"
          }
        }
      }
    },
    "coupon-coupon_item": {
      "properties": {
        "couponId": {
          "type": "string"
        },
        "effectiveDateTime": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "couponCode": {
          "type": "string"
        },
        "promotion": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PromotionIdentifierType"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.UserDataType"
        },
        "couponDescription": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.wallet.facade.datatypes.CouponDescriptionType"
          }
        },
        "expirationDateTime": {
          "type": "string"
        },
        "order": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrderIdentifierType"
        }
      }
    },
    "com.ibm.commerce.wallet.facade.datatypes.CouponDescriptionType": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.wallet.facade.datatypes.CouponDescriptionType.userData"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "coupon-coupon": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "Coupon": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/coupon-coupon_item"
          }
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.wallet.facade.datatypes.CouponDescriptionType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.UserDataType.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.wallet.facade.datatypes.CouponDescriptionType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.wallet.facade.datatypes.CouponDescriptionType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.OrderIdentifierType": {
      "properties": {
        "customerOrderNumber": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "externalOrderID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.common.beans.StoreCurrencyFormatDescriptionDataBean_IBM_Store_Details": {
      "properties": {
        "numberUsage": {
          "type": "string"
        },
        "langId": {
          "type": "string"
        },
        "currencySymbol": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "decimalPlaces": {
          "type": "string"
        },
        "currencyCode": {
          "type": "string"
        }
      }
    },
    "display_price-IBM_Store_DisplayPrice_item": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "priceRuleName": {
          "type": "string"
        },
        "priceRuleId": {
          "type": "string"
        },
        "catalogEntryId": {
          "type": "string"
        },
        "unitPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/display_price-IBM_Store_DisplayPrice_item.unitPrice"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/display_price-IBM_Store_DisplayPrice_item.userDataField"
          }
        },
        "partNumber": {
          "type": "string"
        }
      }
    },
    "display_price-IBM_Store_DisplayPrice": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/display_price-IBM_Store_DisplayPrice_item"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.QuantityType": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "display_price-IBM_Store_DisplayPrice_item.unitPrice": {
      "properties": {
        "price": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "quantity": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuantityType"
        }
      }
    },
    "display_price-IBM_Store_DisplayPrice_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-ExperimentResult": {
      "properties": {
        "/testElement": {
          "$ref": "#/definitions/espot-TestElement"
        },
        "/experiment": {
          "$ref": "#/definitions/espot-Experiment"
        },
        "controlElement": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.AttachmentDescriptionType": {
      "properties": {
        "shortDescription": {
          "type": "string"
        },
        "longDescription": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.AttachmentDescriptionType.userData"
        },
        "language": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "espot-espot": {
      "properties": {
        "MarketingSpotData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-espot_item"
          }
        }
      }
    },
    "espot-MarketingContentIdentifier": {
      "properties": {
        "contentId": {
          "type": "string"
        },
        "/marketingContentExternalIdentifier": {
          "$ref": "#/definitions/espot-MarketingContentExternalIdentifier"
        }
      }
    },
    "espot-MarketingContentDescription": {
      "properties": {
        "marketingText": {
          "type": "string"
        },
        "language": {
          "type": "string"
        },
        "contentLocation": {
          "type": "string"
        }
      }
    },
    "espot-Experiment": {
      "required": [
        "experimentResultId"
      ],
      "properties": {
        "experimentResultName": {
          "type": "string"
        },
        "experimentResultId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.AttachmentDescriptionType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.AttachmentDescriptionType.userData.userDataField"
          }
        }
      }
    },
    "espot-TestElement": {
      "required": [
        "experimentResultTestElementId"
      ],
      "properties": {
        "experimentResultTestElementName": {
          "type": "string"
        },
        "experimentResultTestElementId": {
          "type": "string"
        }
      }
    },
    "espot-DefaultContentDisplaySequence": {
      "properties": {
        "displaySequence": {
          "type": "string"
        },
        "resultFormat": {
          "type": "string"
        },
        "resultId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.marketing.facade.datatypes.AreaType": {
      "properties": {
        "shape": {
          "$ref": "#/definitions/com.ibm.commerce.marketing.facade.datatypes.AreaShapeEnumerationType",
          "enum": [
            "rect",
            "circle",
            "poly"
          ]
        },
        "target": {
          "type": "string"
        },
        "displaySequence": {
          "type": "number",
          "format": "double"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.marketing.facade.datatypes.AreaType.userData"
        },
        "alternateText": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "coordinates": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "url": {
          "type": "string"
        }
      }
    },
    "espot-AttachmentAsset": {
      "required": [
        "attachmentAssetPath"
      ],
      "properties": {
        "attachmentAssetPath": {
          "type": "string"
        },
        "attachmentAssetLanguage": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "attachmentAssetDirectoryPath": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-AttachmentAsset.userDataField"
          }
        },
        "attachmentLocalAsset": {
          "type": "string"
        },
        "attachmentAssetId": {
          "type": "string"
        },
        "attachmentAssetStoreExternalId": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreExternalIdentifierType"
        },
        "attachmentAssetMimeType": {
          "type": "string"
        },
        "attachmentAssetRootDirectory": {
          "type": "string"
        },
        "attachmentAssetStoreId": {
          "type": "string"
        }
      }
    },
    "espot-ActivityExternalIdentifier": {
      "properties": {
        "activityIdentifierName": {
          "type": "string"
        },
        "activityIdentifierStoreId": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType"
        }
      }
    },
    "espot-MarketingSpotIdentifier": {
      "properties": {
        "marketingSpotIdentifier": {
          "type": "string"
        },
        "/marketingSpotExternalIdentifier": {
          "$ref": "#/definitions/espot-MarketingSpotExternalIdentifier"
        }
      }
    },
    "espot-espot_item.filteredResult": {
      "properties": {
        "filteredResultFormat": {
          "type": "string"
        },
        "filteredResultId": {
          "type": "string"
        }
      }
    },
    "espot-espot_item": {
      "properties": {
        "baseMarketingSpotActivityData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-BaseMarketingSpotActivityData"
          }
        },
        "/marketingSpotIdentifier": {
          "$ref": "#/definitions/espot-MarketingSpotIdentifier"
        },
        "behavior": {
          "type": "string"
        },
        "filteredResult": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-espot_item.filteredResult"
          }
        },
        "marketingSpotDataTitle": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-MarketingSpotDataTitle"
          }
        },
        "nextTimeLimit": {
          "type": "string",
          "format": "int64"
        },
        "defaultContentDisplaySequence": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-DefaultContentDisplaySequence"
          }
        },
        "previewReport": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "espot-MarketingContentImageMap.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.marketing.handler.ESpotDataHandler$SearchTermsContainer": {
      "description": "Structure containing multiple search terms.",
      "required": [
        "searchTerms"
      ],
      "properties": {
        "searchTerms": {
          "type": "string",
          "description": "Encoded list of all the search terms."
        }
      }
    },
    "espot-AttachmentDescription": {
      "properties": {
        "attachmentShortDescription": {
          "type": "string"
        },
        "attachmentLanguage": {
          "type": "string"
        },
        "attachmentLongDescription": {
          "type": "string"
        },
        "attachmentName": {
          "type": "string"
        }
      }
    },
    "espot-MarketingContentImageMap": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-MarketingContentImageMap.userDataField"
          }
        },
        "source": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "area": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.marketing.facade.datatypes.AreaType"
          }
        }
      }
    },
    "espot-AttachmentExternalIdentifier": {
      "required": [
        "attachementExternalId"
      ],
      "properties": {
        "attachementOwnerId": {
          "type": "string"
        },
        "attachementExternalId": {
          "type": "string"
        },
        "attachementStoreExternalId": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreExternalIdentifierType"
        },
        "attachementStoreId": {
          "type": "string"
        }
      }
    },
    "espot-ActivityIdentifier": {
      "properties": {
        "/activityExternalIdentifier": {
          "$ref": "#/definitions/espot-ActivityExternalIdentifier"
        },
        "activityIdentifierID": {
          "type": "string"
        }
      }
    },
    "espot-Attachment.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-BaseMarketingSpotActivityData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-Attachment": {
      "properties": {
        "attachmentDisplaySequence": {
          "type": "string"
        },
        "attachmentReferenceId": {
          "type": "string"
        },
        "attachmentReferenceDescription": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-AttachmentReferenceDescription"
          }
        },
        "AttachmentReferenceDescription": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-Attachment.AttachmentReferenceDescription"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-Attachment.userDataField"
          }
        },
        "attachmentDescription": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-AttachmentDescription"
          }
        },
        "AttachmentDescription": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-Attachment.AttachmentDescription"
          }
        },
        "/attachmentIdentifier": {
          "$ref": "#/definitions/espot-AttachmentIdentifier"
        },
        "attachmentAsset": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-AttachmentAsset"
          }
        },
        "/attachmentUsage": {
          "$ref": "#/definitions/espot-AttachmentUsage"
        }
      }
    },
    "espot-BaseMarketingSpotActivityData": {
      "required": [
        "baseMarketingSpotActivityID",
        "baseMarketingSpotActivityName",
        "baseMarketingSpotDataType"
      ],
      "properties": {
        "baseMarketingSpotActivityID": {
          "type": "string"
        },
        "baseMarketingSpotActivityName": {
          "type": "string"
        },
        "baseMarketingSpotCampaignName": {
          "type": "string"
        },
        "activityPriority": {
          "type": "string",
          "format": "int64"
        },
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-BaseMarketingSpotActivityData.properties"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-BaseMarketingSpotActivityData.userDataField"
          }
        },
        "activityFormat": {
          "type": "string"
        },
        "/activityIdentifier": {
          "$ref": "#/definitions/espot-ActivityIdentifier"
        },
        "experimentResult": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-ExperimentResult"
          }
        },
        "baseMarketingSpotDataType": {
          "type": "string"
        }
      }
    },
    "espot-MarketingContent.MarketingContentDescription.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-Attachment.AttachmentDescription.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-MarketingSpotDataTitle": {
      "required": [
        "marketingSpotDataTitleId",
        "marketingSpotDataTitleName",
        "/marketingContent",
        "marketingSpotDataTitleDataType"
      ],
      "properties": {
        "marketingSpotDataTitleActivityID": {
          "type": "string"
        },
        "marketingSpotDataTitleId": {
          "type": "string"
        },
        "marketingSpotDataTitleName": {
          "type": "string"
        },
        "/marketingContent": {
          "$ref": "#/definitions/espot-MarketingContent"
        },
        "experimentResult": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-ExperimentResult"
          }
        },
        "marketingSpotDataTitleDataType": {
          "type": "string"
        }
      }
    },
    "espot-MarketingContentExternalIdentifier": {
      "properties": {
        "contentStoreId": {
          "type": "string"
        },
        "contentName": {
          "type": "string"
        },
        "contentStoreExternalId": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreExternalIdentifierType"
        }
      }
    },
    "espot-MarketingContent.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-Attachment.AttachmentReferenceDescription.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-AttachmentIdentifier": {
      "properties": {
        "/attachmentExternalIdentifier": {
          "$ref": "#/definitions/espot-AttachmentExternalIdentifier"
        },
        "attachementId": {
          "type": "string"
        }
      }
    },
    "espot-MarketingContent.MarketingContentDescription": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-MarketingContent.MarketingContentDescription.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.marketing.facade.datatypes.AreaType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "espot-Attachment.AttachmentDescription": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-Attachment.AttachmentDescription.userDataField"
          }
        }
      }
    },
    "espot-MarketingSpotExternalIdentifier": {
      "properties": {
        "eSpotName": {
          "type": "string"
        },
        "eSpotStoreId": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType"
        }
      }
    },
    "espot-BaseMarketingSpotActivityData.properties": {
      "required": [
        "baseMarketingKey"
      ],
      "properties": {
        "baseMarketingKey": {
          "type": "string"
        },
        "baseMarketingValue": {
          "type": "string"
        }
      }
    },
    "espot-AttachmentUsage": {
      "required": [
        "attachmentUsageName"
      ],
      "properties": {
        "attachmentDisplaySequence": {
          "type": "string"
        },
        "attachmentImage": {
          "type": "string"
        },
        "attachmentUsageName": {
          "type": "string"
        },
        "attachmentUsageDescription": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.AttachmentDescriptionType"
        }
      }
    },
    "espot-MarketingContent": {
      "properties": {
        "/attachment": {
          "$ref": "#/definitions/espot-Attachment"
        },
        "marketingContentImageMap": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-MarketingContentImageMap"
          }
        },
        "contentClickAction": {
          "type": "string",
          "enum": [
            "None",
            "Single",
            "Multiple"
          ]
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-MarketingContent.userDataField"
          }
        },
        "contentInputOption": {
          "type": "string",
          "enum": [
            "Area",
            "Source"
          ]
        },
        "contentUrl": {
          "type": "string"
        },
        "contentMimeType": {
          "type": "string"
        },
        "marketingContentDescription": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-MarketingContentDescription"
          }
        },
        "MarketingContentDescription": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-MarketingContent.MarketingContentDescription"
          }
        },
        "contentFormatName": {
          "type": "string"
        },
        "contentFormatId": {
          "type": "string"
        },
        "/marketingContentIdentifier": {
          "$ref": "#/definitions/espot-MarketingContentIdentifier"
        }
      }
    },
    "espot-Attachment.AttachmentReferenceDescription": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/espot-Attachment.AttachmentReferenceDescription.userDataField"
          }
        }
      }
    },
    "espot-AttachmentReferenceDescription": {
      "properties": {
        "attachmentShortDescription": {
          "type": "string"
        },
        "attachmentLanguage": {
          "type": "string"
        },
        "attachmentLongDescription": {
          "type": "string"
        },
        "attachmentName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.AttachmentDescriptionType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.StoreExternalIdentifierType": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.marketing.facade.datatypes.AreaType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.marketing.facade.datatypes.AreaType.userData.userDataField"
          }
        }
      }
    },
    "espot-AttachmentAsset.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.marketing.handler.EventHandler$EventTrigger": {
      "description": "Marketing event trigger. Note : all parameters specified beyond the schema are sent to the marketing event.",
      "required": [
        "baseMarketingSpotActivityID",
        "experimentResultId",
        "activityId",
        "baseMarketingSpotDataType",
        "experimentResultTestElementId",
        "eMarketingSpotId",
        "personalizationID"
      ],
      "properties": {
        "baseMarketingSpotActivityID": {
          "type": "string",
          "description": "Base marketing spot activity identifier."
        },
        "DM_ReqCmd": {
          "type": "string",
          "description": "Requested command."
        },
        "searchTerm": {
          "type": "string",
          "description": "Search term. Stored in a comma-separated list of search strings."
        },
        "experimentResultId": {
          "type": "string",
          "description": "Experiment result identifier."
        },
        "categoryId": {
          "type": "string",
          "description": "Category identifier."
        },
        "activityId": {
          "type": "string",
          "description": "Activity identifier."
        },
        "productId": {
          "type": "string",
          "description": "Product identifier."
        },
        "baseMarketingSpotDataType": {
          "type": "string",
          "description": "Marketing spot data type. Example : \"MarketingContent\"."
        },
        "experimentResultTestElementId": {
          "type": "string",
          "description": "Experiment result test element identifier."
        },
        "eMarketingSpotId": {
          "type": "string",
          "description": "Marketing spot identifier."
        },
        "personalizationID": {
          "type": "string",
          "description": "Personalization identifier."
        }
      }
    },
    "file_upload_job-IBM_Store_Summary_item": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file_upload_job-IBM_Store_Summary_item.userDataField"
          }
        },
        "uploadType": {
          "type": "string"
        },
        "fileUploadJobId": {
          "type": "string"
        },
        "processFile": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file_upload_job-IBM_Store_Summary_item.processFile"
          }
        },
        "storeId": {
          "type": "string"
        },
        "uploadFile": {
          "$ref": "#/definitions/file_upload_job-UploadFile"
        }
      }
    },
    "file_upload_job-IBM_Store_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file_upload_job-IBM_Store_Summary_item"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "file_upload_job-FileInfo": {
      "required": [
        "fileName"
      ],
      "properties": {
        "filePath": {
          "type": "string"
        },
        "fileName": {
          "type": "string"
        },
        "fileSize": {
          "type": "integer",
          "format": "int64"
        },
        "fileEncoding": {
          "type": "string"
        }
      }
    },
    "file_upload_job-IBM_Store_Summary_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "file_upload_job-UploadFile": {
      "properties": {
        "properties": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/file_upload_job-FileProperty"
          }
        },
        "userName": {
          "type": "string"
        },
        "fileInfo": {
          "$ref": "#/definitions/file_upload_job-FileInfo"
        },
        "uploadTime": {
          "type": "string"
        }
      }
    },
    "file_upload_job-FileProperty": {
      "properties": {
        "value": {
          "type": "string"
        }
      }
    },
    "file_upload_job-IBM_Store_Summary_item.processFile": {
      "properties": {
        "status": {
          "type": "string",
          "enum": [
            "New",
            "Processing",
            "Complete",
            "Failed",
            "Cancelled",
            "Partially Complete"
          ]
        },
        "endTime": {
          "type": "string"
        },
        "startTime": {
          "type": "string"
        }
      }
    },
    "geonode-geonode_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "geonode-geonode_item.Description": {
      "properties": {
        "shortDescription": {
          "type": "string"
        }
      }
    },
    "geonode-geonode_item": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/geonode-geonode_item.userDataField"
          }
        },
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "Description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/geonode-geonode_item.Description"
          }
        }
      }
    },
    "geonode-geonode": {
      "properties": {
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "GeoNode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/geonode-geonode_item"
          }
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "string"
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.GuestIdentityHandler$UserIdentity": {
      "description": "Information about a guest user identity.",
      "required": [
        "userId",
        "WCToken",
        "WCTrustedToken",
        "personalizationID"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user unique identifier."
        },
        "WCToken": {
          "type": "string",
          "description": "The token used for authentication."
        },
        "WCTrustedToken": {
          "type": "string",
          "description": "The trusted token used for authentication. This token should only be used on encrypted channels."
        },
        "personalizationID": {
          "type": "string",
          "description": "The personalization identifier for the current session."
        }
      }
    },
    "inventoryavailability-inventoryavailability_item": {
      "properties": {
        "unitOfMeasure": {
          "type": "string"
        },
        "availableQuantity": {
          "type": "string",
          "format": "double"
        },
        "physicalStoreName": {
          "type": "string"
        },
        "physicalStoreId": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inventoryavailability-inventoryavailability_item.userDataField"
          }
        },
        "availabilityDateTime": {
          "type": "string"
        },
        "onlineStoreName": {
          "type": "string"
        },
        "onlineStoreId": {
          "type": "string"
        },
        "productId": {
          "type": "string"
        },
        "inventoryStatus": {
          "type": "string"
        }
      }
    },
    "inventoryavailability-inventoryavailability": {
      "properties": {
        "InventoryAvailability": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/inventoryavailability-inventoryavailability_item"
          }
        }
      }
    },
    "inventoryavailability-inventoryavailability_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.LoginIdentityHandler$UserIdentity": {
      "description": "Information about a guest user identity.",
      "required": [
        "userId",
        "WCToken",
        "WCTrustedToken",
        "personalizationID"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user unique identifier."
        },
        "WCToken": {
          "type": "string",
          "description": "The token used for authentication."
        },
        "WCTrustedToken": {
          "type": "string",
          "description": "The trusted token used for authentication. This token should only be used on encrypted channels."
        },
        "personalizationID": {
          "type": "string",
          "description": "The personalization identifier for the current session."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.LoginIdentityHandler$LoginForm": {
      "description": "Information required to authenticate a user.",
      "required": [
        "logonPassword",
        "logonId"
      ],
      "properties": {
        "logonPassword": {
          "type": "string",
          "description": "The logon password."
        },
        "logonId": {
          "type": "string",
          "description": "The logon id."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.LTPAIdentityHandler$UserIdentity": {
      "description": "Information about a guest user identity.",
      "required": [
        "userId",
        "WCToken",
        "WCTrustedToken",
        "personalizationID"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user unique identifier."
        },
        "WCToken": {
          "type": "string",
          "description": "The token used for authentication."
        },
        "WCTrustedToken": {
          "type": "string",
          "description": "The trusted token used for authentication. This token should only be used on encrypted channels."
        },
        "personalizationID": {
          "type": "string",
          "description": "The personalization identifier for the current session."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.LTPAIdentityHandler$LtpaLoginForm": {
      "description": "Information required to authenticate a user using LTPA.",
      "required": [
        "LTPAToken"
      ],
      "properties": {
        "LTPAToken": {
          "type": "string",
          "description": "The LTPA token."
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecGiftItem": {
      "properties": {
        "value": {
          "type": "string",
          "format": "double"
        },
        "uom": {
          "type": "string"
        },
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType"
        },
        "productId": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.paymentInstruction.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification": {
      "required": [
        "maximumQuantity"
      ],
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification.giftItem"
          }
        },
        "maximumQuantity": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification.maximumQuantity"
        }
      }
    },
    "order-orderDetail.rewardOption.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.userData.userDataField"
          }
        }
      }
    },
    "order-orderDetail.adjustment.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.paymentInstruction": {
      "required": [
        "phone1",
        "phone2",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "fax1",
        "fax2",
        "mobilePhone1"
      ],
      "properties": {
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "billing_address_id": {
          "type": "string"
        },
        "phone1Publish": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "refundAllowed": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "paymentRule": {
          "type": "string"
        },
        "paymentTermConditionId": {
          "type": "string"
        },
        "payMethodId": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "piCurrency": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "piAmount": {
          "type": "string",
          "format": "double"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "piDescription": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "minAmount": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "piStatus": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.paymentInstruction.attributes"
          }
        },
        "language": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "maxAmount": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "phone1Type": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "protocolData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.paymentInstruction.protocolData"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.paymentInstruction.userDataField"
          }
        },
        "sequenceNumber": {
          "type": "string",
          "format": "int64"
        },
        "city": {
          "type": "string"
        },
        "phone2Publish": {
          "type": "string"
        },
        "piLanguage": {
          "type": "string"
        },
        "piId": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.userData.userDataField"
          }
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification.giftItem.quantity"
        }
      }
    },
    "order-orderDetail.paymentInstruction.attributes": {
      "required": [
        "attrKey"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrKey": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoiceGiftItem": {
      "properties": {
        "uom": {
          "type": "string"
        },
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PartNumberIdentifierType"
        },
        "productId": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "double"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.paymentInstruction.protocolData": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.totalTaxByTaxCategory": {
      "properties": {
        "value": {
          "type": "string",
          "format": "double"
        },
        "currency": {
          "type": "string"
        },
        "taxCategoryCode": {
          "type": "string"
        }
      }
    },
    "order-orderDetail": {
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.orderItem"
          }
        },
        "totalAdjustmentCurrency": {
          "type": "string"
        },
        "channel": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ChannelType"
        },
        "rewardOption": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption"
          }
        },
        "orderId": {
          "type": "string"
        },
        "locked": {
          "type": "string"
        },
        "placedDate": {
          "type": "string"
        },
        "pysicalStoreId": {
          "type": "string"
        },
        "xstat_": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/java.util.Map$Entry"
          }
        },
        "totalSalesTaxCurrency": {
          "type": "string"
        },
        "financialTransaction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType"
          }
        },
        "adjustmentRequirement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType"
          }
        },
        "cSRComments": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CSRCommentsType"
          }
        },
        "totalShippingChargeCurrency": {
          "type": "string"
        },
        "quoteID": {
          "type": "string"
        },
        "grandTotal": {
          "type": "string",
          "format": "double"
        },
        "requestedShipDate": {
          "type": "string"
        },
        "paymentStatus": {
          "type": "string"
        },
        "externalOrderID": {
          "type": "string"
        },
        "paymentInstruction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.paymentInstruction"
          }
        },
        "buyerApprovalStatus": {
          "type": "string"
        },
        "orderVersion": {
          "type": "string"
        },
        "recordSetComplete": {
          "type": "string"
        },
        "genericTotal": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.GenericTotalType"
          }
        },
        "storeUniqueID": {
          "type": "string"
        },
        "buyerId": {
          "type": "string"
        },
        "totalProductPriceCurrency": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "orgUniqueID": {
          "type": "string"
        },
        "promotionCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.PromotionCodeType"
          }
        },
        "couponCode": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.CouponCodeType"
          }
        },
        "orderTypeCode": {
          "type": "string"
        },
        "totalShippingTax": {
          "type": "string",
          "format": "double"
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        },
        "quoteIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuoteIdentifierType"
        },
        "prepareIndicator": {
          "type": "string"
        },
        "grandTotalCurrency": {
          "type": "string"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "orderDescription": {
          "type": "string"
        },
        "totalAdjustment": {
          "type": "string",
          "format": "double"
        },
        "storeNameIdentifier": {
          "type": "string"
        },
        "orderEditor": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "buyerPONumber": {
          "type": "string"
        },
        "orderStatus": {
          "type": "string"
        },
        "totalSalesTax": {
          "type": "string",
          "format": "double"
        },
        "editable": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.userDataField"
          }
        },
        "totalShippingCharge": {
          "type": "string",
          "format": "double"
        },
        "shipAsComplete": {
          "type": "string"
        },
        "totalShippingTaxCurrency": {
          "type": "string"
        },
        "totalTaxByTaxCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.totalTaxByTaxCategory"
          }
        },
        "orgDistinguishedName": {
          "type": "string"
        },
        "blocked": {
          "type": "string"
        },
        "storeOwnerID": {
          "type": "string"
        },
        "adjustment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.adjustment"
          }
        },
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "comments": {
          "type": "string"
        },
        "parentInfo": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.ParentInfoType"
        },
        "customerOrderNumber": {
          "type": "string"
        },
        "shipModeId": {
          "type": "string"
        },
        "bLockInfo": {
          "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderBLockInfoType"
        },
        "buyerDistinguishedName": {
          "type": "string"
        },
        "totalProductPrice": {
          "type": "string",
          "format": "double"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardOptionIdentifier": {
      "properties": {
        "externalIdentifier": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList"
          }
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.orderItem": {
      "required": [
        "mobilePhone1Country",
        "email1",
        "email2",
        "partNumber",
        "shippingChargeType",
        "phone1",
        "phone2",
        "nickName",
        "fax1",
        "fax2",
        "mobilePhone1"
      ],
      "properties": {
        "primary": {
          "type": "string"
        },
        "shippingCharge": {
          "type": "string",
          "format": "double"
        },
        "personTitle": {
          "type": "string"
        },
        "physicalStoreId": {
          "type": "string"
        },
        "taxByTaxCategory": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.TaxByTaxCategoryType"
          }
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "alternativeCurrencyPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
          }
        },
        "phone1Publish": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        },
        "currency": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "availableDate": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "correlationGroup": {
          "type": "string"
        },
        "shippingTax": {
          "type": "string",
          "format": "double"
        },
        "unitPrice": {
          "type": "string",
          "format": "double"
        },
        "fulfillmentCenterDescription": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.DescriptionType"
        },
        "timeReleased": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "unitQuantity": {
          "type": "string",
          "format": "double"
        },
        "addressId": {
          "type": "string"
        },
        "physicalStoreExternalId": {
          "type": "string"
        },
        "salesTaxCurrency": {
          "type": "string"
        },
        "shippingChargeCurrency": {
          "type": "string"
        },
        "priceOverride": {
          "type": "string"
        },
        "trackingURL": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "lastName": {
          "type": "string"
        },
        "orderItemPrice": {
          "type": "string",
          "format": "double"
        },
        "lastUpdateDate": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "fulfillmentCenterId": {
          "type": "string"
        },
        "shippingTaxCurrency": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.orderItem.attributes"
          }
        },
        "language": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "shippingChargeType": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType"
        },
        "productId": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "adjustment": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.orderItem.adjustment"
          }
        },
        "offerID": {
          "type": "string"
        },
        "shipModeLanguage": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "shipModeId": {
          "type": "string"
        },
        "isExpedited": {
          "type": "string"
        },
        "orderItemId": {
          "type": "string"
        },
        "orderItemComponent": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.OrderItemComponentType"
          }
        },
        "shipModeDescription": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "quantity": {
          "type": "string",
          "format": "double"
        },
        "shipModeCode": {
          "type": "string"
        },
        "shippingCarrierAccountNumber": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "externalOrderItemID": {
          "type": "string"
        },
        "configurationID": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "adjustmentRequirement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.AdjustmentRequirementType"
          }
        },
        "requestedShipDate": {
          "type": "string"
        },
        "shipCarrAccntNum": {
          "type": "string"
        },
        "orderItemInventoryStatus": {
          "type": "string"
        },
        "genericTotal": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.GenericTotalType"
          }
        },
        "zipCode": {
          "type": "string"
        },
        "shipInstruction": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "freeGift": {
          "type": "string"
        },
        "geographicalShippingCode": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "shipTieCode": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "timeShipped": {
          "type": "string"
        },
        "itemAttributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.orderItem.itemAttributes"
          }
        },
        "createDate": {
          "type": "string"
        },
        "contractId": {
          "type": "string"
        },
        "totalAdjustment": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "orderItemStatus": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "fulfillmentCenterOwnerId": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "phone2Type": {
          "type": "string"
        },
        "expectedShipDate": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.orderItem.userDataField"
          }
        },
        "phone2Publish": {
          "type": "string"
        },
        "usableShippingChargePolicy": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.orderItem.usableShippingChargePolicy"
          }
        },
        "orderItemFulfillmentStatus": {
          "type": "string"
        },
        "unitUom": {
          "type": "string"
        },
        "shippingChargePolicyID": {
          "type": "string"
        },
        "UOM": {
          "type": "string"
        },
        "comments": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "carrier": {
          "type": "string"
        },
        "fulfillmentCenterName": {
          "type": "string"
        },
        "salesTax": {
          "type": "string",
          "format": "double"
        }
      }
    },
    "order-orderItemConfiguration": {
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderItemConfiguration.orderItem"
          }
        },
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "string"
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "order-orderDetail.rewardOption.amount": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSet.giftItem.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.orderItem.adjustment.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderItemConfiguration.orderItem": {
      "properties": {
        "orderItemConfiguration": {
          "type": "string"
        },
        "orderItemId": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.orderItem.usableShippingChargePolicy": {
      "required": [
        "type",
        "name"
      ],
      "properties": {
        "type": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "storeId": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment": {
      "properties": {
        "usage": {
          "type": "string"
        },
        "calculationCodeID": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.calculationCodeID"
        },
        "displayLevel": {
          "type": "string"
        },
        "isPromotionCodeRequired": {
          "type": "boolean"
        },
        "userData": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.userData"
        },
        "amount": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.amount"
        },
        "description": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.description"
        },
        "code": {
          "type": "string"
        },
        "promotionType": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption": {
      "required": [
        "rewardOptionIdentifier"
      ],
      "properties": {
        "rewardSpecGiftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecGiftItem"
          }
        },
        "rewardOptionIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardOptionIdentifier"
        },
        "adjustmentDescription": {
          "type": "string"
        },
        "giftSetSpecification": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification"
        },
        "giftSet": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSet"
        },
        "rewardSpecification": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification"
        },
        "userData": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.userData"
        },
        "amount": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.amount"
        },
        "adjustmentCurrency": {
          "type": "string"
        },
        "usage": {
          "type": "string"
        },
        "displayLevel": {
          "type": "string"
        },
        "isPromotionCodeRequired": {
          "type": "boolean"
        },
        "adjustmentAmount": {
          "type": "string",
          "format": "double"
        },
        "rewardSpecMaxQuantity": {
          "type": "string",
          "format": "double"
        },
        "adjustmentLanguage": {
          "type": "string"
        },
        "rewardOptionExternalId": {
          "type": "string"
        },
        "adjustment": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment"
        },
        "code": {
          "type": "string"
        },
        "rewardSpecMaxQuantityUom": {
          "type": "string"
        },
        "adjustmentDisplayLevel": {
          "type": "string"
        },
        "rewardChoice": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice"
        },
        "calculationCodeID": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.calculationCodeID"
        },
        "rewardChoiceGiftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoiceGiftItem"
          }
        },
        "adjustmentUsage": {
          "type": "string"
        },
        "adjustmentCode": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.description"
        },
        "promotionType": {
          "type": "string"
        },
        "rewardOptionId": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.calculationCodeID": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.calculationCodeID.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.amount": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.maximumQuantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.orderItem.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.calculationCodeID.calculationCodeExternalIdentifier": {
      "properties": {
        "calculationUsageID": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.calculationCodeID.calculationCodeExternalIdentifier.storeIdentifier"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSet": {
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.giftSet.giftItem"
          }
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification": {
      "properties": {
        "giftSetSpecification": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification"
        },
        "userData": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.userData"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.billingAddressDataBean": {
      "properties": {
        "addressId": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification": {
      "required": [
        "maximumQuantity"
      ],
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem"
          }
        },
        "maximumQuantity": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.maximumQuantity"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.userData.userDataField"
          }
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice": {
      "properties": {
        "giftSet": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.giftSet"
        },
        "userData": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.userData"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.calculationCodeID": {
      "properties": {
        "calculationCodeExternalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.calculationCodeID.calculationCodeExternalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.uniqueShippingAddresses": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "billingCode": {
          "type": "string"
        },
        "addressField1": {
          "type": "string"
        },
        "storeDirectory": {
          "type": "string"
        },
        "addressField2": {
          "type": "string"
        },
        "packageSuppression": {
          "type": "string"
        },
        "addressField3": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "createdTimestamp": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "billingCodeType": {
          "type": "string"
        },
        "dataBeanKeyAddressId": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "publishPhone1": {
          "type": "string"
        },
        "lastCreate": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "publishPhone2": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "isSelfAddress": {
          "type": "boolean"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSet.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSet.giftItem.quantity"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.quantity"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.paymentInfo": {},
    "order-orderDetail.orderItem.itemAttributes": {
      "required": [
        "attrName"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.orderItemDataBeans": {
      "properties": {
        "shippingMode": {
          "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.orderItemDataBeans.shippingMode"
        },
        "shippingModeId": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem": {
      "properties": {
        "catalogEntryIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.catalogEntryIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardSpecification.giftSetSpecification.giftItem.quantity"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.giftSet": {
      "properties": {
        "giftItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem"
          }
        }
      }
    },
    "order-orderDetail.orderItem.attributes": {
      "required": [
        "attrKey"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrKey": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.allowableShippingAddress": {
      "properties": {
        "addressId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.orderItemDataBeans.shippingMode": {
      "properties": {
        "carrier": {
          "type": "string"
        },
        "shippingModeId": {
          "type": "integer",
          "format": "int32"
        },
        "code": {
          "type": "string"
        },
        "storeEntityId": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "order-orderDetail.adjustment": {
      "properties": {
        "currency": {
          "type": "string"
        },
        "usage": {
          "type": "string"
        },
        "displayLevel": {
          "type": "string"
        },
        "descriptionLanguage": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.adjustment.userDataField"
          }
        },
        "amount": {
          "type": "string",
          "format": "double"
        },
        "description": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList": {
      "properties": {
        "uniqueShippingAddresses": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.uniqueShippingAddresses"
          }
        },
        "billingAddressDataBean": {
          "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.billingAddressDataBean"
        },
        "allowableShippingAddress": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.allowableShippingAddress"
          }
        },
        "paymentInfo": {
          "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.paymentInfo"
        },
        "currentAddressDataBean": {
          "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.currentAddressDataBean"
        },
        "orderItemDataBeans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.orderItemDataBeans"
          }
        }
      }
    },
    "order-orderDetail.rewardOption.rewardSpecification.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.order.beans.OrderListDataBean_IBM_Summary.resultList.currentAddressDataBean": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "billingCode": {
          "type": "string"
        },
        "addressField1": {
          "type": "string"
        },
        "storeDirectory": {
          "type": "string"
        },
        "addressField2": {
          "type": "string"
        },
        "packageSuppression": {
          "type": "string"
        },
        "addressField3": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "createdTimestamp": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "billingCodeType": {
          "type": "string"
        },
        "dataBeanKeyAddressId": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "publishPhone1": {
          "type": "string"
        },
        "lastCreate": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "publishPhone2": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "isSelfAddress": {
          "type": "boolean"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.orderItem.adjustment": {
      "properties": {
        "currency": {
          "type": "string"
        },
        "usage": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.orderItem.adjustment.userDataField"
          }
        },
        "language": {
          "type": "string"
        },
        "amount": {
          "type": "string",
          "format": "double"
        },
        "description": {
          "type": "string"
        },
        "code": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSetSpecification.maximumQuantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.rewardChoice.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.description": {
      "properties": {
        "value": {
          "type": "string"
        },
        "language": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.giftSet.giftItem.catalogEntryIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "order-orderDetail.rewardOption.adjustment.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/order-orderDetail.rewardOption.adjustment.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Summary.addressBook": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.usermanagement.commands.MemberRoleAssignCmd": {},
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityIdentity": {
      "description": "Information about an organization entity identity.",
      "required": [
        "orgEntityId",
        "addressId"
      ],
      "properties": {
        "orgEntityId": {
          "type": "string",
          "description": "The organization entity identifier."
        },
        "addressId": {
          "type": "string",
          "description": "The address identifier of the organization entity."
        }
      }
    },
    "com.ibm.commerce.usermanagement.commands.MemberRoleUnassignCmd": {},
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Details.contactInfo": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "publishPhone1": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "publishPhone2": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Details": {
      "properties": {
        "orgEntityType": {
          "type": "string"
        },
        "isBusinessEntity": {
          "type": "boolean"
        },
        "administratorFirstName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "preferredDelivery": {
          "type": "string"
        },
        "businessCategory": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "parentMemberId": {
          "type": "string"
        },
        "taxPayerId": {
          "type": "string"
        },
        "ownerMemberId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "administratorMiddleName": {
          "type": "string"
        },
        "contactInfo": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Details.contactInfo"
        },
        "administratorLastName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "owner": {
          "type": "integer",
          "format": "int64"
        },
        "legalId": {
          "type": "string"
        },
        "organizationDisplayName": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "addressBook": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Details.addressBook"
          }
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Short_Summary.contactInfo": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Short_Summary": {
      "properties": {
        "state": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "organizationDisplayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "contactInfo": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Short_Summary.contactInfo"
        },
        "businessCategory": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Summary.organizationDataBeans": {
      "properties": {
        "orgEntityType": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "legalId": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "businessCategory": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "parentMemberId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$UpdateApprovalGroupsResponse": {
      "description": "Information about an organization entity identity.",
      "required": [
        "orgEntityId",
        "segmentId",
        "URL"
      ],
      "properties": {
        "orgEntityId": {
          "type": "string",
          "description": "The organization entity identifier."
        },
        "catalogId": {
          "type": "string",
          "description": "The catalog identifier"
        },
        "requesttype": {
          "type": "string",
          "description": "The request type ie (ajax)"
        },
        "storeId": {
          "type": "string",
          "description": "The current store identifier"
        },
        "segmentId": {
          "type": "string",
          "description": "The ApprovalGroup identifier for a specific organization."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$MemberRoleAssignRequest": {
      "description": "Request of MemberRoleAssignCmd.",
      "required": [
        "orgEntityIdi",
        "roleIdi"
      ],
      "properties": {
        "orgEntityIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The organization entity identifier."
        },
        "roleIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The role identifier. The roleId parameter takes the forms like roleId, roleId1, roleId2..., the corresponding orgEntityId should be orgEntityId, orgEntiyId1, orgEntityId2..."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        }
      }
    },
    "com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Assigned_Roles_Details": {
      "properties": {
        "memberId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "rolesWithDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Assigned_Roles_Details.rolesWithDetails"
          }
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details": {
      "properties": {
        "pageSize": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "organizationDataBeans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details.organizationDataBeans"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Short_Summary": {
      "properties": {
        "pageSize": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "organizationDataBeans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Short_Summary.organizationDataBeans"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.user.beans.RoleAssignmentDataBean_IBM_Roles_To_Assign_Details.roleDataBeans": {
      "properties": {
        "roleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$MemberRoleUnassignRequest": {
      "description": "Request of MemberRoleUnassignCmd.",
      "required": [
        "orgEntityIdi",
        "roleIdi"
      ],
      "properties": {
        "orgEntityIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The organization entity identifier."
        },
        "roleIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The role identifier. The roleId parameter takes the forms like roleId, roleId1, roleId2..., the corresponding orgEntityId should be orgEntityId, orgEntiyId1, orgEntityId2..."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Details.addressBook": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "officeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "publishPhone1": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "publishPhone2": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$BuyerRegistrationAddRequest": {
      "description": "Request of BuyerRegistrationAddCmd.",
      "properties": {
        "org_": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameters from OrgEntityAdd with \"org_\"."
        },
        "usr_": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Parameters from UserRegistrationAdd with \"usr_\"."
        }
      }
    },
    "com.ibm.commerce.user.beans.RoleAssignmentDataBean_IBM_Roles_To_Assign_Details": {
      "properties": {
        "roleDataBeans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.RoleAssignmentDataBean_IBM_Roles_To_Assign_Details.roleDataBeans"
          }
        }
      }
    },
    "com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Org_Entity_Details.parent": {
      "properties": {
        "orgEntityType": {
          "type": "string"
        },
        "orgEntityId": {
          "type": "string"
        },
        "administratorMiddleName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "administratorFirstName": {
          "type": "string"
        },
        "administratorLastName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        },
        "orgEntityName": {
          "type": "string"
        },
        "legalId": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "businessCategory": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Org_Entity_Details": {
      "properties": {
        "orgEntityType": {
          "type": "string"
        },
        "orgEntityId": {
          "type": "string"
        },
        "parent": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Org_Entity_Details.parent"
        },
        "administratorMiddleName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "administratorFirstName": {
          "type": "string"
        },
        "administratorLastName": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        },
        "orgEntityName": {
          "type": "string"
        },
        "legalId": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "orgProperties": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Org_Entity_Details.orgProperties"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "businessCategory": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityBuyerIdentifier": {
      "description": "Response of registering an organization entity and a buyer.",
      "required": [
        "orgEntityId",
        "userId"
      ],
      "properties": {
        "orgEntityId": {
          "type": "string",
          "description": "The organization entity identifier."
        },
        "userId": {
          "type": "string",
          "description": "The buyer identifier."
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Details.organizationDataBeans": {
      "properties": {
        "orgEntityField3": {
          "type": "string"
        },
        "orgEntityType": {
          "type": "string"
        },
        "taxPayerId": {
          "type": "string"
        },
        "ownerMemberId": {
          "type": "string"
        },
        "administratorMiddleName": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "administratorFirstName": {
          "type": "string"
        },
        "administratorLastName": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "owner": {
          "type": "integer",
          "format": "int64"
        },
        "legalId": {
          "type": "string"
        },
        "preferredDelivery": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "organizationName": {
          "type": "string"
        },
        "businessCategory": {
          "type": "string"
        },
        "orgEntityField1": {
          "type": "string"
        },
        "parentMemberId": {
          "type": "string"
        },
        "orgEntityField2": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Assigned_Roles_Details.rolesWithDetails": {
      "properties": {
        "roleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Short_Summary.organizationDataBeans": {
      "properties": {
        "state": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "memberId": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Org_Entity_Details.orgProperties": {},
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Summary.contactInfo": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "stateProvDisplayName": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "countryDisplayName": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Summary": {
      "properties": {
        "state": {
          "type": "string"
        },
        "status": {
          "type": "integer",
          "format": "int32"
        },
        "organizationDisplayName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "addressBook": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Summary.addressBook"
          }
        },
        "organizationName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "contactInfo": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationDataBean_IBM_Organization_Summary.contactInfo"
        },
        "businessCategory": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityUpdateRequest": {
      "description": "Request of OrgEntityUpdateCmd.",
      "required": [
        "orgEntityId"
      ],
      "properties": {
        "middleName": {
          "type": "string",
          "description": "The middle name of the registrant."
        },
        "orgEntityField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "lastName": {
          "type": "string",
          "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
        },
        "organizationUnitName": {
          "type": "string",
          "description": "The name of the unit within the organization that the registrant represents."
        },
        "phone1": {
          "type": "string",
          "description": "The registrant's primary phone number."
        },
        "personTitle": {
          "type": "string",
          "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
        },
        "phone2": {
          "type": "string",
          "description": "The registrant's secondary phone number."
        },
        "billingCode": {
          "type": "string",
          "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
        },
        "addressField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "addressField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "packageSuppression": {
          "type": "string",
          "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database"
        },
        "addressField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "administratorFirstName": {
          "type": "string",
          "description": "The first name of the administrator."
        },
        "addressType": {
          "type": "string",
          "description": "Type of address, valid values are configurable by using a properties file: S (shipto), B (billto), and SB (both shipto and billto). A single address may be of different types. If a properties file cannot be found, a default of SB will be used."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        },
        "shippingGeoCode": {
          "type": "string",
          "description": "A shipping code based on geographical region, especially useful with tax software."
        },
        "state": {
          "type": "string",
          "description": "The name of the state, province, or equivalent where the registrant resides."
        },
        "orgEntityName": {
          "type": "string",
          "description": "The name of the organization or organizational unit."
        },
        "preferredDelivery": {
          "type": "string",
          "description": "The registrant's preferred mode of delivery."
        },
        "email1": {
          "type": "string",
          "description": "The registrant's primary e-mail or Web address."
        },
        "email2": {
          "type": "string",
          "description": "The registrant's secondary e-mail or Web address."
        },
        "country": {
          "type": "string",
          "description": "The name of the country or region where the registrant resides."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the registrant."
        },
        "phone1Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "phone2Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "organizationName": {
          "type": "string",
          "description": "The name of the organization that the registrant represents."
        },
        "businessCategory": {
          "type": "string",
          "description": "Describes the kind of business performed by an organization or organizational unit."
        },
        "customMemberAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "You can manage custom member attributes (MBRATTRVAL table) for this organization using the following syntax: &attributeName_storeId_action_number=value."
        },
        "orgEntityId": {
          "type": "string",
          "description": "The ID for this organization or organizational unit."
        },
        "billingCodeType": {
          "type": "string",
          "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
        },
        "taxPayerId": {
          "type": "string",
          "description": "The ID for the tax payer."
        },
        "city": {
          "type": "string",
          "description": "The name of the city where the registrant resides."
        },
        "administratorMiddleName": {
          "type": "string",
          "description": "The middle name of the administrator."
        },
        "bestCallingTime": {
          "type": "string",
          "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
        },
        "zipCode": {
          "type": "string",
          "description": "The ZIP or postal code of the registrant's address."
        },
        "administratorLastName": {
          "type": "string",
          "description": "The last name of the administrator."
        },
        "publishPhone1": {
          "type": "string",
          "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
        },
        "taxGeoCode": {
          "type": "string",
          "description": "A tax code based on geographical region, especially useful with tax software."
        },
        "publishPhone2": {
          "type": "string",
          "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
        },
        "fax1": {
          "type": "string",
          "description": "The registrant's primary facsimile number."
        },
        "legalId": {
          "type": "string",
          "description": "Registered organization identifier; may be null for an organizational unit."
        },
        "fax2": {
          "type": "string",
          "description": "The registrant's secondary facsimile number."
        },
        "description": {
          "type": "string",
          "description": "A description of the registrant."
        },
        "address1": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "orgEntityField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "address2": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "orgEntityField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "address3": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$UpdateApprovalGroups": {
      "description": "Information about an organization entity identity.",
      "required": [
        "orgEntityId",
        "segmentId",
        "URL"
      ],
      "properties": {
        "orgEntityId": {
          "type": "string",
          "description": "The organization entity identifier."
        },
        "segmentId": {
          "type": "string",
          "description": "The ApprovalGroup identifier for a specific organization."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        }
      }
    },
    "com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details": {
      "properties": {
        "memberId": {
          "type": "string"
        },
        "parentRolesWithDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details.parentRolesWithDetails"
          }
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.OrganizationHandler$OrgEntityAddRequest": {
      "description": "Request of OrgEntityAddCmd.",
      "required": [
        "orgEntityName",
        "parentMemberId",
        "orgEntityType",
        "distinguishedName"
      ],
      "properties": {
        "organizationUnitName": {
          "type": "string",
          "description": "The name of the unit within the organization that the registrant represents."
        },
        "personTitle": {
          "type": "string",
          "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
        },
        "phone1": {
          "type": "string",
          "description": "The registrant's primary phone number."
        },
        "phone2": {
          "type": "string",
          "description": "The registrant's secondary phone number."
        },
        "billingCode": {
          "type": "string",
          "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
        },
        "addressField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "addressField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "addressField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "packageSuppression": {
          "type": "string",
          "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database"
        },
        "administratorFirstName": {
          "type": "string",
          "description": "The first name of the administrator."
        },
        "state": {
          "type": "string",
          "description": "The name of the state, province, or equivalent where the registrant resides."
        },
        "orgEntityName": {
          "type": "string",
          "description": "The name of the organization or organizational unit. Leading and trailing spaces will be trimmed. When the system is configured with LDAP, the following characters are not allowed when the orgEntityName is used to construct the distinguished name: 1. The # character occurring at the beginning of orgEntityName. 2. Any of the following characters: = , + \" \\ < > ;."
        },
        "email1": {
          "type": "string",
          "description": "The registrant's primary e-mail or Web address."
        },
        "preferredDelivery": {
          "type": "string",
          "description": "The registrant's preferred mode of delivery."
        },
        "country": {
          "type": "string",
          "description": "The name of the country or region where the registrant resides."
        },
        "email2": {
          "type": "string",
          "description": "The registrant's secondary e-mail or Web address."
        },
        "parentMemberId": {
          "type": "string",
          "description": "Required if orgEntityType equals 'OU': The member ID of the parent organizational entity where the new organizational entity will be added. For an organization (orgEntityType=O), this parameter is not mandatory; it defaults to Root Organization."
        },
        "customMemberAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "You can manage custom member attributes (MBRATTRVAL table) for this organization using the following syntax: &attributeName_storeId_action_number=value."
        },
        "taxPayerId": {
          "type": "string",
          "description": "The ID for the tax payer."
        },
        "bestCallingTime": {
          "type": "string",
          "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
        },
        "administratorLastName": {
          "type": "string",
          "description": "The last name of the administrator."
        },
        "zipCode": {
          "type": "string",
          "description": "The ZIP or postal code of the registrant's address."
        },
        "taxGeoCode": {
          "type": "string",
          "description": "A tax code based on geographical region, especially useful with tax software."
        },
        "legalId": {
          "type": "string",
          "description": "Registered organization identifier; may be null for an organizational unit."
        },
        "fax1": {
          "type": "string",
          "description": "The registrant's primary facsimile number."
        },
        "fax2": {
          "type": "string",
          "description": "The registrant's secondary facsimile number."
        },
        "address1": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "address2": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "orgEntityField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "address3": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "orgEntityField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "orgEntityField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "middleName": {
          "type": "string",
          "description": "The middle name of the registrant."
        },
        "orgEntityType": {
          "type": "string",
          "description": "The type of the organizational entity being added. O - Organization; OU - Organizational Unit."
        },
        "lastName": {
          "type": "string",
          "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
        },
        "addressType": {
          "type": "string",
          "description": "Type of address, valid values are configurable by using a properties file: S (shipto), B (billto), and SB (both shipto and billto). A single address may be of different types. If a properties file cannot be found, a default of SB will be used."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        },
        "shippingGeoCode": {
          "type": "string",
          "description": "A shipping code based on geographical region, especially useful with tax software."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the registrant."
        },
        "phone1Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "businessCategory": {
          "type": "string",
          "description": "Describes the kind of business performed by an organization or organizational unit."
        },
        "organizationName": {
          "type": "string",
          "description": "The name of the organization that the registrant represents."
        },
        "phone2Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "billingCodeType": {
          "type": "string",
          "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
        },
        "city": {
          "type": "string",
          "description": "The name of the city where the registrant resides."
        },
        "administratorMiddleName": {
          "type": "string",
          "description": "The middle name of the administrator."
        },
        "distinguishedName": {
          "type": "string",
          "description": "DN of the organization or organizational unit, for LDAP use."
        },
        "publishPhone1": {
          "type": "string",
          "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
        },
        "publishPhone2": {
          "type": "string",
          "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
        },
        "description": {
          "type": "string",
          "description": "A description of the registrant."
        }
      }
    },
    "com.ibm.commerce.user.beans.OrgEntityDataBean_IBM_Parent_Assigned_Roles_Details.parentRolesWithDetails": {
      "properties": {
        "roleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Summary": {
      "properties": {
        "pageSize": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "organizationDataBeans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.OrganizationSearchDataBean_IBM_Organization_List_Summary.organizationDataBeans"
          }
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "page-CatalogGroupView.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "page-CatalogEntryView.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "page-IBM_Store_Details_item": {
      "properties": {
        "pageGroup": {
          "type": "string"
        },
        "metaKeyword": {
          "type": "string"
        },
        "deletable": {
          "type": "boolean"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page-IBM_Store_Details_item.userDataField"
          }
        },
        "metaDescription": {
          "type": "string"
        },
        "urlConfigurable": {
          "type": "boolean"
        },
        "title": {
          "type": "string"
        },
        "pageId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "nameEditable": {
          "type": "boolean"
        },
        "fullImageAltDescription": {
          "type": "string"
        }
      }
    },
    "page-IBM_Store_Details_SEO": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page-CatalogGroupView"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "page-CatalogGroupView": {
      "properties": {
        "metaKeyword": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page-CatalogGroupView.userDataField"
          }
        },
        "metaDescription": {
          "type": "string"
        },
        "categoryIdentifier": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "categoryId": {
          "type": "string"
        },
        "fullImageAltDescription": {
          "type": "string"
        }
      }
    },
    "page-IBM_Store_Details": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page-IBM_Store_Details_item"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "page-CatalogEntryView": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "metaKeyword": {
          "type": "string"
        },
        "catalogEntryId": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page-CatalogEntryView.userDataField"
          }
        },
        "metaDescription": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "fullImageAltDescription": {
          "type": "string"
        }
      }
    },
    "page-IBM_Store_Summary_SEO": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page-CatalogEntryView"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "page-IBM_Store_Details_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "page_design-Widget": {
      "properties": {
        "childWidget": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-Widget"
          }
        },
        "widgetDefinitionIdentifier": {
          "type": "string"
        },
        "widgetDefinitionId": {
          "type": "string"
        },
        "widgetDefinitionStoreId": {
          "type": "string"
        },
        "widgetSequence": {
          "type": "number",
          "format": "double"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-Widget.userDataField"
          }
        },
        "widgetProperty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-WidgetProperty"
          }
        },
        "name": {
          "type": "string"
        },
        "slot": {
          "$ref": "#/definitions/page_design-Slot"
        },
        "widgetId": {
          "type": "string"
        }
      }
    },
    "page_design-IBM_Store_Summary_item": {
      "properties": {
        "pageGroup": {
          "type": "string"
        },
        "deviceClass": {
          "type": "string"
        },
        "layoutName": {
          "type": "string"
        },
        "layoutId": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-IBM_Store_Summary_item.userDataField"
          }
        }
      }
    },
    "page_design-IBM_Store_Details_item": {
      "properties": {
        "pageGroup": {
          "type": "string"
        },
        "deviceClass": {
          "type": "string"
        },
        "widget": {
          "$ref": "#/definitions/page_design-Widget"
        },
        "layoutId": {
          "type": "string"
        },
        "layoutName": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-IBM_Store_Details_item.userDataField"
          }
        },
        "objectIdentifier": {
          "type": "string"
        },
        "previewReport": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "page_design-WidgetProperty": {
      "properties": {
        "value": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-WidgetProperty.userDataField"
          }
        },
        "name": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "sequenceOrder": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "page_design-IBM_Store_Details": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-IBM_Store_Details_item"
          }
        }
      }
    },
    "page_design-Widget.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "page_design-IBM_Store_Summary_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "page_design-Slot": {
      "properties": {
        "internalSlotId": {
          "type": "string"
        }
      }
    },
    "page_design-IBM_Store_Summary": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/page_design-IBM_Store_Summary_item"
          }
        }
      }
    },
    "page_design-IBM_Store_Details_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "page_design-WidgetProperty.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-payment_instruction.paymentInstruction.protocolData": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "cart-payment_instruction.paymentInstruction.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-payment_instruction": {
      "properties": {
        "financialTransaction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.order.facade.datatypes.FinancialTransactionType"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-payment_instruction.userDataField"
          }
        },
        "paymentStatus": {
          "type": "string"
        },
        "paymentInstruction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-payment_instruction.paymentInstruction"
          }
        },
        "orderId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.edp.beans.EDPSensitiveDataMaskHelperDataBean_IBM_sensitiveDataMaskByPlainString": {
      "properties": {
        "plainLength": {
          "type": "integer",
          "format": "int32"
        },
        "maskChar": {
          "type": "string"
        },
        "maskedString": {
          "type": "string"
        }
      }
    },
    "cart-payment_instruction.paymentInstruction": {
      "required": [
        "phone1",
        "phone2",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "fax1",
        "fax2",
        "mobilePhone1"
      ],
      "properties": {
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "billing_address_id": {
          "type": "string"
        },
        "phone1Publish": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "refundAllowed": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "paymentRule": {
          "type": "string"
        },
        "paymentTermConditionId": {
          "type": "string"
        },
        "priority": {
          "type": "string",
          "format": "int64"
        },
        "payMethodId": {
          "type": "string"
        },
        "piCurrency": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "piAmount": {
          "type": "string",
          "format": "double"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "piDescription": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "minAmount": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "piStatus": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-payment_instruction.paymentInstruction.attributes"
          }
        },
        "language": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "maxAmount": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "phone1Type": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "organizationName": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "protocolData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-payment_instruction.paymentInstruction.protocolData"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-payment_instruction.paymentInstruction.userDataField"
          }
        },
        "sequenceNumber": {
          "type": "string",
          "format": "int64"
        },
        "city": {
          "type": "string"
        },
        "phone2Publish": {
          "type": "string"
        },
        "piLanguage": {
          "type": "string"
        },
        "piId": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.PaymentInstructionHandler$PaymentInstructionList$PaymentInstruction": {
      "description": "Payment instruction.",
      "required": [
        "piId"
      ],
      "properties": {
        "piId": {
          "type": "string",
          "description": "Payment instruction ID."
        }
      }
    },
    "cart-payment_instruction.paymentInstruction.attributes": {
      "required": [
        "attrKey"
      ],
      "properties": {
        "attrValue": {
          "type": "string"
        },
        "attrKey": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.PaymentInstructionHandler$PaymentInstructionList": {
      "description": "Payment instruction list.",
      "required": [
        "paymentInstruction",
        "orderId"
      ],
      "properties": {
        "paymentInstruction": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.PaymentInstructionHandler$PaymentInstructionList$PaymentInstruction"
          },
          "description": "List of payment instructions."
        },
        "orderId": {
          "type": "string",
          "description": "Order identifier."
        }
      }
    },
    "cart-payment_instruction.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "person-person.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userProfile": {
      "properties": {
        "receiveSMSNotification": {
          "type": "string"
        },
        "taxPayerId": {
          "type": "string"
        },
        "preferredDelivery": {
          "type": "string"
        },
        "preferredCommunication": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "preferredMeasure": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserDisplayDataBean_IBM_User_Display_Details": {
      "properties": {
        "lastSession": {
          "type": "string"
        },
        "registrationUpdate": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "parentOrgName": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "employeeType": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "dn": {
          "type": "string"
        },
        "manager": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "logonPasswordVerify": {
          "type": "string"
        },
        "secretary": {
          "type": "string"
        },
        "registration": {
          "type": "string"
        },
        "departmentNumber": {
          "type": "string"
        },
        "logonId": {
          "type": "string"
        },
        "logonPassword": {
          "type": "string"
        },
        "parentMemberId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_All.orgIdRoleDataBeans": {},
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Details.demographics": {
      "properties": {
        "gender": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "age": {
          "type": "string"
        }
      }
    },
    "person-person.attributes": {
      "required": [
        "contactInfoAttrKey",
        "pProfileAttrKey",
        "bProfileAttrKey"
      ],
      "properties": {
        "contactInfoAttrKey": {
          "type": "string"
        },
        "contactInfoAttrValue": {
          "type": "string"
        },
        "pProfileAttrKey": {
          "type": "string"
        },
        "pProfileAttrValue": {
          "type": "string"
        },
        "bProfileAttrKey": {
          "type": "string"
        },
        "bProfileAttrValue": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans": {
      "properties": {
        "lastName": {
          "type": "string"
        },
        "profileType": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "userRegistry": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userRegistry"
        },
        "businessProfile": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.businessProfile"
        },
        "displayName": {
          "type": "string"
        },
        "demographics": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.demographics"
        },
        "distinguishedName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "preferredCurrency": {
          "type": "string"
        },
        "preferredLanguageId": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "roles": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int32"
          }
        },
        "registerType": {
          "type": "string"
        },
        "userProfile": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userProfile"
        },
        "logonId": {
          "type": "string"
        },
        "parentMemberId": {
          "type": "string"
        },
        "personalizationId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_In_Orgs_I_Can_Admin.orgIdRoleDataBeans": {},
    "com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_email": {
      "properties": {
        "userReceive": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_All": {
      "properties": {
        "orgIdRoleDataBeans": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_All.orgIdRoleDataBeans"
        }
      }
    },
    "com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_all": {
      "properties": {
        "userReceiveSMS": {
          "type": "boolean"
        },
        "userReceive": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationUpdateRequest": {
      "description": "Request of UserRegistrationUpdateCmd.",
      "properties": {
        "demographicField5": {
          "type": "string",
          "description": "Customizable field for demographic information; a field of 254 characters."
        },
        "receiveSMSNotification": {
          "type": "string",
          "description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default)."
        },
        "challengeAnswer": {
          "type": "string",
          "description": "Answer to the challenge question."
        },
        "demographicField6": {
          "type": "string",
          "description": "Customizable field for demographic information; an integer field."
        },
        "organizationUnitName": {
          "type": "string",
          "description": "The name of the unit within the organization that the registrant represents."
        },
        "demographicField7": {
          "type": "string",
          "description": "Customizable field for demographic information; a field varchar, length 6."
        },
        "phone1": {
          "type": "string",
          "description": "The registrant's primary phone number."
        },
        "personTitle": {
          "type": "string",
          "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
        },
        "phone2": {
          "type": "string",
          "description": "The registrant's secondary phone number."
        },
        "maritalStatus": {
          "type": "string",
          "description": "The registrant's marital statu."
        },
        "billingCode": {
          "type": "string",
          "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
        },
        "employeeType": {
          "type": "string",
          "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
        },
        "addressField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "addressField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "packageSuppression": {
          "type": "string",
          "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database"
        },
        "addressField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "state": {
          "type": "string",
          "description": "The name of the state, province, or equivalent where the registrant resides."
        },
        "mobilePhone1Country": {
          "type": "string",
          "description": "The country code used for the registrant's mobile phone number, for example, CA for Canada."
        },
        "email1": {
          "type": "string",
          "description": "The registrant's primary e-mail or Web address."
        },
        "preferredDelivery": {
          "type": "string",
          "description": "The registrant's preferred mode of delivery."
        },
        "email2": {
          "type": "string",
          "description": "The registrant's secondary e-mail or Web address."
        },
        "country": {
          "type": "string",
          "description": "The name of the country or region where the registrant resides."
        },
        "officeAddress": {
          "type": "string",
          "description": "The internal address (for example, mail stop)."
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone in which the registrant does business (report as GMT +/- hours)."
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01."
        },
        "preferredMeasure": {
          "type": "string",
          "description": "The registrant's preferred unit of measure."
        },
        "logonId": {
          "type": "string",
          "description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID)."
        },
        "customMemberAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: &attributeName_storeId_action_number=value."
        },
        "userField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "userField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "userField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "taxPayerId": {
          "type": "string",
          "description": "A string used to identify the user for taxation, especially useful with tax software."
        },
        "companyName": {
          "type": "string",
          "description": "The company name of the organization that the registrant represents, obtained when filling in demographic information."
        },
        "income": {
          "type": "string",
          "description": "The registrant's annual incom."
        },
        "bestCallingTime": {
          "type": "string",
          "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
        },
        "manager": {
          "type": "string",
          "description": "The name of the registrant's manager."
        },
        "zipCode": {
          "type": "string",
          "description": "The ZIP or postal code of the registrant's address."
        },
        "organizationId": {
          "type": "string",
          "description": "The identifier of the registrant's company."
        },
        "photo": {
          "type": "string",
          "description": "URL or path to a photo of the registrant."
        },
        "preferredCurrency": {
          "type": "string",
          "description": "The registrant's preferred currency for transactions."
        },
        "taxGeoCode": {
          "type": "string",
          "description": "A tax code based on geographical region, especially useful with tax software."
        },
        "fax1": {
          "type": "string",
          "description": "The registrant's primary facsimile number."
        },
        "fax2": {
          "type": "string",
          "description": "The registrant's secondary facsimile number."
        },
        "alternateId": {
          "type": "string",
          "description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant.."
        },
        "secretary": {
          "type": "string",
          "description": "The name of the registrant's secretary."
        },
        "departmentNumber": {
          "type": "string",
          "description": "The department identifier for the registrant."
        },
        "address1": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "address2": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "address3": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "middleName": {
          "type": "string",
          "description": "The middle name of the registrant."
        },
        "lastName": {
          "type": "string",
          "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
        },
        "gender": {
          "type": "string",
          "description": "The registrant's gender."
        },
        "mobilePhone1": {
          "type": "string",
          "description": "The registrant's mobile phone number used for SMS, for example, 4161235555."
        },
        "addressType": {
          "type": "string",
          "description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.)."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        },
        "shippingGeoCode": {
          "type": "string",
          "description": "A shipping code based on geographical region, especially useful with tax software."
        },
        "organizationUnitId": {
          "type": "string",
          "description": "The identifier of the registrant's organizational unit."
        },
        "preferredCommunication": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2."
        },
        "incomeCurrency": {
          "type": "string",
          "description": "The currency in which the registrant's income is paid."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the registrant."
        },
        "phone1Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "phone2Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "organizationName": {
          "type": "string",
          "description": "The name of the organization that the registrant represents."
        },
        "logonPassword": {
          "type": "string",
          "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server."
        },
        "household": {
          "type": "string",
          "description": "The number of people in the registrant's household; the default is 1."
        },
        "billingCodeType": {
          "type": "string",
          "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
        },
        "employeeId": {
          "type": "string",
          "description": "The registrant's ID with his or her employer."
        },
        "challengeQuestion": {
          "type": "string",
          "description": "Challenge question for verbal confirmation of the customer's identity."
        },
        "city": {
          "type": "string",
          "description": "The name of the city where the registrant resides."
        },
        "orderBefore": {
          "type": "string",
          "description": "Whether the registrant has previously placed an order. This value is supplied by the registrant."
        },
        "hobbies": {
          "type": "string",
          "description": "The registrant's hobbies."
        },
        "publishPhone1": {
          "type": "string",
          "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
        },
        "publishPhone2": {
          "type": "string",
          "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
        },
        "userProfileField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "receiveSMS": {
          "type": "string",
          "description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default)."
        },
        "userProfileField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "logonPasswordVerify": {
          "type": "string",
          "description": "Required if the logonPassword is used: The registrant's password, entered a second time."
        },
        "receiveEmail": {
          "type": "string",
          "description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default)."
        },
        "preferredLanguage": {
          "type": "string",
          "description": "The registrant's preferred language."
        },
        "description": {
          "type": "string",
          "description": "A description of the registrant."
        },
        "demographicField1": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "demographicField2": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "demographicField3": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "age": {
          "type": "string",
          "description": "The registrant's age."
        },
        "children": {
          "type": "string",
          "description": "The number of children the registrant has."
        },
        "demographicField4": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        }
      }
    },
    "person-person.contextAttribute": {
      "required": [
        "attributeValue",
        "attributeName"
      ],
      "properties": {
        "attributeValue": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.contextAttribute.attributeValue"
          }
        },
        "attributeName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationAdminAddResponse": {
      "description": "Response of UserRegistrationAdminAddCmd.",
      "required": [
        "userId",
        "logonId",
        "addressId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user unique identifier."
        },
        "logonId": {
          "type": "string",
          "description": "The logon ID of the user."
        },
        "addressId": {
          "type": "string",
          "description": "The address identifier of the user."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationAdminUpdateRequest": {
      "description": "Request of UserRegistrationAdminUpdateCmd.",
      "properties": {
        "demographicField5": {
          "type": "string",
          "description": "Customizable field for demographic information; a field of 254 characters."
        },
        "receiveSMSNotification": {
          "type": "string",
          "description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default)."
        },
        "challengeAnswer": {
          "type": "string",
          "description": "Answer to the challenge question."
        },
        "demographicField6": {
          "type": "string",
          "description": "Customizable field for demographic information; an integer field."
        },
        "organizationUnitName": {
          "type": "string",
          "description": "The name of the unit within the organization that the registrant represents."
        },
        "demographicField7": {
          "type": "string",
          "description": "Customizable field for demographic information; a field varchar, length 6."
        },
        "phone1": {
          "type": "string",
          "description": "The registrant's primary phone number."
        },
        "personTitle": {
          "type": "string",
          "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
        },
        "phone2": {
          "type": "string",
          "description": "The registrant's secondary phone number."
        },
        "maritalStatus": {
          "type": "string",
          "description": "The registrant's marital statu."
        },
        "billingCode": {
          "type": "string",
          "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
        },
        "employeeType": {
          "type": "string",
          "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
        },
        "addressField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "addressField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "packageSuppression": {
          "type": "string",
          "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database"
        },
        "addressField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "state": {
          "type": "string",
          "description": "The name of the state, province, or equivalent where the registrant resides."
        },
        "mobilePhone1Country": {
          "type": "string",
          "description": "The country code used for the registrant's mobile phone number, for example, CA for Canada."
        },
        "email1": {
          "type": "string",
          "description": "The registrant's primary e-mail or Web address."
        },
        "preferredDelivery": {
          "type": "string",
          "description": "The registrant's preferred mode of delivery."
        },
        "email2": {
          "type": "string",
          "description": "The registrant's secondary e-mail or Web address."
        },
        "country": {
          "type": "string",
          "description": "The name of the country or region where the registrant resides."
        },
        "officeAddress": {
          "type": "string",
          "description": "The internal address (for example, mail stop)."
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone in which the registrant does business (report as GMT +/- hours)."
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01."
        },
        "preferredMeasure": {
          "type": "string",
          "description": "The registrant's preferred unit of measure."
        },
        "logonId": {
          "type": "string",
          "description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID)."
        },
        "customMemberAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: &attributeName_storeId_action_number=value."
        },
        "userField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "userField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "userField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "taxPayerId": {
          "type": "string",
          "description": "A string used to identify the user for taxation, especially useful with tax software."
        },
        "companyName": {
          "type": "string",
          "description": "The company name of the organization that the registrant represents, obtained when filling in demographic information."
        },
        "income": {
          "type": "string",
          "description": "The registrant's annual incom."
        },
        "bestCallingTime": {
          "type": "string",
          "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
        },
        "manager": {
          "type": "string",
          "description": "The name of the registrant's manager."
        },
        "zipCode": {
          "type": "string",
          "description": "The ZIP or postal code of the registrant's address."
        },
        "organizationId": {
          "type": "string",
          "description": "The identifier of the registrant's company."
        },
        "photo": {
          "type": "string",
          "description": "URL or path to a photo of the registrant."
        },
        "preferredCurrency": {
          "type": "string",
          "description": "The registrant's preferred currency for transactions."
        },
        "taxGeoCode": {
          "type": "string",
          "description": "A tax code based on geographical region, especially useful with tax software."
        },
        "fax1": {
          "type": "string",
          "description": "The registrant's primary facsimile number."
        },
        "fax2": {
          "type": "string",
          "description": "The registrant's secondary facsimile number."
        },
        "alternateId": {
          "type": "string",
          "description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant.."
        },
        "secretary": {
          "type": "string",
          "description": "The name of the registrant's secretary."
        },
        "departmentNumber": {
          "type": "string",
          "description": "The department identifier for the registrant."
        },
        "address1": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "address2": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "address3": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "middleName": {
          "type": "string",
          "description": "The middle name of the registrant."
        },
        "lastName": {
          "type": "string",
          "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
        },
        "gender": {
          "type": "string",
          "description": "The registrant's gender."
        },
        "mobilePhone1": {
          "type": "string",
          "description": "The registrant's mobile phone number used for SMS, for example, 4161235555."
        },
        "userId": {
          "type": "string",
          "description": "The user the administrator will update."
        },
        "addressType": {
          "type": "string",
          "description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.)."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        },
        "shippingGeoCode": {
          "type": "string",
          "description": "A shipping code based on geographical region, especially useful with tax software."
        },
        "organizationUnitId": {
          "type": "string",
          "description": "The identifier of the registrant's organizational unit."
        },
        "preferredCommunication": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2."
        },
        "incomeCurrency": {
          "type": "string",
          "description": "The currency in which the registrant's income is paid."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the registrant."
        },
        "phone1Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "phone2Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "organizationName": {
          "type": "string",
          "description": "The name of the organization that the registrant represents."
        },
        "logonPassword": {
          "type": "string",
          "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server."
        },
        "household": {
          "type": "string",
          "description": "The number of people in the registrant's household; the default is 1."
        },
        "billingCodeType": {
          "type": "string",
          "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
        },
        "employeeId": {
          "type": "string",
          "description": "The registrant's ID with his or her employer."
        },
        "challengeQuestion": {
          "type": "string",
          "description": "Challenge question for verbal confirmation of the customer's identity."
        },
        "city": {
          "type": "string",
          "description": "The name of the city where the registrant resides."
        },
        "orderBefore": {
          "type": "string",
          "description": "Whether the registrant has previously placed an order. This value is supplied by the registrant."
        },
        "hobbies": {
          "type": "string",
          "description": "The registrant's hobbies."
        },
        "publishPhone1": {
          "type": "string",
          "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
        },
        "publishPhone2": {
          "type": "string",
          "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
        },
        "userProfileField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "receiveSMS": {
          "type": "string",
          "description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default)."
        },
        "userProfileField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "logonPasswordVerify": {
          "type": "string",
          "description": "Required if the logonPassword is used: The registrant's password, entered a second time."
        },
        "receiveEmail": {
          "type": "string",
          "description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default)."
        },
        "preferredLanguage": {
          "type": "string",
          "description": "The registrant's preferred language."
        },
        "description": {
          "type": "string",
          "description": "A description of the registrant."
        },
        "demographicField1": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "demographicField2": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "demographicField3": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "age": {
          "type": "string",
          "description": "The registrant's age."
        },
        "children": {
          "type": "string",
          "description": "The number of children the registrant has."
        },
        "demographicField4": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        }
      }
    },
    "person-person.contact.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_In_Orgs_I_Can_Admin": {
      "properties": {
        "orgIdRoleDataBeans": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.MemberRoleAssignDataBean_IBM_Roles_Of_User_In_Orgs_I_Can_Admin.orgIdRoleDataBeans"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$MemberRoleUnassignRequest": {
      "description": "Request of MemberRoleUnassignCmd.",
      "required": [
        "orgEntityIdi",
        "roleIdi"
      ],
      "properties": {
        "orgEntityIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The organization entity identifier."
        },
        "roleIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The role identifier. The roleId parameter takes the forms like roleId, roleId1, roleId2..., the corresponding orgEntityId should be orgEntityId, orgEntiyId1, orgEntityId2..."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary": {
      "properties": {
        "pageSize": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "userDataBeans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UserRegistrationAdminAddRequest": {
      "description": "Request of UserRegistrationAdminAdd.",
      "required": [
        "logonId",
        "logonPassword",
        "logonPasswordVerify"
      ],
      "properties": {
        "demographicField5": {
          "type": "string",
          "description": "Customizable field for demographic information; a field of 254 characters."
        },
        "receiveSMSNotification": {
          "type": "string",
          "description": "Indicates whether the user wants to receive order notification SMS text messages. Valid values are true or false (default)."
        },
        "challengeAnswer": {
          "type": "string",
          "description": "Answer to the challenge question."
        },
        "demographicField6": {
          "type": "string",
          "description": "Customizable field for demographic information; an integer field."
        },
        "organizationUnitName": {
          "type": "string",
          "description": "The name of the unit within the organization that the registrant represents."
        },
        "demographicField7": {
          "type": "string",
          "description": "Customizable field for demographic information; a field varchar, length 6."
        },
        "phone1": {
          "type": "string",
          "description": "The registrant's primary phone number."
        },
        "personTitle": {
          "type": "string",
          "description": "The title of the user whose address is being entered (for example, Dr., Rev., Mr. or Ms.)."
        },
        "profileType": {
          "type": "string",
          "description": "The profile type of the user."
        },
        "phone2": {
          "type": "string",
          "description": "The registrant's secondary phone number."
        },
        "maritalStatus": {
          "type": "string",
          "description": "The registrant's marital statu."
        },
        "billingCode": {
          "type": "string",
          "description": "The registrant's organization's code to identify the shipping or billing addresses and cost center."
        },
        "employeeType": {
          "type": "string",
          "description": "The registrant's status as an employee (for example, regular, permanent, contractor, or part time)."
        },
        "addressField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "addressField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "packageSuppression": {
          "type": "string",
          "description": "1 - An indicator to include package inserts when the order is shipped; 0 - An indicator to not include package inserts when the order is shipped. There is no default for this field. If the field is left unused, it remains null in the database"
        },
        "addressField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "state": {
          "type": "string",
          "description": "The name of the state, province, or equivalent where the registrant resides."
        },
        "mobilePhone1Country": {
          "type": "string",
          "description": "The country code used for the registrant's mobile phone number, for example, CA for Canada."
        },
        "email1": {
          "type": "string",
          "description": "The registrant's primary e-mail or Web address."
        },
        "preferredDelivery": {
          "type": "string",
          "description": "The registrant's preferred mode of delivery."
        },
        "email2": {
          "type": "string",
          "description": "The registrant's secondary e-mail or Web address."
        },
        "country": {
          "type": "string",
          "description": "The name of the country or region where the registrant resides."
        },
        "officeAddress": {
          "type": "string",
          "description": "The internal address (for example, mail stop)."
        },
        "timeZone": {
          "type": "string",
          "description": "The time zone in which the registrant does business (report as GMT +/- hours)."
        },
        "dateOfBirth": {
          "type": "string",
          "description": "Date of birth. The format is yyyy-mm-dd, for example: 1980-01-01."
        },
        "preferredMeasure": {
          "type": "string",
          "description": "The registrant's preferred unit of measure."
        },
        "logonId": {
          "type": "string",
          "description": "The registrant's logon ID. If you are using LDAP, changing a user's logonID is not supported because it would require deleting and recreating the user in LDAP. This process would cause all non-WebSphere Commerce user attributes, such as the password, to be lost. If you are not using LDAP, changing the user's logon ID is not recommended, because the promotion subsystem stores the logon ID of the creator of the promotion in the XMLPARAM column of the PX_PROMOTION table. Note: When the UserRegistrationUpdate command is used to change the logonID, the command will automatically update the USERS.DN database column. Do not assume that ADDRESS.NICKNAME will also change. Instead, the following finder should be used to get the single self address of a user: AddressAccessBean.findSelfAddressByMember(Long memberID)."
        },
        "parentMemberId": {
          "type": "string",
          "description": "The parent member identifier of the user."
        },
        "customMemberAttributes": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "You can manage custom member attributes (MBRATTRVAL table) for this user using the following syntax: &attributeName_storeId_action_number=value."
        },
        "userField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "userField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "userField3": {
          "type": "string",
          "description": "Customizable field."
        },
        "taxPayerId": {
          "type": "string",
          "description": "A string used to identify the user for taxation, especially useful with tax software."
        },
        "companyName": {
          "type": "string",
          "description": "The company name of the organization that the registrant represents, obtained when filling in demographic information."
        },
        "income": {
          "type": "string",
          "description": "The registrant's annual incom."
        },
        "bestCallingTime": {
          "type": "string",
          "description": "D - An indicator that daytime is the best time to call the registrant; E - An indicator that evening is the best time to call the registrant."
        },
        "manager": {
          "type": "string",
          "description": "The name of the registrant's manager."
        },
        "zipCode": {
          "type": "string",
          "description": "The ZIP or postal code of the registrant's address."
        },
        "organizationId": {
          "type": "string",
          "description": "The identifier of the registrant's company."
        },
        "photo": {
          "type": "string",
          "description": "URL or path to a photo of the registrant."
        },
        "preferredCurrency": {
          "type": "string",
          "description": "The registrant's preferred currency for transactions."
        },
        "taxGeoCode": {
          "type": "string",
          "description": "A tax code based on geographical region, especially useful with tax software."
        },
        "fax1": {
          "type": "string",
          "description": "The registrant's primary facsimile number."
        },
        "fax2": {
          "type": "string",
          "description": "The registrant's secondary facsimile number."
        },
        "alternateId": {
          "type": "string",
          "description": "A special ID assigned by the registrant's business organization or organizational unit to this particular registrant.."
        },
        "secretary": {
          "type": "string",
          "description": "The name of the registrant's secretary."
        },
        "departmentNumber": {
          "type": "string",
          "description": "The department identifier for the registrant."
        },
        "address1": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "address2": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "address3": {
          "type": "string",
          "description": "The registrant's street address, to a maximum of three lines of information."
        },
        "middleName": {
          "type": "string",
          "description": "The middle name of the registrant."
        },
        "lastName": {
          "type": "string",
          "description": "Required if the authentication mode is LDAP: The last name of the registrant. If the authentication mode is LDAP, this parameter is mandatory."
        },
        "gender": {
          "type": "string",
          "description": "The registrant's gender."
        },
        "mobilePhone1": {
          "type": "string",
          "description": "The registrant's mobile phone number used for SMS, for example, 4161235555."
        },
        "addressType": {
          "type": "string",
          "description": "The purpose of the address. Valid values are: S - shipto, B - billto, SB - shipto and billto (The default value.)."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        },
        "shippingGeoCode": {
          "type": "string",
          "description": "A shipping code based on geographical region, especially useful with tax software."
        },
        "organizationUnitId": {
          "type": "string",
          "description": "The identifier of the registrant's organizational unit."
        },
        "preferredCommunication": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The preferred phone for the registrant (stored in the ADDRESS table), for example: P1=phone 1 P2=phone 2."
        },
        "incomeCurrency": {
          "type": "string",
          "description": "The currency in which the registrant's income is paid."
        },
        "firstName": {
          "type": "string",
          "description": "The first name of the registrant."
        },
        "phone1Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's primary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "phone2Type": {
          "type": "string",
          "description": "The type of phone used for the registrant's secondary phone number, for example TTY for hearing impaired, PCM for pulse-coded modulation, or CEL for mobile. This is a field of 3 characters."
        },
        "organizationName": {
          "type": "string",
          "description": "The name of the organization that the registrant represents."
        },
        "logonPassword": {
          "type": "string",
          "description": "The registrant's password. In database mode, the password is encrypted before it is saved in the database. In LDAP mode, the password is only stored on the LDAP server."
        },
        "household": {
          "type": "string",
          "description": "The number of people in the registrant's household; the default is 1."
        },
        "billingCodeType": {
          "type": "string",
          "description": "Code designating the method of code structure used for the billing code. The default value is D, assigned by buyer."
        },
        "employeeId": {
          "type": "string",
          "description": "The registrant's ID with his or her employer."
        },
        "challengeQuestion": {
          "type": "string",
          "description": "Challenge question for verbal confirmation of the customer's identity."
        },
        "city": {
          "type": "string",
          "description": "The name of the city where the registrant resides."
        },
        "orderBefore": {
          "type": "string",
          "description": "Whether the registrant has previously placed an order. This value is supplied by the registrant."
        },
        "hobbies": {
          "type": "string",
          "description": "The registrant's hobbies."
        },
        "publishPhone1": {
          "type": "string",
          "description": "1 - An indicator that the registrant's primary phone number is listed; 0 - An indicator that the registrant's primary phone number is unlisted. There is no default for these publishPhone fields. If the field is left unused, it remains null in the database."
        },
        "publishPhone2": {
          "type": "string",
          "description": "1 - An indicator that the registrant's secondary phone number is listed; 0 - An indicator that the registrant's secondary phone number is unlisted."
        },
        "userProfileField1": {
          "type": "string",
          "description": "Customizable field."
        },
        "receiveSMS": {
          "type": "string",
          "description": "Specifies whether the registrant wants to receive marketing SMS messages for the current store (or all stores if no stores have been visited during the session). Valid values are true or false (default)."
        },
        "userProfileField2": {
          "type": "string",
          "description": "Customizable field."
        },
        "logonPasswordVerify": {
          "type": "string",
          "description": "Required if the logonPassword is used: The registrant's password, entered a second time."
        },
        "receiveEmail": {
          "type": "string",
          "description": "Determines whether the registrant wants to receive marketing e-mail activities for the current store (or all stores if no stores have been visited during the session): true - The user wants to receive marketing e-mail activities; false - The user does not want to receive e-mail activities (the default)."
        },
        "preferredLanguage": {
          "type": "string",
          "description": "The registrant's preferred language."
        },
        "description": {
          "type": "string",
          "description": "A description of the registrant."
        },
        "demographicField1": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "demographicField2": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "demographicField3": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        },
        "age": {
          "type": "string",
          "description": "The registrant's age."
        },
        "children": {
          "type": "string",
          "description": "The number of children the registrant has."
        },
        "demographicField4": {
          "type": "string",
          "description": "Customizable field for demographic information; this is single-character field."
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.demographics": {
      "properties": {
        "hobbies": {
          "type": "string"
        },
        "gender": {
          "type": "string"
        },
        "numberOfHouseholds": {
          "type": "string"
        },
        "maritalStatus": {
          "type": "string"
        },
        "companyName": {
          "type": "string"
        },
        "timezone": {
          "type": "string"
        },
        "income": {
          "type": "string"
        },
        "incomeCurrency": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "orderBefore": {
          "type": "string"
        },
        "numberOfChildren": {
          "type": "string"
        },
        "age": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UpdateMemberUserResponse": {
      "description": "response of MemberGroupMemberUpdateCmd.",
      "properties": {
        "addAsExplicitInclusionToMemberGroupId": {
          "type": "string",
          "description": "MemberGroup Identifiers to explicitly add the user too ."
        },
        "removeFromMemberGroupId": {
          "type": "string",
          "description": "MemberGroup Identifiers to remove the user from"
        },
        "catalogId": {
          "type": "string",
          "description": "The catalog identifier"
        },
        "userId": {
          "type": "string",
          "description": "The user identifier"
        },
        "requesttype": {
          "type": "string",
          "description": "The request type ie (ajax)"
        },
        "storeId": {
          "type": "string",
          "description": "The current store identifier"
        },
        "addAsExplicitExclusionToMemberGroupId": {
          "type": "string",
          "description": "MemberGroup Identifiers to explicitly exclude the user from "
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        }
      }
    },
    "person-person": {
      "required": [
        "phone1",
        "phone2",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "logonId",
        "contact",
        "fax1",
        "fax2",
        "mobilePhone1",
        "challengeQuestion"
      ],
      "properties": {
        "householdSize": {
          "type": "string",
          "format": "int32"
        },
        "receiveSMSNotification": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "profileType": {
          "type": "string",
          "enum": [
            "Consumer",
            "Business"
          ]
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "maritalStatus": {
          "type": "string"
        },
        "employeeType": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "passwordExpired": {
          "type": "string"
        },
        "registrationStatus": {
          "type": "string",
          "enum": [
            "Guest",
            "RegisteredPerson"
          ]
        },
        "phone1Publish": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "preferredDelivery": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "logonId": {
          "type": "string"
        },
        "numberOfChildren": {
          "type": "string",
          "format": "int32"
        },
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.contact"
          }
        },
        "companyName": {
          "type": "string"
        },
        "income": {
          "$ref": "#/definitions/com.ibm.commerce.member.facade.datatypes.IncomeAmountType"
        },
        "contextAttribute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.contextAttribute"
          }
        },
        "manager": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "registrationApprovalStatus": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "preferredCurrency": {
          "type": "string"
        },
        "receiveEmailPreference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.receiveEmailPreference"
          }
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "secretary": {
          "type": "string"
        },
        "orgizationId": {
          "type": "string"
        },
        "departmentNumber": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        },
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "gender": {
          "type": "string",
          "enum": [
            "Male",
            "Female",
            "Unspecified"
          ]
        },
        "mobilePhone1": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "employeeID": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "preferredCommunication": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.attributes"
          }
        },
        "language": {
          "type": "string"
        },
        "photoURI": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.userDataField"
          }
        },
        "challengeQuestion": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "phone2Publish": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        },
        "hobbies": {
          "type": "string"
        },
        "receiveSMSPreference": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.receiveSMSPreference"
          }
        },
        "registrationDateTime": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "organizationDistinguishedName": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string"
        },
        "accountStatus": {
          "type": "string",
          "enum": [
            "Enabled",
            "Disabled"
          ]
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UserIdentifier": {
      "description": "User identitifier.",
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user identifier."
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Summary": {
      "properties": {
        "personTitle": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Summary.address"
        },
        "userId": {
          "type": "string"
        },
        "registerType": {
          "type": "string"
        },
        "logonId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Summary.address": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Top_Level_Org_Administered": {
      "properties": {
        "userId": {
          "type": "string"
        },
        "registerType": {
          "type": "string"
        },
        "topLevelOrganizationsDirectlyAdministered": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Top_Level_Org_Administered.topLevelOrganizationsDirectlyAdministered"
        },
        "logonId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_Assigned_Roles_Details.rolesWithDetails": {
      "properties": {
        "roleId": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans.businessProfile": {
      "properties": {
        "employeeId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details": {
      "properties": {
        "pageSize": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "integer",
          "format": "int32"
        },
        "recordSetCompleteIndicator": {
          "type": "boolean"
        },
        "pageNumber": {
          "type": "integer",
          "format": "int32"
        },
        "userDataBeans": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int32"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Details.userProfile": {
      "properties": {
        "receiveSMSNotification": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.emarketing.beans.EmailUserReceiveDataBean_IBM_optOut_sms": {
      "properties": {
        "userReceiveSMS": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans.demographics": {
      "properties": {
        "gender": {
          "type": "string"
        },
        "dateOfBirth": {
          "type": "string"
        },
        "age": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UserIdentity": {
      "description": "Information about a guest user identity.",
      "required": [
        "userId",
        "WCToken",
        "WCTrustedToken",
        "personalizationID"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user unique identifier."
        },
        "WCToken": {
          "type": "string",
          "description": "The token used for authentication."
        },
        "WCTrustedToken": {
          "type": "string",
          "description": "The trusted token used for authentication. This token should only be used on encrypted channels."
        },
        "personalizationID": {
          "type": "string",
          "description": "The personalization identifier for the current session."
        }
      }
    },
    "com.ibm.commerce.member.facade.datatypes.IncomeAmountType": {
      "properties": {
        "value": {
          "type": "integer",
          "format": "int32"
        },
        "currency": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$UpdateMemberUser": {
      "description": "Body of MemberGroupMemberUpdateCmd.",
      "properties": {
        "addAsExplicitInclusionToMemberGroupId": {
          "type": "string",
          "description": "MemberGroup Identifiers to explicitly add the user too ."
        },
        "removeFromMemberGroupId": {
          "type": "string",
          "description": "MemberGroup Identifiers to remove the user from"
        },
        "addAsExplicitExclusionToMemberGroupId": {
          "type": "string",
          "description": "MemberGroup Identifiers to explicitly exclude the user from "
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Details": {
      "properties": {
        "preferredCurrency": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Details.address"
        },
        "userId": {
          "type": "string"
        },
        "preferredLanguage": {
          "type": "string"
        },
        "registerType": {
          "type": "string"
        },
        "userProfile": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Details.userProfile"
        },
        "organizationName": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        },
        "logonId": {
          "type": "string"
        },
        "demographics": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Details.demographics"
        },
        "parentMemberId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans.userProfile": {
      "properties": {
        "receiveSMSNotification": {
          "type": "string"
        },
        "preferredDelivery": {
          "type": "string"
        },
        "preferredCommunication": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "preferredMeasure": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonHandler$DeleteContextAttribute": {
      "description": "Delete context attribute response.",
      "required": [
        "userId",
        "addressId"
      ],
      "properties": {
        "userId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The user identifier list."
        },
        "addressId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The address identifier list."
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Registration_Details.address": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "address1": {
          "type": "string"
        },
        "address2": {
          "type": "string"
        },
        "address3": {
          "type": "string"
        }
      }
    },
    "person-person.receiveSMSPreference": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "storeID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_Assigned_Roles_Details": {
      "properties": {
        "userId": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "rolesWithDetails": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_Assigned_Roles_Details.rolesWithDetails"
          }
        }
      }
    },
    "person-person.contextAttribute.attributeValue": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "storeId": {
          "type": "string"
        }
      }
    },
    "person-person.receiveEmailPreference": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "storeID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.businessProfile": {
      "properties": {
        "organizationUnitId": {
          "type": "string"
        },
        "employeeType": {
          "type": "string"
        },
        "employeeId": {
          "type": "string"
        },
        "departmentNumber": {
          "type": "string"
        },
        "requistionerId": {
          "type": "string"
        },
        "organizationId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserRegistrationConfigBasedDataBean_IBM_User_Top_Level_Org_Administered.topLevelOrganizationsDirectlyAdministered": {},
    "com.ibm.commerce.rest.member.handler.PersonHandler$MemberRoleAssignRequest": {
      "description": "Request of MemberRoleAssignCmd.",
      "required": [
        "orgEntityIdi",
        "roleIdi"
      ],
      "properties": {
        "orgEntityIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The organization entity identifier."
        },
        "roleIdi": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The role identifier. The roleId parameter takes the forms like roleId, roleId1, roleId2..., the corresponding orgEntityId should be orgEntityId, orgEntiyId1, orgEntityId2..."
        },
        "URL": {
          "type": "string",
          "description": "The URL to be called when the command completes successfully."
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Details.userDataBeans.userRegistry": {
      "properties": {
        "status": {
          "type": "string"
        },
        "logonId": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans": {
      "properties": {
        "lastName": {
          "type": "string"
        },
        "userId": {
          "type": "string"
        },
        "businessProfile": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans.businessProfile"
        },
        "displayName": {
          "type": "string"
        },
        "demographics": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans.demographics"
        },
        "state": {
          "type": "string"
        },
        "preferredCurrency": {
          "type": "string"
        },
        "preferredLanguageId": {
          "type": "string"
        },
        "memberId": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "logonId": {
          "type": "string"
        },
        "userProfile": {
          "$ref": "#/definitions/com.ibm.commerce.user.beans.UserSearchDataBean_IBM_User_List_Summary.userDataBeans.userProfile"
        },
        "personalizationId": {
          "type": "string"
        }
      }
    },
    "person-person.contact": {
      "required": [
        "phone1",
        "phone2",
        "mobilePhone1",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "fax1",
        "fax2"
      ],
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phone1Publish": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/java.util.Map$Entry"
          }
        },
        "language": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-person.contact.userDataField"
          }
        },
        "phone2Publish": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        }
      }
    },
    "person-singleContact": {
      "required": [
        "phone1",
        "phone2",
        "mobilePhone1",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "fax1",
        "fax2"
      ],
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phone1Publish": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/java.util.Map$Entry"
          }
        },
        "language": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-singleContact.userDataField"
          }
        },
        "phone2Publish": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        }
      }
    },
    "person-contact.contact.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonContactHandler$AddressIdentifier": {
      "description": "Address identitifier.",
      "required": [
        "addressId"
      ],
      "properties": {
        "addressId": {
          "type": "string",
          "description": "The address identifier."
        }
      }
    },
    "person-singleContact.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "person-contact": {
      "required": [
        "contact"
      ],
      "properties": {
        "contact": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-contact.contact"
          }
        },
        "userId": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        }
      }
    },
    "person-contact.contact": {
      "required": [
        "phone1",
        "phone2",
        "mobilePhone1",
        "nickName",
        "mobilePhone1Country",
        "email1",
        "email2",
        "fax1",
        "fax2"
      ],
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "organizationUnitName": {
          "type": "string"
        },
        "primary": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "phone1": {
          "type": "string"
        },
        "phone2": {
          "type": "string"
        },
        "mobilePhone1": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "phone1Publish": {
          "type": "string"
        },
        "nickName": {
          "type": "string"
        },
        "addressType": {
          "type": "string"
        },
        "mobilePhone1Country": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "email1": {
          "type": "string"
        },
        "email2": {
          "type": "string"
        },
        "country": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/java.util.Map$Entry"
          }
        },
        "language": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        },
        "phone1Type": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        },
        "phone2Type": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.PersonIdentifierType"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/person-contact.contact.userDataField"
          }
        },
        "city": {
          "type": "string"
        },
        "phone2Publish": {
          "type": "string"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "zipCode": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "fax2": {
          "type": "string"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.OrganizationIdentifierType"
        },
        "geographicalShippingCode": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PersonContactHandler$UserIdentifier": {
      "description": "User identitifier.",
      "required": [
        "userId"
      ],
      "properties": {
        "userId": {
          "type": "string",
          "description": "The user identifier."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PreviewTokenHandler$PreviewToken": {
      "description": "Preview token.",
      "properties": {
        "previewToken": {
          "type": "string",
          "description": "The preview token."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.PreviewTokenHandler$PreviewParameters": {
      "description": "Preview parameters.",
      "properties": {
        "workspaceId": {
          "type": "string",
          "description": "The workspace identifier to use. Example : \"10001\""
        },
        "status": {
          "type": "string",
          "description": "The status. Set to either \"true\" or \"false\"."
        },
        "start": {
          "type": "string",
          "description": "The start date and time. Example :\"2013/09/11 13:00:00\""
        },
        "invstatus": {
          "type": "string",
          "description": "The inventory status number. Example : \"0\""
        },
        "timeZoneId": {
          "type": "string",
          "description": "The time zone identifier. Example : \"America/New_York\""
        },
        "includedMemberGroupIds": {
          "type": "string",
          "description": "Comma separated list of member groups to simulate. Example : \"8000000000000000007,8000000000000000006\""
        }
      }
    },
    "com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest": {
      "description": "Price request.",
      "required": [
        "query"
      ],
      "properties": {
        "query": {
          "$ref": "#/definitions/com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest$Query",
          "description": "The price query."
        }
      }
    },
    "price-price_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "price-price_item.UnitPrice": {
      "properties": {
        "price": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        },
        "quantity": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuantityType"
        }
      }
    },
    "price-price": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "EntitledPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/price-price_item"
          }
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest$Query": {
      "description": "Query information.",
      "required": [
        "products",
        "name"
      ],
      "properties": {
        "products": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest$Product"
          },
          "description": "The products to query."
        },
        "dates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The dates on which to query prices on all the products unless overridden at the product level."
        },
        "contractIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The contract identifiers to use for all the products unless overridden at the product level. An exception will be thrown if an invalid contract identifier is specified. If left empty, the store default contract will be used."
        },
        "name": {
          "type": "string",
          "enum": [
            "byProductID",
            "byPartNumber"
          ],
          "description": "The price query name. Valid names are 'byProductID' which requires product IDs to be given for each product and 'byPartNumber' which requires part numbers to be given for each product."
        }
      }
    },
    "com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest$Quantity": {
      "description": "Quantity information.",
      "required": [
        "uom",
        "quantity"
      ],
      "properties": {
        "uom": {
          "type": "string",
          "description": "The unit of measure applicable to the quantity."
        },
        "quantity": {
          "type": "number",
          "format": "double",
          "description": "The quantity to query."
        }
      }
    },
    "com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest$Product": {
      "description": "Product information.",
      "properties": {
        "dates": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The dates on which to query the product prices."
        },
        "contractIds": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The contract identifiers to use on specific products. An exception will be thrown if an invalid contract identifier is specified. If left empty, the store default contract will be used."
        },
        "quantities": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.price.handler.PriceHandler$PriceRequest$Quantity"
          },
          "description": "The quantities for which to query the price. If no quantities are specified, a default quantity of 1.0 and unit of measure of 'C62' will be used."
        },
        "productId": {
          "type": "string",
          "description": "The product identifier to query. Required if the query is set to : byProductID."
        },
        "partNumber": {
          "type": "string",
          "description": "The product part number to query. Required if the query is set to : byPartNumber."
        },
        "currencies": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "enum": [
            "ARS",
            "ATS",
            "AUD",
            "BEF",
            "BRL",
            "CAD",
            "CHF",
            "CNY",
            "DEM",
            "DKK",
            "EGP",
            "ESP",
            "EUR",
            "FIM",
            "FRF",
            "GBP",
            "HKD",
            "IEP",
            "ITL",
            "JPY",
            "KRW",
            "LUF",
            "NLG",
            "NOK",
            "PLN",
            "PTE",
            "ROL",
            "RON",
            "RUB",
            "SEK",
            "SGD",
            "TWD",
            "USD",
            "ZAR"
          ],
          "description": "The currencies to use on specific products. If not currency is specified, the store default shall be used."
        }
      }
    },
    "price-price_item.RangePrice": {
      "required": [
        "minimumQuantity",
        "priceInRange"
      ],
      "properties": {
        "currency": {
          "type": "string"
        },
        "minimumQuantity": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuantityType"
        },
        "maximumQuantity": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.QuantityType"
        },
        "priceInRange": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        }
      }
    },
    "price-price_item": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/price-price_item.userDataField"
          }
        },
        "UnitPrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/price-price_item.UnitPrice"
          }
        },
        "productId": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "RangePrice": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/price-price_item.RangePrice"
          }
        },
        "contractId": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.SuggestionView.Entry.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.FacetView.Entry": {
      "properties": {
        "label": {
          "type": "string"
        },
        "image": {
          "type": "string"
        },
        "count": {
          "type": "string",
          "format": "int64"
        },
        "entryValue": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.SuggestionView": {
      "properties": {
        "Entry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.SuggestionView.Entry"
          }
        },
        "label": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.WebContentView": {
      "required": [
        "URL"
      ],
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.WebContentView.userDataField"
          }
        },
        "name": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "URL": {
          "type": "string"
        },
        "MetaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.WebContentView.MetaData"
          }
        }
      }
    },
    "productview-productSummary.CatalogEntryView.Price.PriceRange": {
      "required": [
        "priceRange"
      ],
      "properties": {
        "priceRange": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.MonetaryAmountType"
        }
      }
    },
    "productview-productSummary.SuggestionView.Entry": {
      "properties": {
        "value": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.SuggestionView.Entry.userDataField"
          }
        },
        "image": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.MetaData": {
      "required": [
        "metaKey"
      ],
      "properties": {
        "metaKey": {
          "type": "string"
        },
        "metaData": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.CatalogEntryView.Price.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "productview-productSummary": {
      "properties": {
        "indexStatus": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.userDataField"
          }
        },
        "SuggestionView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.SuggestionView"
          }
        },
        "WebContentView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.WebContentView"
          }
        },
        "recordSetComplete": {
          "type": "string"
        },
        "MetaData": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.MetaData"
          }
        },
        "finalQuery": {
          "type": "string"
        },
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "BreadCrumbTrailEntryView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.BreadCrumbTrailEntryView"
          }
        },
        "report": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "FacetView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.FacetView"
          }
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        },
        "CatalogEntryView": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.CatalogEntryView"
          }
        }
      }
    },
    "productview-productSummary.BreadCrumbTrailEntryView": {
      "properties": {
        "value": {
          "type": "string"
        },
        "label": {
          "type": "string"
        },
        "type": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.WebContentView.MetaData": {
      "required": [
        "metaKey"
      ],
      "properties": {
        "metaKey": {
          "type": "string"
        },
        "metaData": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.CatalogEntryView.Price": {
      "properties": {
        "priceDescription": {
          "type": "string"
        },
        "PriceRange": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.CatalogEntryView.Price.PriceRange"
          }
        },
        "maxPrice": {
          "type": "string",
          "format": "double"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.CatalogEntryView.Price.userDataField"
          }
        },
        "minPrice": {
          "type": "string",
          "format": "double"
        },
        "priceUsage": {
          "type": "string",
          "enum": [
            "Display",
            "Offer"
          ]
        },
        "priceValue": {
          "type": "string",
          "format": "double"
        },
        "isLowestContractPrice": {
          "type": "string"
        },
        "contractId": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.CatalogEntryView": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "longDescription": {
          "type": "string"
        },
        "buyable": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        },
        "parentCategoryID": {
          "type": "string"
        },
        "metaKeyword": {
          "type": "string"
        },
        "Price": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.CatalogEntryView.Price"
          }
        },
        "productType": {
          "type": "string"
        },
        "keyword": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "fullImage": {
          "type": "string"
        },
        "thumbnail": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "metaDescription": {
          "type": "string"
        },
        "title": {
          "type": "string"
        },
        "storeID": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "fullImageAltDescription": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.FacetView": {
      "properties": {
        "value": {
          "type": "string"
        },
        "Entry": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/productview-productSummary.FacetView.Entry"
          }
        },
        "name": {
          "type": "string"
        }
      }
    },
    "productview-productSummary.WebContentView.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "promotion-promotion_item.Description": {
      "properties": {
        "longDescription": {
          "type": "string"
        },
        "shortDescription": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.promotion.facade.datatypes.PromotionScheduleType": {
      "properties": {
        "startDate": {
          "type": "string"
        },
        "dailyStartTime": {
          "type": "string"
        },
        "endDate": {
          "type": "string"
        },
        "weekDays": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.promotion.facade.datatypes.DayOfWeekEnumerationType"
          },
          "enum": [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ]
        },
        "dailyEndTime": {
          "type": "string"
        }
      }
    },
    "promotion-promotion_item": {
      "required": [
        "promotionName"
      ],
      "properties": {
        "status": {
          "type": "string"
        },
        "schedule": {
          "$ref": "#/definitions/com.ibm.commerce.promotion.facade.datatypes.PromotionScheduleType"
        },
        "administrativeName": {
          "type": "string"
        },
        "Description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/promotion-promotion_item.Description"
          }
        },
        "promotionType": {
          "type": "string"
        },
        "promotionName": {
          "type": "string"
        },
        "promotionId": {
          "type": "string"
        }
      }
    },
    "promotion-promotion": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "Promotion": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/promotion-promotion_item"
          }
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListCopyResponse": {
      "properties": {
        "requisitionListId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the requisition list."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListSubmitResponse": {
      "properties": {
        "orderId": {
          "type": "string",
          "description": "The ID of the order."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListCreateRequest": {
      "properties": {
        "status": {
          "type": "string",
          "description": "Distinguishes between a private requisition list and a shared requisition list. The default is Y for a private requisition list. Z indicates a shared requisition list."
        },
        "name": {
          "type": "string",
          "description": "The name of the requisition list being created."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListItemUpdateRequest": {
      "required": [
        "status",
        "quantity_i"
      ],
      "properties": {
        "catEntryId_i": {
          "type": "string",
          "description": "The reference numbers of the items to be added."
        },
        "field1_i": {
          "type": "string",
          "description": "A store-reserved integer value."
        },
        "field2_i": {
          "type": "string",
          "description": "A store-reserved text value; accepts up to 254 characters."
        },
        "shipModeId_i": {
          "type": "string",
          "description": "The reference number of the shipping mode to be used for the product or item."
        },
        "orderItemId_i": {
          "type": "string",
          "description": "The reference numbers of the items to be updated in the requisition list."
        },
        "partNumber_i": {
          "type": "string",
          "description": "If this is specified, then the catEntryId parameter is ignored. The partNumber and memberId a catentry_id by selecting the PARTNUMBER and MEMBER_ID columns in the CATENTRY table, and this URL behaves as if that reference number was specified as the value for catEntryId."
        },
        "attrName_i": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Any distinct attribute that is defined for the item. This parameter can be repeated."
        },
        "comment_i": {
          "type": "string",
          "description": "A Comment to be included with the created or updated order items."
        },
        "attrValue_i": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The value of the attribute in attrName. This parameter can be repeated."
        },
        "outOrderName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies the name-value pairs to be added to the redirection URL. The values of the added name-value pairs are the reference numbers of the created or updated orders. This parameter can be repeated."
        },
        "status": {
          "type": "string",
          "description": "The status of the requisition list. Specify either 'Y' for a private requisition list, or 'Z' for a shared requisition list."
        },
        "requisitionListId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The ID of the requisition list. This parameter can be repeated."
        },
        "quantity_i": {
          "type": "string",
          "description": "The quantity of the item to be added to the order."
        },
        "listId": {
          "type": "string",
          "description": "The interest item list ID. When you specify this parameter, the OrderItemUpdate command will create a new order which contains all the items in the list. You may use one of the special abbreviations \".\", \"*\", \".t\", \"*t\". See Order Abbreviations for a description."
        },
        "addressId_i": {
          "type": "string",
          "description": "The reference number of the address to which the products and items are shipped."
        },
        "UOM_i": {
          "type": "string",
          "description": "The unit of measure."
        },
        "outOrderItemName": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "Specifies the name-value pairs to be added to the redirection URL. The values of the added name-value pairs are the reference numbers of the created or updated order items. This parameter can be repeated."
        },
        "orderDesc": {
          "type": "string",
          "description": "Specifies the description for the new order created by this URL."
        },
        "memberId_i": {
          "type": "string",
          "description": "The identifier for the member that owns the catalog where the order will be placed. To achieve compatibility with prior versions of WebSphere Commerce, set memberID to *storeOwner. This specifies the memberID of the owner of the current Store object."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListCreateResponse": {
      "properties": {
        "requisitionListId": {
          "type": "integer",
          "format": "int64",
          "description": "The ID of the requisition list."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListItemUpdateResponse": {
      "properties": {
        "orderId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The values of the added name-value pairs are the reference numbers of the created or updated orders. This parameter can be repeated."
        },
        "orderItemId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "The values of the added name-value pairs are the reference numbers of the created or updated order items. This parameter can be repeated."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListSubmitRequest": {
      "properties": {
        "offerId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of IDs of the offers associated with the order. This parameter can be repeated."
        },
        "contractId": {
          "type": "array",
          "items": {
            "type": "string"
          },
          "description": "A list of IDs of contracts associated with the order. This parameter can be repeated."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListCopyRequest": {
      "required": [
        "orderId"
      ],
      "properties": {
        "status": {
          "type": "string",
          "description": "The status of the requisition list being created."
        },
        "orderId": {
          "type": "string",
          "description": "The order ID of the existing order."
        },
        "name": {
          "type": "string",
          "description": "The name of the requisition list being created."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListConfigurationUpdateResponse": {},
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListUpdateResponse": {},
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListConfigurationAddResponse": {},
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListConfigurationAddRequest": {
      "required": [
        "quantity"
      ],
      "properties": {
        "configurationXML": {
          "type": "string",
          "description": "Tthe BOM XML to describe the configuration of the dynamic kit or predefined dynamic kit."
        },
        "status": {
          "type": "string",
          "description": "The status of the requisition list."
        },
        "requisitionListId": {
          "type": "string",
          "description": "The ID of the requisition list."
        },
        "catEntryId": {
          "type": "string",
          "description": "The catalog entry id of the dynamic kit or predefined dynamic kit."
        },
        "type": {
          "type": "string",
          "description": "The type of the requisition list."
        },
        "quantity": {
          "type": "string",
          "description": "The quantity of the dynamic kit or predefined dynamic kit."
        },
        "name": {
          "type": "string",
          "description": "The name of the requisition list."
        },
        "partNumber": {
          "type": "string",
          "description": "The part number of the dynamic kit or predefined dynamic kit."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListDeleteResponse": {},
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListDeleteRequest": {},
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListUpdateRequest": {
      "properties": {
        "status": {
          "type": "string",
          "description": "Distinguishes between a private requisition list and a shared requisition list. The default is Y for a private requisition list. Z indicates a shared requisition list."
        },
        "name": {
          "type": "string",
          "description": "The name of the requisition list."
        },
        "billtoAddressId": {
          "type": "string",
          "description": "The billing address identification."
        }
      }
    },
    "com.ibm.commerce.rest.requisitionlist.handler.RequisitionListHandler$RequisitionListConfigurationUpdateRequest": {
      "properties": {
        "configurationXML": {
          "type": "string",
          "description": "Tthe BOM XML to describe the configuration of the dynamic kit or predefined dynamic kit."
        },
        "orderItemId": {
          "type": "string",
          "description": "The reference numbers of the items to be updated in the requisition list."
        }
      }
    },
    "search_term_association-IBM_Admin_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/search_term_association-IBM_Admin_Summary_item"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "search_term_association-IBM_Admin_Summary_item": {
      "properties": {
        "languageIdentifier": {
          "type": "string"
        },
        "associationTerms": {
          "type": "string"
        },
        "searchTermAssociationId": {
          "type": "string"
        },
        "associationType": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "searchTerms": {
          "type": "string"
        }
      }
    },
    "segment-segments_item": {
      "properties": {
        "usage": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "id": {
          "type": "string"
        },
        "description": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.DescriptionType"
        },
        "displayName": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.DescriptionType"
        }
      }
    },
    "segment-segments": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "MemberGroup": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/segment-segments_item"
          }
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.rest.marketing.handler.SegmentHandler$SegmentMemberCheck": {
      "description": "Segment membership check.",
      "required": [
        "isInCustomeSegment"
      ],
      "properties": {
        "isInCustomeSegment": {
          "type": "boolean",
          "description": "Is the specified customer in the specified segment."
        }
      }
    },
    "cart-shipping_info.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.ShippingInfoHandler$UpdateShippingInfoBodyDescription": {
      "description": "Order update shipping information.",
      "required": [
        "orderItem",
        "shipAsComplete",
        "shipModeId",
        "x_calculationUsage"
      ],
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.order.handler.ShippingInfoHandler$UpdateShippingInfoBodyDescription$OrderItemBodyDescription"
          },
          "description": "list of order items"
        },
        "shipAsComplete": {
          "type": "string",
          "description": "Option to ship the order as complete. Valid values include \"true\" and \"false\"."
        },
        "shipModeId": {
          "type": "string",
          "description": "Shipping mode identifier."
        },
        "addressId": {
          "type": "string",
          "description": "Address identifier."
        },
        "x_calculationUsage": {
          "type": "string",
          "description": "Calculation usage codes."
        }
      }
    },
    "cart-ShippingInfoOrderItem.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.order.handler.ShippingInfoHandler$UpdateShippingInfoBodyDescription$OrderItemBodyDescription": {
      "description": "Order item update shipping information.",
      "required": [
        "orderItemId"
      ],
      "properties": {
        "shipInstructions": {
          "type": "string",
          "description": "Shipping instructoins."
        },
        "physicalStoreId": {
          "type": "string",
          "description": "Physical mode identifier."
        },
        "shipModeId": {
          "type": "string",
          "description": "Shipping mode identifier."
        },
        "orderItemId": {
          "type": "string",
          "description": "Order item identifier."
        },
        "addressId": {
          "type": "string",
          "description": "Address identifier."
        }
      }
    },
    "cart-shipping_info": {
      "properties": {
        "orderItem": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-ShippingInfoOrderItem"
          }
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-shipping_info.userDataField"
          }
        },
        "shipAsComplete": {
          "type": "string"
        },
        "orderId": {
          "type": "string"
        },
        "/orderShippingInfo": {
          "$ref": "#/definitions/cart-OrderShippingInfo"
        }
      }
    },
    "cart-OrderShippingInfo.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "cart-ShippingInfoOrderItem": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-ShippingInfoOrderItem.userDataField"
          }
        },
        "orderItemId": {
          "type": "string"
        },
        "/orderItemShippingInfo": {
          "$ref": "#/definitions/cart-OrderItemShippingInfo"
        }
      }
    },
    "cart-OrderShippingInfo": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/cart-OrderShippingInfo.userDataField"
          }
        },
        "requestedShipDate": {
          "type": "string"
        },
        "shipModeId": {
          "type": "string"
        },
        "pysicalStoreId": {
          "type": "string"
        },
        "addressId": {
          "type": "string"
        }
      }
    },
    "spot-spot_item": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/spot-spot_item.userDataField"
          }
        },
        "uiDisplayable": {
          "type": "integer",
          "format": "int64"
        },
        "type": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "spotName": {
          "type": "string"
        },
        "spotId": {
          "type": "string"
        }
      }
    },
    "spot-spot_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "spot-spot": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "MarketingSpot": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/spot-spot_item"
          }
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "store-AddressType": {
      "properties": {
        "country": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "zipOrPostalCode": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "store-ContactInfoIdentifierType": {
      "required": [
        "contactPersonNickName"
      ],
      "properties": {
        "contactPersonId": {
          "type": "string"
        },
        "contactPersonNickName": {
          "type": "string"
        },
        "contactInfoId": {
          "type": "string"
        }
      }
    },
    "store-OnlineStoreContactInfoType": {
      "required": [
        "fax1",
        "fax2",
        "emailAddress1",
        "emailAddress2",
        "telephone1",
        "telephone2"
      ],
      "properties": {
        "contactPersonBusinessTitle": {
          "type": "string"
        },
        "languageId": {
          "type": "string"
        },
        "fax1": {
          "type": "string"
        },
        "address": {
          "$ref": "#/definitions/store-AddressType"
        },
        "fax2": {
          "type": "string"
        },
        "contactInfoIdentifier": {
          "$ref": "#/definitions/store-ContactInfoIdentifierType"
        },
        "emailAddress1": {
          "type": "string"
        },
        "emailAddress2": {
          "type": "string"
        },
        "telephone1": {
          "type": "string"
        },
        "telephone2": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType": {
      "properties": {
        "catalogIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.userData"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.storeIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.store.handler.StoreHandler$StoreInformation": {
      "description": "Store information.",
      "required": [
        "productUrl",
        "orderUrl",
        "shoppingcartUrl",
        "espotUrl",
        "loginidentityUrl",
        "wishlistUrl",
        "storeName",
        "directory",
        "inventoryavailabilityUrl",
        "guestidentityUrl",
        "personUrl",
        "storeLocatorUrl",
        "geonodeUrl",
        "storeId",
        "topcategoriesUrl"
      ],
      "properties": {
        "productUrl": {
          "type": "string",
          "description": "Store product api url."
        },
        "orderUrl": {
          "type": "string",
          "description": "Store order api url."
        },
        "shoppingcartUrl": {
          "type": "string",
          "description": "Store shopping cart api url."
        },
        "espotUrl": {
          "type": "string",
          "description": "Store e-spots api url."
        },
        "loginidentityUrl": {
          "type": "string",
          "description": "Store login api url."
        },
        "wishlistUrl": {
          "type": "string",
          "description": "Store wish list api url."
        },
        "storeName": {
          "type": "string",
          "description": "Store name."
        },
        "directory": {
          "type": "string",
          "description": "Store directory name."
        },
        "inventoryavailabilityUrl": {
          "type": "string",
          "description": "Store inventory api url."
        },
        "guestidentityUrl": {
          "type": "string",
          "description": "Store guest identity api url."
        },
        "personUrl": {
          "type": "string",
          "description": "Store person api url."
        },
        "storeLocatorUrl": {
          "type": "string",
          "description": "Store locator api url."
        },
        "geonodeUrl": {
          "type": "string",
          "description": "Store geonode api url."
        },
        "storeId": {
          "type": "string",
          "description": "Store identifier."
        },
        "topcategoriesUrl": {
          "type": "string",
          "description": "Store top categories api url."
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier.externalIdentifier": {
      "required": [
        "identifier"
      ],
      "properties": {
        "identifier": {
          "type": "string"
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier.externalIdentifier.storeIdentifier"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "store-OnlineStoreUserDataType.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "store-OnlineStoreSupportedLanguagesType": {
      "properties": {
        "defaultLanguageId": {
          "type": "string"
        },
        "supportedLanguages": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "store-OnlineStoreUserDataType": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store-OnlineStoreUserDataType.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "store-OnlineStoreDescriptionType": {
      "properties": {
        "languageId": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        }
      }
    },
    "store-OnlineStoreSupportedCurrenciesType": {
      "properties": {
        "defaultCurrency": {
          "type": "string"
        },
        "supportedCurrencies": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "store-OnlineStoreRelatedStoresType": {
      "properties": {
        "relatedStoreId": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "relationshipType": {
          "type": "string"
        },
        "relationshipSequence": {
          "type": "string"
        }
      }
    },
    "store-store": {
      "properties": {
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store-store_item"
          }
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.userData.userDataField"
          }
        }
      }
    },
    "store-store_item": {
      "properties": {
        "locationInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store-OnlineStoreContactInfoType"
          }
        },
        "identifier": {
          "type": "string"
        },
        "supportedLanguages": {
          "$ref": "#/definitions/store-OnlineStoreSupportedLanguagesType"
        },
        "ownerId": {
          "type": "string"
        },
        "contactInfo": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store-OnlineStoreContactInfoType"
          }
        },
        "state": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/store-OnlineStoreUserDataType"
        },
        "defaultCatalog": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType"
          }
        },
        "storeType": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store-OnlineStoreDescriptionType"
          }
        },
        "relatedStores": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/store-OnlineStoreRelatedStoresType"
          }
        },
        "supportedCurrencies": {
          "$ref": "#/definitions/store-OnlineStoreSupportedCurrenciesType"
        }
      }
    },
    "com.ibm.commerce.infrastructure.facade.datatypes.DefaultCatalogType.catalogIdentifier.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "storelocator-storelocator_item.Attribute": {
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        },
        "displayName": {
          "type": "string"
        },
        "displayValue": {
          "type": "string"
        }
      }
    },
    "storelocator-storelocator_item.Description": {
      "properties": {
        "displayStoreName": {
          "type": "string"
        }
      }
    },
    "storelocator-storelocator_item": {
      "required": [
        "telephone1"
      ],
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storelocator-storelocator_item.userDataField"
          }
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "city": {
          "type": "string"
        },
        "storeName": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        },
        "latitude": {
          "type": "string",
          "format": "double"
        },
        "telephone1": {
          "type": "string"
        },
        "longitude": {
          "type": "string",
          "format": "double"
        },
        "stateOrProvinceName": {
          "type": "string"
        },
        "distance": {
          "type": "string",
          "format": "double"
        },
        "country": {
          "type": "string"
        },
        "postalCode": {
          "type": "string"
        },
        "Description": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storelocator-storelocator_item.Description"
          }
        },
        "Attribute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storelocator-storelocator_item.Attribute"
          }
        }
      }
    },
    "storelocator-storelocator_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "storelocator-storelocator": {
      "properties": {
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "string"
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "PhysicalStore": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/storelocator-storelocator_item"
          }
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.rest.subscription.handler.SubscriptionHandler$CancelRecurringOrSubscription": {
      "description": "Cancel recurring/subscription order",
      "properties": {
        "state": {
          "type": "string",
          "description": "The state of the order ie(Cancelled)."
        },
        "subscriptionType": {
          "type": "string",
          "description": "The subscription type ie(RecurringOrder)."
        },
        "subscriptionId": {
          "type": "string",
          "description": "The subscription identifier."
        }
      }
    },
    "subscription-IBM_Store_Summary_item": {},
    "com.ibm.commerce.rest.subscription.handler.SubscriptionHandler$SubmitRecurringOrSubscription": {
      "description": "Request body from submitting a Recurring order/Subscription ",
      "required": [
        "payMethodId",
        "timePeriodUOM",
        "paymentIntervalUOM",
        "billing_address_id",
        "paymentInterval",
        "purchaseorder_id",
        "timePeriod",
        "paymentTCId",
        "piAmount",
        "numberOfFulfillment"
      ],
      "properties": {
        "fulfillmentInterval": {
          "type": "string",
          "description": "The day of the week set for subscription fulfillment"
        },
        "payMethodId": {
          "type": "string",
          "description": "The payMethod Identifier"
        },
        "timePeriodUOM": {
          "type": "string",
          "description": "The unit of time ie(Day)."
        },
        "paymentIntervalUOM": {
          "type": "string",
          "description": "The day of month set for collect subscription payment"
        },
        "endDate": {
          "type": "string",
          "description": "The end date for the subscription"
        },
        "billing_address_id": {
          "type": "string",
          "description": "The billing address identifier."
        },
        "paymentInterval": {
          "type": "string",
          "description": "The day of the week set to collect payment."
        },
        "purchaseorder_id": {
          "type": "string",
          "description": "The purchase order identifier."
        },
        "timePeriod": {
          "type": "string",
          "description": "The specified time period."
        },
        "startDate": {
          "type": "string",
          "description": "The start date for the subscription."
        },
        "fulfillmentIntervalUOM": {
          "type": "string",
          "description": "The day of month set for subscription fulfillment"
        },
        "paymentTCId": {
          "type": "string",
          "description": "The Term and Condition identifier."
        },
        "piAmount": {
          "type": "string",
          "description": "The payment insruction amount."
        },
        "storeId": {
          "type": "string",
          "description": "The storeidentifier."
        },
        "numberOfFulfillment": {
          "type": "string",
          "description": "The number of fulfillment centers."
        }
      }
    },
    "com.ibm.commerce.rest.subscription.handler.SubscriptionHandler$SubmitRecurringOrSubscriptionResponse": {
      "description": "Information about an Subscription/Recurring order",
      "properties": {
        "orderId": {
          "type": "string",
          "description": "The organization entity identifier."
        }
      }
    },
    "subscription-IBM_Store_Details_item": {},
    "subscription-IBM_Store_Details": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscription-IBM_Store_Details_item"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "subscription-IBM_Store_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/subscription-IBM_Store_Summary_item"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.tools.contract.beans.DisplayCustomizationTCDataBean_IBM_Store_Details": {
      "properties": {
        "languageId": {
          "type": "integer",
          "format": "int32"
        },
        "hasDisplayLogo": {
          "type": "boolean"
        },
        "hasDisplayText": {
          "type": "boolean"
        },
        "userId": {
          "type": "integer",
          "format": "int64"
        },
        "accountId": {
          "type": "integer",
          "format": "int64"
        },
        "storeId": {
          "type": "integer",
          "format": "int32"
        },
        "attachmentURL": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "displayText": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "com.ibm.commerce.contract.beans.ExtendedTermConditionDataBean_IBM_Store_Details.policies": {
      "properties": {
        "startDate": {
          "type": "string",
          "format": "date"
        },
        "properties": {
          "type": "string"
        },
        "endDate": {
          "type": "string",
          "format": "date"
        },
        "type": {
          "type": "string"
        },
        "storeId": {
          "type": "integer",
          "format": "int32"
        },
        "policyName": {
          "type": "string"
        },
        "policyId": {
          "type": "integer",
          "format": "int64"
        },
        "ownerId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.contract.beans.ExtendedTermConditionDataBean_IBM_Store_Details.participants": {
      "properties": {
        "roleId": {
          "type": "integer",
          "format": "int32"
        },
        "memberId": {
          "type": "integer",
          "format": "int64"
        },
        "termConditionId": {
          "type": "integer",
          "format": "int64"
        },
        "timeCreated": {
          "type": "string",
          "format": "date"
        },
        "tradingId": {
          "type": "integer",
          "format": "int64"
        },
        "information": {
          "type": "string"
        },
        "timeUpdated": {
          "type": "string",
          "format": "date"
        },
        "participantId": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "com.ibm.commerce.contract.beans.ExtendedTermConditionDataBean_IBM_Store_Details": {
      "properties": {
        "tcSequence": {
          "type": "integer",
          "format": "int32"
        },
        "policies": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.contract.beans.ExtendedTermConditionDataBean_IBM_Store_Details.policies"
          }
        },
        "participants": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.contract.beans.ExtendedTermConditionDataBean_IBM_Store_Details.participants"
          }
        },
        "mandatoryFlag": {
          "type": "integer",
          "format": "int32"
        },
        "changeableFlag": {
          "type": "integer",
          "format": "int32"
        },
        "XMLString": {
          "type": "string"
        },
        "termConditionId": {
          "type": "string"
        },
        "timeCreated": {
          "type": "string"
        },
        "tcSubType": {
          "type": "string"
        },
        "tradingId": {
          "type": "string"
        },
        "timeUpdated": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext": {
      "description": "User context.",
      "required": [
        "globalization",
        "catalog",
        "isPartiallyAuthenticated",
        "basicInfo",
        "entitlement"
      ],
      "properties": {
        "globalization": {
          "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Globalization",
          "description": "The user's globalization context."
        },
        "workspace": {
          "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Workspace",
          "description": "The user's workspace information. Available under store preview."
        },
        "preview": {
          "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Preview",
          "description": "The user's preview information. Available under store preview."
        },
        "catalog": {
          "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Catalog",
          "description": "The user's globalization context."
        },
        "isPartiallyAuthenticated": {
          "type": "boolean",
          "description": "Is the user partially authenticated."
        },
        "basicInfo": {
          "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$BasicInfo",
          "description": "The user's basic information."
        },
        "entitlement": {
          "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Entitlement",
          "description": "The user's entitlement information."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Workspace": {
      "description": "User's workspace information.",
      "properties": {
        "workspaceName": {
          "type": "string",
          "description": "The user's active workspace name."
        },
        "task": {
          "type": "string",
          "description": "The user's active task name."
        },
        "taskGroup": {
          "type": "string",
          "description": "The user's active task group name."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Preview": {
      "description": "User's preview information.",
      "properties": {
        "initialtimeDiff": {
          "type": "integer",
          "format": "int64",
          "description": "The initial time difference when preview started."
        },
        "timestamp": {
          "type": "string",
          "description": "The preview timestamp."
        },
        "previewProperties": {
          "$ref": "#/definitions/com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Preview$PreviewProperties",
          "description": "The user's preview properties information. Available under store preview."
        },
        "static": {
          "type": "boolean",
          "description": "Is the preview session time static."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Catalog": {
      "description": "User's catalog.",
      "required": [
        "catalogId",
        "masterCatalog"
      ],
      "properties": {
        "catalogId": {
          "type": "integer",
          "format": "int64",
          "description": "The user's catalog identifier."
        },
        "masterCatalog": {
          "type": "boolean",
          "description": "The user preferred currency."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$BasicInfo": {
      "description": "User's basic information.",
      "required": [
        "callerId",
        "runAsId",
        "storeId",
        "channelId"
      ],
      "properties": {
        "callerId": {
          "type": "integer",
          "format": "int64",
          "description": "The user's caller identifier."
        },
        "runAsId": {
          "type": "integer",
          "format": "int64",
          "description": "The user identifier this session is acting upon."
        },
        "storeId": {
          "type": "integer",
          "format": "int64",
          "description": "The user's store identifier."
        },
        "channelId": {
          "type": "integer",
          "format": "int64",
          "description": "The user's channel identifier."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Entitlement": {
      "description": "User's entitlement information.",
      "required": [
        "activeOrganizationId"
      ],
      "properties": {
        "activeOrganizationId": {
          "type": "integer",
          "format": "int64",
          "description": "The user's active organization identifier."
        },
        "currentTradingAgreementIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "The user's trading agreement identifiers."
        },
        "hostingContractId": {
          "type": "integer",
          "format": "int64",
          "description": "The user's hosting contract identifier."
        },
        "eligibleTradingAgreementIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "The user's eligible trading agreement identifiers."
        },
        "sessionTradingAgreementIds": {
          "type": "array",
          "items": {
            "type": "integer",
            "format": "int64"
          },
          "description": "The user's session trading agreement identifiers."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$PersonalizationIdentifier": {
      "description": "Personalization identitifier.",
      "required": [
        "personalizationID"
      ],
      "properties": {
        "personalizationID": {
          "type": "string",
          "description": "The personalization identifier."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Preview$PreviewProperties": {
      "description": "User's preview properties information.",
      "properties": {
        "previewRestURI": {
          "type": "string",
          "description": "The preview REST URI."
        },
        "previewHost": {
          "type": "string",
          "description": "The preview host name and port."
        },
        "previewInventory": {
          "type": "string",
          "description": "The inventory preview mode."
        },
        "previewPath": {
          "type": "string",
          "description": "The store preview URI."
        }
      }
    },
    "com.ibm.commerce.rest.member.handler.UserContextHandler$UserContext$Globalization": {
      "description": "User's globalization context.",
      "required": [
        "currency",
        "preferredCurrency",
        "languageId",
        "preferredLanguageId"
      ],
      "properties": {
        "currency": {
          "type": "string",
          "description": "The user currency."
        },
        "preferredCurrency": {
          "type": "string",
          "description": "The user preferred currency."
        },
        "languageId": {
          "type": "integer",
          "format": "int64",
          "description": "The user language identifier."
        },
        "preferredLanguageId": {
          "type": "integer",
          "format": "int64",
          "description": "The user preferred language identifier."
        }
      }
    },
    "widget_definition-IBM_Store_Summary_item": {
      "properties": {
        "state": {
          "type": "string"
        },
        "widgetDefinitionId": {
          "type": "string"
        },
        "definitionXml": {
          "type": "string"
        },
        "path": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/widget_definition-IBM_Store_Summary_item.userDataField"
          }
        },
        "vendor": {
          "type": "string"
        },
        "identifier": {
          "type": "string"
        },
        "widgetProperty": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/widget_definition-WidgetProperty"
          }
        },
        "storeId": {
          "type": "string"
        },
        "widgetObjectName": {
          "type": "string"
        },
        "widgetType": {
          "type": "string"
        }
      }
    },
    "widget_definition-WidgetProperty": {
      "properties": {
        "value": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/widget_definition-WidgetProperty.userDataField"
          }
        },
        "name": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "sequenceOrder": {
          "type": "number",
          "format": "double"
        }
      }
    },
    "widget_definition-IBM_Store_Summary_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "widget_definition-IBM_Store_Summary": {
      "properties": {
        "recordSetTotal": {
          "type": "integer",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "boolean"
        },
        "recordSetStartNumber": {
          "type": "integer",
          "format": "int64"
        },
        "resultList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/widget_definition-IBM_Store_Summary_item"
          }
        },
        "recordSetCount": {
          "type": "integer",
          "format": "int64"
        }
      }
    },
    "widget_definition-WidgetProperty.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.attributes": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.attributes": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier.organizationIdentifier": {
      "properties": {
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.mobilePhone1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier.organizationIdentifier": {
      "properties": {
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier": {
      "required": [
        "contactInfoNickName"
      ],
      "properties": {
        "contactInfoNickName": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier.organizationIdentifier"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier.personIdentifier"
        }
      }
    },
    "wishlist-wishlist_item.announcement.emailRecipient.recipientEmail": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/wishlist-wishlist_item.announcement.emailRecipient.recipientEmail.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.userData.userDataField"
          }
        }
      }
    },
    "wishlist-wishlist_item.item": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "itemCreatedTime": {
          "type": "string"
        },
        "quantityRequested": {
          "type": "string",
          "format": "double"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.item.userDataField"
          }
        },
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.StoreIdentifierType"
        },
        "productId": {
          "type": "string"
        },
        "quantityRequestedUom": {
          "type": "string"
        },
        "itemLastUpdate": {
          "type": "string"
        },
        "location": {
          "type": "string"
        },
        "quantityBought": {
          "type": "string",
          "format": "double"
        },
        "attribute": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.item.attribute"
          }
        },
        "giftListItemID": {
          "type": "string"
        },
        "partNumber": {
          "type": "string"
        },
        "quantityBoughtUom": {
          "type": "string"
        },
        "productOwnerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax1.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax2.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListResponse": {
      "description": "Wish list change response.",
      "required": [
        "storeId",
        "uniqueID"
      ],
      "properties": {
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListResponse$Item"
          },
          "description": "Wishlist item to be added or updated."
        },
        "storeId": {
          "type": "string",
          "description": "The store identifier."
        },
        "uniqueID": {
          "type": "string",
          "description": "Wishlist unique identifier."
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought.externalIdentifier.storeIdentifier.externalIdentifier": {
      "properties": {
        "nameIdentifier": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier.personIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier.personIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone1.userData.userDataField"
          }
        }
      }
    },
    "wishlist-wishlist_item.announcement.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "wishlist-wishlist_item.announcement.senderEmailAddress.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.mobilePhone1": {
      "required": [
        "value",
        "country"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.mobilePhone1.userData"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.address.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier.personIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier.personIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.mobilePhone1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.mobilePhone1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$ProcessBodyParameterDescription$AnnouncementBodyDescription": {
      "description": "Announcement body.",
      "required": [
        "senderName",
        "senderEmailAddress"
      ],
      "properties": {
        "senderName": {
          "type": "string",
          "description": "The name of the sender."
        },
        "message": {
          "type": "string",
          "description": "The custom message sent by the sender in the e-mail."
        },
        "emailRecipient": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$ProcessBodyParameterDescription$AnnouncementBodyDescription$EmailRecipient"
          },
          "description": "The recipients of the e-mail."
        },
        "senderEmailAddress": {
          "type": "string",
          "description": "The e-mail address of the sender."
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier.organizationIdentifier": {
      "properties": {
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress2.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaseRecordIdentifier": {
      "properties": {
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$UpdateBodyParameterDescription$WishlistItemBodyDescription": {
      "description": "Wishlist item body.",
      "required": [
        "giftListItemID"
      ],
      "properties": {
        "quantityRequested": {
          "type": "string",
          "description": "Wishlist item quantity requested."
        },
        "productId": {
          "type": "string",
          "description": "Wishlist item product id."
        },
        "partNumber": {
          "type": "string",
          "description": "Wishlist item product partNumber."
        },
        "giftListItemID": {
          "type": "string",
          "description": "Wishlist item ID."
        }
      }
    },
    "wishlist-wishlist_item.announcement.emailRecipient": {
      "required": [
        "recipientEmail",
        "recipientName",
        "addressingMethod"
      ],
      "properties": {
        "recipientEmail": {
          "$ref": "#/definitions/wishlist-wishlist_item.announcement.emailRecipient.recipientEmail"
        },
        "recipientName": {
          "type": "string"
        },
        "addressingMethod": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone2.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax2.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.mobilePhone1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.mobilePhone1.userData.userDataField"
          }
        }
      }
    },
    "wishlist-wishlist_item": {
      "required": [
        "accessSpecifier"
      ],
      "properties": {
        "announcement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.announcement"
          }
        },
        "storeName": {
          "type": "string"
        },
        "guestMessage": {
          "type": "string"
        },
        "state": {
          "type": "string"
        },
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.item"
          }
        },
        "externalIdentifier": {
          "type": "string"
        },
        "createdTime": {
          "type": "string"
        },
        "event": {
          "type": "string"
        },
        "storeId": {
          "type": "string"
        },
        "registryAccessKey": {
          "type": "string"
        },
        "guestAccessKey": {
          "type": "string"
        },
        "manageAccessPassword": {
          "type": "string"
        },
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.userDataField"
          }
        },
        "optForEmail": {
          "type": "string"
        },
        "descriptionName": {
          "type": "string"
        },
        "giftCardAccepted": {
          "type": "string"
        },
        "registrant": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType"
        },
        "uniqueID": {
          "type": "string"
        },
        "storeOwnerID": {
          "type": "string"
        },
        "purchaseRecord": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType"
          }
        },
        "location": {
          "type": "string"
        },
        "coRegistrant": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType"
          }
        },
        "postEventAddress": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
        },
        "accessSpecifier": {
          "type": "string"
        },
        "description": {
          "type": "string"
        },
        "registry": {
          "type": "string"
        },
        "preEventAddress": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType"
        },
        "lastUpdate": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$ProcessBodyParameterDescription": {
      "description": "Description of the post input body to process the wishlist.",
      "properties": {
        "announcement": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$ProcessBodyParameterDescription$AnnouncementBodyDescription"
          },
          "description": "The e-mail announcements made about the gift list by the registrants to friends and family."
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.address.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.address.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone2.userData.userDataField"
          }
        }
      }
    },
    "wishlist-wishlist_item.item.attribute": {
      "required": [
        "name"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "name": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$ProcessBodyParameterDescription$AnnouncementBodyDescription$EmailRecipient": {
      "description": "The recipients of the e-mail.",
      "required": [
        "recipientEmail",
        "recipientName",
        "addressingMethod"
      ],
      "properties": {
        "recipientEmail": {
          "type": "string",
          "description": "E-mail address of the recipient."
        },
        "recipientName": {
          "type": "string",
          "description": "The name of the sender."
        },
        "addressingMethod": {
          "type": "string",
          "description": "The method in which the recipient is addressed in the e-mail, for example, they are directly addressed (TO), they are copied on the mail (CC), and so on."
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "wishlist-wishlist_item.announcement": {
      "required": [
        "senderName",
        "message",
        "emailRecipient",
        "senderEmailAddress"
      ],
      "properties": {
        "senderName": {
          "type": "string"
        },
        "giftListAnnouncementID": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/wishlist-wishlist_item.announcement.userData"
        },
        "sentDate": {
          "type": "string"
        },
        "message": {
          "type": "string"
        },
        "emailRecipient": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.announcement.emailRecipient"
          }
        },
        "senderEmailAddress": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.mobilePhone1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.mobilePhone1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax2.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType": {
      "properties": {
        "organizationUnitName": {
          "type": "string"
        },
        "mobilePhone1": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.mobilePhone1"
        },
        "contactName": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactName"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "telephone1": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone1"
        },
        "telephone2": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone2"
        },
        "fax1": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax1"
        },
        "address": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.address"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.userData"
        },
        "fax2": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax2"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.attributes"
          }
        },
        "contactInfoIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier"
        },
        "language": {
          "type": "string"
        },
        "emailAddress1": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress1"
        },
        "emailAddress2": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress2"
        },
        "geographicalShippingCode": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone1.userData"
        },
        "type": {
          "type": "string"
        },
        "publish": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone2.userData"
        },
        "type": {
          "type": "string"
        },
        "publish": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier.personIdentifier.externalIdentifier": {
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone1.userData"
        },
        "type": {
          "type": "string"
        },
        "publish": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.address": {
      "properties": {
        "primary": {
          "type": "boolean"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.address.userData"
        },
        "country": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postalCode": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone2.userData"
        },
        "type": {
          "type": "string"
        },
        "publish": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought.externalIdentifier": {
      "required": [
        "partNumber"
      ],
      "properties": {
        "storeIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought.externalIdentifier.storeIdentifier"
        },
        "partNumber": {
          "type": "string"
        },
        "ownerID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress": {
      "properties": {
        "organizationUnitName": {
          "type": "string"
        },
        "mobilePhone1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.mobilePhone1"
        },
        "contactName": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactName"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "telephone1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone1"
        },
        "telephone2": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone2"
        },
        "fax1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax1"
        },
        "address": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.address"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.userData"
        },
        "fax2": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax2"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.attributes"
          }
        },
        "contactInfoIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier"
        },
        "language": {
          "type": "string"
        },
        "emailAddress1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress1"
        },
        "emailAddress2": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress2"
        },
        "geographicalShippingCode": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.fax2.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactName": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier": {
      "required": [
        "contactInfoNickName"
      ],
      "properties": {
        "contactInfoNickName": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier.organizationIdentifier"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactInfoIdentifier.externalIdentifier.personIdentifier"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.address": {
      "properties": {
        "primary": {
          "type": "boolean"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.address.userData"
        },
        "country": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postalCode": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType": {
      "properties": {
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.userData"
        },
        "registrantID": {
          "type": "string"
        },
        "registrantAddress": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress"
        },
        "relation": {
          "type": "string"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.personIdentifier"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails": {
      "required": [
        "quantity",
        "itemBought"
      ],
      "properties": {
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.userData"
        },
        "itemShippedToRegistrant": {
          "type": "boolean"
        },
        "transactionID": {
          "type": "string"
        },
        "orderItemIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.orderItemIdentifier"
        },
        "quantity": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.quantity"
        },
        "itemBought": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$DeleteWishListResponse": {
      "description": "Wish list delete response.",
      "required": [
        "uniqueID"
      ],
      "properties": {
        "uniqueID": {
          "type": "string",
          "description": "Wishlist unique identifier."
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress": {
      "properties": {
        "organizationUnitName": {
          "type": "string"
        },
        "mobilePhone1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.mobilePhone1"
        },
        "contactName": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactName"
        },
        "bestCallingTime": {
          "type": "string"
        },
        "telephone1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone1"
        },
        "telephone2": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone2"
        },
        "fax1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax1"
        },
        "address": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.address"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.userData"
        },
        "fax2": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax2"
        },
        "geographicalTaxCode": {
          "type": "string"
        },
        "attributes": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.attributes"
          }
        },
        "contactInfoIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier"
        },
        "language": {
          "type": "string"
        },
        "emailAddress1": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress1"
        },
        "emailAddress2": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress2"
        },
        "geographicalShippingCode": {
          "type": "string"
        },
        "organizationName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.orderItemIdentifier": {
      "properties": {
        "externalOrderItemID": {
          "type": "string"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.address": {
      "properties": {
        "primary": {
          "type": "boolean"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.address.userData"
        },
        "country": {
          "type": "string"
        },
        "addressLine": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "postalCode": {
          "type": "string"
        },
        "type": {
          "type": "string"
        },
        "internalOfficeAddress": {
          "type": "string"
        },
        "city": {
          "type": "string"
        },
        "stateOrProvinceName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier.personIdentifier.externalIdentifier": {
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.quantity": {
      "properties": {
        "value": {
          "type": "number",
          "format": "double"
        },
        "uom": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress1.userData"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.attributes": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress2.userData"
        }
      }
    },
    "wishlist-wishlist_item.item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier.personIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.contactInfoIdentifier.externalIdentifier.personIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$UpdateBodyParameterDescription": {
      "description": "Description of the post input body to update the wishlist or item.",
      "properties": {
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$UpdateBodyParameterDescription$WishlistItemBodyDescription"
          },
          "description": "Wishlist item to be added or updated."
        },
        "descriptionName": {
          "type": "string",
          "description": "Wishlist description name."
        },
        "description": {
          "type": "string",
          "description": "Wishlist description."
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress1.userData"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress2.userData"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress1.userData.userDataField"
          }
        }
      }
    },
    "wishlist-wishlist_item.announcement.emailRecipient.recipientEmail.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListUpdateResponse$Item": {
      "description": "Wishlist item body.",
      "required": [
        "giftListItemID"
      ],
      "properties": {
        "giftListItemID": {
          "type": "string",
          "description": "Wishlist item ID."
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.mobilePhone1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress1.userData"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax1.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.emailAddress2.userData"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.fax2.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.address.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.contactName": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListResponse$Item": {
      "description": "Wishlist item body.",
      "required": [
        "giftListItemID"
      ],
      "properties": {
        "giftListItemID": {
          "type": "string",
          "description": "Wishlist item ID."
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress2.userData.userDataField"
          }
        }
      }
    },
    "wishlist-wishlist_item.announcement.senderEmailAddress.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.announcement.senderEmailAddress.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.address.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.address.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.mobilePhone1": {
      "required": [
        "value",
        "country"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.mobilePhone1.userData"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactName": {
      "properties": {
        "middleName": {
          "type": "string"
        },
        "lastName": {
          "type": "string"
        },
        "personTitle": {
          "type": "string"
        },
        "businessTitle": {
          "type": "string"
        },
        "firstName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.address.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress2.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.personIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.personIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        },
        "distinguishedName": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone1.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone1.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListUpdateResponse": {
      "description": "Wish list change response.",
      "required": [
        "uniqueID"
      ],
      "properties": {
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$WishListUpdateResponse$Item"
          },
          "description": "Wishlist item to be added or updated."
        },
        "uniqueID": {
          "type": "string",
          "description": "Wishlist unique identifier."
        }
      }
    },
    "wishlist-wishlist": {
      "properties": {
        "recordSetTotal": {
          "type": "string",
          "format": "int64"
        },
        "recordSetComplete": {
          "type": "string"
        },
        "recordSetStartNumber": {
          "type": "string",
          "format": "int64"
        },
        "recordSetCount": {
          "type": "string",
          "format": "int64"
        },
        "GiftList": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier.personIdentifier.externalIdentifier": {
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$CreateBodyParameterDescription": {
      "description": "Description of the post input body to create a wishlist or item.",
      "properties": {
        "item": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.rest.wishlist.handler.WishlistHandler$CreateBodyParameterDescription$WishlistItemBodyDescription"
          },
          "description": "Wishlist items to be added."
        },
        "giftCardAccepted": {
          "type": "string",
          "description": "Wishlist gift card accepted."
        },
        "descriptionName": {
          "type": "string",
          "description": "Wishlist description name."
        },
        "accessSpecifier": {
          "type": "string",
          "description": "Wishlist access specifier."
        },
        "description": {
          "type": "string",
          "description": "Wishlist description."
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier": {
      "required": [
        "contactInfoNickName"
      ],
      "properties": {
        "contactInfoNickName": {
          "type": "string"
        },
        "organizationIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier.organizationIdentifier"
        },
        "personIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.contactInfoIdentifier.externalIdentifier.personIdentifier"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.emailAddress1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought.externalIdentifier.storeIdentifier": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought.externalIdentifier.storeIdentifier.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax1.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.fax2.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.personIdentifier.externalIdentifier": {
      "properties": {
        "identifier": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.telephone1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought": {
      "properties": {
        "externalIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails.itemBought.externalIdentifier"
        },
        "uniqueID": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone1": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone1.userData"
        },
        "type": {
          "type": "string"
        },
        "publish": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone2": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.foundation.common.datatypes.ContactInfoType.telephone2.userData"
        },
        "type": {
          "type": "string"
        },
        "publish": {
          "type": "boolean"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.emailAddress2.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "wishlist-wishlist_item.announcement.senderEmailAddress": {
      "required": [
        "value"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/wishlist-wishlist_item.announcement.senderEmailAddress.userData"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone2.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.telephone2.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.rest.wishlist.handler.WishlistHandler$CreateBodyParameterDescription$WishlistItemBodyDescription": {
      "description": "Wishlist item body.",
      "required": [
        "location",
        "productId"
      ],
      "properties": {
        "quantityRequested": {
          "type": "string",
          "description": "Wishlist item quantity requested."
        },
        "location": {
          "type": "string",
          "description": "Wishlist item location."
        },
        "productId": {
          "type": "string",
          "description": "Wishlist item product id."
        },
        "partNumber": {
          "type": "string",
          "description": "Wishlist item product partNumber."
        }
      }
    },
    "wishlist-wishlist_item.announcement.emailRecipient.recipientEmail.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.announcement.emailRecipient.recipientEmail.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.mobilePhone1": {
      "required": [
        "value",
        "country"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.mobilePhone1.userData"
        },
        "country": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType": {
      "required": [
        "noteSent",
        "purchaseDate",
        "location"
      ],
      "properties": {
        "purchaserAddress": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress"
        },
        "registrantMemo": {
          "type": "string"
        },
        "noteSent": {
          "type": "boolean"
        },
        "purchasedItemDetails": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchasedItemDetails"
        },
        "messageForRegistrant": {
          "type": "string"
        },
        "purchaseDate": {
          "type": "string"
        },
        "status": {
          "type": "string"
        },
        "userData": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.userData"
        },
        "location": {
          "type": "string"
        },
        "dateCreated": {
          "type": "string"
        },
        "purchaseRecordIdentifier": {
          "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaseRecordIdentifier"
        },
        "giftListItemID": {
          "type": "string"
        },
        "lastUpdate": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "wishlist-wishlist_item.announcement.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/wishlist-wishlist_item.announcement.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListPurchaseRecordType.purchaserAddress.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.address.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.registrantAddress.address.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.userData": {
      "properties": {
        "userDataField": {
          "type": "array",
          "items": {
            "$ref": "#/definitions/com.ibm.commerce.giftcenter.facade.datatypes.GiftListRegistrantType.userData.userDataField"
          }
        }
      }
    },
    "com.ibm.commerce.foundation.common.datatypes.ContactInfoType.mobilePhone1.userData.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    },
    "wishlist-wishlist_item.userDataField": {
      "required": [
        "key"
      ],
      "properties": {
        "value": {
          "type": "string"
        },
        "key": {
          "type": "string"
        }
      }
    }
  }
}